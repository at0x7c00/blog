<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Erlang学习笔记1-顺序编程</title>
      <link href="/2017/08/08/Erlang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E9%A1%BA%E5%BA%8F%E7%BC%96%E7%A8%8B/"/>
      <url>/2017/08/08/Erlang%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01-%E9%A1%BA%E5%BA%8F%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>Erlang中的变量其实是不能变的，它类似数学方程式中的字符，代表着一个常量。Erlang的变量经过一次模式匹配绑定上值之后就不能再改变了。</p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>如格式{,,…,_}组成的数据叫做元组。<br>元组类似Java中的对象，但是元组可以拥有任意“属性”。<br>可以通过如下方式提取元组的元素值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1&gt;Point=&#123;point,45,50&#125;.</span><br><span class="line">&#123;point,45,50&#125;</span><br><span class="line">2&gt;&#123;point,X,Y&#125;=Point.</span><br><span class="line">&#123;point,45,50&#125;</span><br><span class="line">3&gt;X.</span><br><span class="line">45</span><br><span class="line">4&gt;Y.</span><br><span class="line">50</span><br></pre></td></tr></table></figure><p>通过这样的方式就能将X和Y分别匹配到元组中的元素值了。<br>还可以通过匿名变量“_”来进行匹配：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1&gt;Point=&#123;point,45,50&#125;.</span><br><span class="line">&#123;point,45,50&#125;</span><br><span class="line">2&gt;&#123;_,_,Y&#125;=Point.</span><br><span class="line">&#123;point,45,50&#125;</span><br><span class="line">3&gt;Y.</span><br><span class="line">50</span><br></pre></td></tr></table></figure><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>格式[,,…,_]的数据被称作列表。<br>列表类似于Java中的数组或者集合。但是列表中的元素类型是可以相互不同的。</p><p>列表有表头和表尾之分。一个列表的第一个元素就是表头，其余的元素就是表尾。可以通过[H|T]的方来合并两个列表:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1&gt;ThingsToBuy = [&#123;apples,10&#125;,&#123;pears,6&#125;,&#123;milk,3&#125;].</span><br><span class="line">...</span><br><span class="line">2&gt;ThingsToBuy1 = [&#123;oranges,4&#125;,&#123;newspaper,1&#125;|ThingsToBuy].</span><br><span class="line">[&#123;oranges,4&#125;,&#123;newspaper,1&#125;,&#123;apples,10&#125;,&#123;pears,6&#125;,&#123;milk,3&#125;]</span><br></pre></td></tr></table></figure><p>还可以通过[T|H]的方式来提取表头和表尾。这种提取表头的方式非常实用，遍历列表元素时经常会用到。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">3&gt;[H|T] = ThingsToBuy1.</span><br><span class="line">[&#123;oranges,4&#125;,&#123;newspaper,1&#125;,&#123;apples,10&#125;,&#123;pears,6&#125;,&#123;milk,3&#125;]</span><br><span class="line">4&gt;H.</span><br><span class="line">&#123;oranges,4&#125;</span><br><span class="line">5&gt;T.</span><br><span class="line">[&#123;newspaper,1&#125;,&#123;apples,10&#125;,&#123;pears,6&#125;,&#123;milk,3&#125;]</span><br></pre></td></tr></table></figure><h2 id="模块与函数"><a href="#模块与函数" class="headerlink" title="模块与函数"></a>模块与函数</h2><p>函数实现中也是一种模式匹配，如下代码实现了商品-&gt;价格的映射函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-module(shop)</span><br><span class="line">-export([cost/1])</span><br><span class="line">cost(oranges) -&gt; 5;</span><br><span class="line">cost(newspaper) -&gt; 8;</span><br><span class="line">cost(apples) -&gt; 2;</span><br><span class="line">cost(pears) -&gt; 9;</span><br><span class="line">cost(milk) -&gt; 7.</span><br></pre></td></tr></table></figure><p>一个”-&gt;”其实代表了一种模式匹配。当遇到了oranges时返回5；当遇到newspaper时返回8，以此类推。由“;”分隔的各条语句的顺序不重要，因为每条模式匹配都是排他的。</p><p>调用函数的时候使用“模块名称:方法名称(参数名称)”的形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1&gt;shop:cost(apples).</span><br><span class="line">2</span><br><span class="line">2&gt;shop:cost(oranges).</span><br><span class="line">5</span><br></pre></td></tr></table></figure><p>递归计算商品总价<br>现在来实现一个函数，能够计算商品列表的总价。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-module(shop1)</span><br><span class="line">-export([total/1]).</span><br><span class="line">total([&#123;What,N&#125;|T]) -&gt; shop:cost(What) * N + total(T);</span><br><span class="line">total([]) -&gt; 0.</span><br></pre></td></tr></table></figure><p>total函数调用了本身，这里用到了递归来依次加上每一项商品的价格。<br>递归本身和其他传统编程语言没有差别。区别在于对集合元素的遍历。Erlang通过[H|T]的方式逐一拿到列表的表头，从而实现了遍历。</p><p>另外，增加一个total([]) -&gt; 0.来实现递归的终止。有且必须要有这条语句。否者在模式匹配上会报错。</p><p>fun:基本抽象单元<br>之前定义在模块中的函数貌似没法赋值给另外一个遍历（存疑？？）。<br>作为函数式编程语言。Erlang可以像JavaScript那样定义一个函数并将这个函数赋值给一个变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&gt;Double = fun(X) -&gt; 2*X end.</span><br><span class="line">#Fun&lt;erl_eval.6.56006483&gt;</span><br></pre></td></tr></table></figure><p>之后就可以调用这个函数了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2&gt;Double(2).</span><br><span class="line">4</span><br></pre></td></tr></table></figure><p>以fun作为参数使用<br>Erlang内置函数lists:map(Fun,List)函数的作用是为列表总的每个元素执行Fun方法。可以通过如下方法，使购物清单中的数量增加一倍：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1&gt;ThingsToBuy = [&#123;apples,10&#125;,&#123;pears,6&#125;,&#123;milk,3&#125;].</span><br><span class="line">[&#123;apples,10&#125;,&#123;pears,6&#125;,&#123;milk,3&#125;]</span><br><span class="line">2&gt;lists:map(fun(&#123;What,N&#125;) -&gt; &#123;What,N*2&#125; end,ThingsToBuy).</span><br><span class="line">[&#123;apples,20&#125;,&#123;pears,12&#125;,&#123;milk,6&#125;]</span><br></pre></td></tr></table></figure></p><p>另外一个内置函数lists:filter(Fun,List)可以对列表List的各个元素进行筛选,满足Fun函数的元素将会被筛选出来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&gt;L = [1,2,3,4,5,6,7,8].</span><br><span class="line">2&gt;lists:filter(fun(X)-&gt;(X rem 2)=:=0 end,L).</span><br><span class="line">[2,4,6,8]</span><br></pre></td></tr></table></figure><p>以fun作为返回值使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1&gt;Fruit = [apple,orange,pear].</span><br><span class="line">2&gt;MakeTest = fun(L) -&gt; (fun(X) -&gt; lists:member(X,L) end)end.</span><br><span class="line">3&gt;IsFruit = MakeTest(Fruit).</span><br><span class="line">4&gt;IsFruit(apple).</span><br><span class="line">true</span><br><span class="line">5&gt;IsFruit(pear).</span><br><span class="line">true</span><br><span class="line">6&gt;IsFruit(dog).</span><br><span class="line">false</span><br></pre></td></tr></table></figure></p><p>定义自己的抽象控制<br>Erlang没有for循环，但是我们可以根据自己的需求来定义for：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">for(Max,Max,F) -&gt; [F(Max)];</span><br><span class="line">for(I,Max,F)   -&gt; [F(I)|for(I+1,Max,F)].</span><br></pre></td></tr></table></figure><p>打出1到10：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1&gt;constol:for(1,10,fun(X) -&gt; X end).</span><br><span class="line">[1,2,3,4,5,6,7,8,9,10]</span><br></pre></td></tr></table></figure></p><p>列表推导<br>如果需要将一个列表转换成另外一个列表，可以通过如下的格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[ F(X) || X &lt;- L]</span><br></pre></td></tr></table></figure></p><p>意思是将列表L的每个元素X执行F函数后得到另外一个列表。</p><p>(未完待续)</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>确诊患上了甲亢</title>
      <link href="/2017/08/08/%E7%A1%AE%E8%AF%8A%E6%82%A3%E4%B8%8A%E4%BA%86%E7%94%B2%E4%BA%A2/"/>
      <url>/2017/08/08/%E7%A1%AE%E8%AF%8A%E6%82%A3%E4%B8%8A%E4%BA%86%E7%94%B2%E4%BA%A2/</url>
      
        <content type="html"><![CDATA[<p>去医院检查了一堆，最后确诊患上了甲亢，目前还有一项结果没查出来。但肯定是患上了这种病了。</p><p>甲亢全称甲状腺机能亢进，是一种内分泌疾病。甲状腺过多地分泌甲状腺激素，导致身体代谢过度旺盛。如心率加快导致心率不齐（早搏），消化旺盛（食欲大增，大便次数也增多），多汗怕热，身体消瘦。</p><p>个人认为患甲亢是因为过多的透支身体导致的。</p><p>我曾经有一次出差，由于着急赶回来的火车，通宵给客户写系统。忙到了4点多弄好了，休息的时候就遇到了可怕的梦魇。梦魇就是身体不受意识控制，第一次遇到时还以为自己灵魂出窍快要挂了。后来在网上查了才知道，其实是由于身体过于劳累已经沉睡了但神经系统兴奋还醒着的，导致了两者配合不协调从而出现了上述感觉。</p><p>梦魇也是一种身体透支的现象。身体的硬件已经很疲劳了，但是软件还在要求努力工作。这时候应该做的就是听从硬件的信号马上休息。</p><p>如果不休息，继续强求的话，这时候我们的身体其实很奇怪，他确实就会强打起精神来继续工作。但这其实是在逼迫身体了，已经是在透支了。</p><p>透支的结果是，身体将不再继续发出信号了。身体刚开始说：“算了，赶紧休息吧，我不行了！”。后来就会听从神经系统的指令，“好吧好吧在继续工作吧”。</p><p>一旦身体不再发出信号就很危险了，因为你的随时可能倒下。</p><p>身体透支最初的一个信号就是：紊乱。<br>就像机械过度使用时会发热、冒火花，各个部件可能会失控配合不协调。<br>身体和机械一模一样。拿甲亢来说吧。本来甲状腺会听从脑垂体的。脑垂体通过分泌促甲状腺激素来告诉甲状腺分泌甲状腺激素，从而让身体进入代谢加强来应付工作或学习。但如果身体透支，甲状腺分泌甲状腺激素的多少将不受脑垂体的控制，从而出现一种失控的状态。甲状腺此时的行为因何造成的呢？我觉得是神经系统。神经系统压力过大，始终不停地要求身体努力工作，而脑垂体分管的部门早就下班了，但甲状腺所在的部门应更高层领导的要求继续加班，不听命于直接上级了。</p><p>不要小看身体的紊乱，因为肿瘤其实也是紊乱的一个例子。肿瘤细胞就不受身体的控制任意生长。这和甲状腺不受脑垂体控制是一样的现象。所以神经紊乱、内分泌失调等等都是由于不良生活习惯导致身体透支引起的。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>��������</title>
      <link href="/2017/08/01/%E5%85%B3%E4%BA%8E%E6%AD%BB%E4%BA%A1/"/>
      <url>/2017/08/01/%E5%85%B3%E4%BA%8E%E6%AD%BB%E4%BA%A1/</url>
      
        <content type="html"><![CDATA[<p>�����ֵ�ʱ��������77kg����Ŵӽ��������·ֵ�ʱ��ʼ�������٣����ҷ��ֵ�ʱ���Ѿ�ֻ��70kg�ˡ��տ�ʼ����ϲ��һֱ����ʵ�Ŀ���ڲ�������ʵ���ˡ�����������ע���ؾͿ�ʼ���Ծ��ˡ��ҵ����ػ��ڼ����»��������Ѿ���66.5kg�ˡ������ؽ���֮ǰ������һ�μ������ܵ����ɲ��뾭���������������ؽ���֮�����ʧ�ˡ�</p><p>�����һ�û��ȥϵͳ��죬ԭ����Ȼ������</p><blockquote><p>2017-08-08���£�ȥҽԺ��������׿�</p></blockquote><p>�����ò������Լ��ǲ��ǵ���ʲô�ز��ˡ�Ҳ����ֻ�ǵ�������֢�ˣ���Ϊ��ÿ�����Ϲص�֮��ͻ��뵽�������뵽������һ���������û�к�����û��������û����ʶ�������������ʧ������޾��ĺڰ��������Ҷ೤�٣�ʱ���ܻ����⣬ֻ�ǳ�������顣</p><p>�������򵽣���������һ�����̣����������ĵ�ͼ�Ӳ���״̬���һ��ֱ��һֱ������ȥ����ֻ��һ��ת�۵㣬������һ������ĵ�ͼ�����ټ���������Ǿʹ�ֹͣ���Ҳ���ȥ����޾��ĺڰ�������Ҳ�����£�<br>������������Щ�ֲ��ı��������Ļ���Ҳ��ֻ���˳��������屾�ܵķ�Ӧ��ʧȥ��ʶ���˸����о������κ�ʹ�ࡣ</p><p>�Ҿ��ã������ĸо�Ӧ�úͳ���֮ǰ��������̥�γ�֮ǰ�ĸо���һ���ġ�ʲô�о���û�о�������֮ǰ����û��������磬������Ҳû���ҡ��������֮���Ч����һģһ���ġ�</p><p>��������Ǵ�����ѧ���ܽ��������������һ���û�����ܡ������ϴӴ�û���ҡ�����ʵ��</p><p>��һֱ���á��ҡ��Ĵ����Ƿǳ�����ġ����������ҵ���˼���Ҿ����ң���û��վ��������������������硣��ֻ��һ�����Թ۲��ⲿ�����С���磬�����С�������ʧ�����ǹ¶��ģ�û�����ܺ����Ƿ������С���硣</p><blockquote><p>������¶���<br>����ȥ���Ǽٵģ�������һ��û�й�;��·��������һ�д��춼�޷���ԭ����ʹ�����&gt;�Ҽ��͵İ��飬������Ҳ������ת˲���ŵ���ʵ��Ψ�й¶����㡣��</p></blockquote><p>��Ϊ�����ǹ¶��ģ�������һ�仰�ǶԵģ����������չ˺����ǵ�ֻ�������Լ�����<br>���������ˣ���Ӧ�����Լ�������Ϣһ�£���������ǿ��֡�<br>�����ѹ�������ʱ�����ķſ�Щ������˵����Ȱ��Ļ���û�ã��ؼ����ǿ����Լ���</p>]]></content>
      
      
      <categories>
          
          <category> �ռ� </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2017年中总结</title>
      <link href="/2017/07/12/2017%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93/"/>
      <url>/2017/07/12/2017%E5%B9%B4%E4%B8%AD%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>不知不觉今年已经过去了一半。<br>来拓唯已经一年半了，公司依然没有很大的起色。前景堪忧。我也早已经失去了往日的激情，对工作和生活都很麻木。没有目标，没有兴趣，只是为了生计而工作着。</p><p>17年开始几个月，坚持记单词，阅读，其实是有收获的。至少感觉良好，内心充满正能量。但后来就越来越差了，主要是身体不知道什么原因，比较疲惫，心律不齐，四个多月时间瘦了20斤。真是过了30岁就开始走下坡路了？很恐怖，我还一直以为自己只是到了瓶颈期呢。</p><p>家人都还好，女儿半年来都挺顺利，母亲跟老婆之间会时长拌嘴，但也都没什么大的矛盾。房子装修的磕磕绊绊，也总算完工了。</p><p>还是要提醒自己，生活不应该那么着急，未来是今日一点一滴的积累筑成的，不能急功近利。欲速则不达。但也不能毫无章法，随心所欲。一旦乱了就会麻木，失去对时间的控制，到头来一事无成。</p><p>得考虑换个工作了，没准还能换到房山离家近一点儿的公司？ 如果拓唯始终没有起色，到年底，两年的时间已经算很长了，如果实在不行，那只能说再见了。</p><p>从现在开始，为年底找出路。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ADFS配置及（Java）调用详解</title>
      <link href="/2017/06/22/ADFS%E9%85%8D%E7%BD%AE%E5%8F%8A%EF%BC%88Java%EF%BC%89%E8%B0%83%E7%94%A8%E8%AF%A6%E8%A7%A3/"/>
      <url>/2017/06/22/ADFS%E9%85%8D%E7%BD%AE%E5%8F%8A%EF%BC%88Java%EF%BC%89%E8%B0%83%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="配置ADFS"><a href="#配置ADFS" class="headerlink" title="配置ADFS"></a>配置ADFS</h1><p>基本可以按照<a href="http://www.web520.cn/archives/41572" target="_blank" rel="noopener">http://www.web520.cn/archives/41572</a>来配置ADFS，但是其中的web服务器证书模板添加ADFS主机名称这一步我就没有操作成功，但也没管，后来还是通了。</p><h1 id="Java-Saml"><a href="#Java-Saml" class="headerlink" title="Java-Saml"></a>Java-Saml</h1><p>这是一个开源的SAML客户端，还有<a href="https://github.com/onelogin" target="_blank" rel="noopener">其他语言版本</a>的，很强大，并且更新很频繁。<br><a href="https://github.com/onelogin/java-saml" target="_blank" rel="noopener">https://github.com/onelogin/java-saml</a></p><h1 id="重要说明"><a href="#重要说明" class="headerlink" title="重要说明"></a>重要说明</h1><ul><li>所有证书里的通信证书才是最关键的，客户端都是通过这个证书来通信的。<br><img src="/images/note-images/certs.png" alt></li><li>信赖方配置时各个URL都应该配什么，参考这里<a href="https://www.vidbeo.com/support/users/how-do-i-configure-single-sign-on-using-adfs" target="_blank" rel="noopener">https://www.vidbeo.com/support/users/how-do-i-configure-single-sign-on-using-adfs</a></li><li>java-saml需要pkcs#8格式的密钥，可以通过如下方式来转换得到：<blockquote><p>How to convert a .PFX format private key to PKCS#8</p><ol><li>Make an back up copy from IIS</li><li>Convert .PFX to .PEM<br>bin/openssl pkcs12 -in YourCertName.pfx -nocerts -nodes -out NewName.pem<br>(When prompted, enter the .PFX Private Key Password)</li><li>Convert PEM to PKCS8<br>bin/openSSL pkcs8 -in NewName.pem -topk8 -nocrypt -out YourCertName.pk8</li></ol></blockquote></li></ul><p>参考:<a href="https://knowledge.symantec.com/kb/index?page=content&amp;id=SO12643&amp;pmv=print&amp;actp=PRINT&amp;viewlocale=en_US" target="_blank" rel="noopener">https://knowledge.symantec.com/kb/index?page=content&amp;id=SO12643&amp;pmv=print&amp;actp=PRINT&amp;viewlocale=en_US</a></p><ul><li>信赖方的加密属性：可以不选，如果选一定要选之前提到的“通信证书”<br><img src="/images/note-images/relay.png" alt></li><li>Windows Server 2016服务器在Logout时有bug，无法正常跳转。<br><a href="https://social.technet.microsoft.com/Forums/windows/en-US/acbf767a-2758-49bc-b3ab-45a8420af780/logout-when-adfs-is-bridge-between-wsfederation-rp-and-saml-claims-provider-external-saml-idp?forum=ADFS" target="_blank" rel="noopener">https://social.technet.microsoft.com/Forums/windows/en-US/acbf767a-2758-49bc-b3ab-45a8420af780/logout-when-adfs-is-bridge-between-wsfederation-rp-and-saml-claims-provider-external-saml-idp?forum=ADFS</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ADFS </tag>
            
            <tag> java-saml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近</title>
      <link href="/2017/05/31/%E6%9C%80%E8%BF%91/"/>
      <url>/2017/05/31/%E6%9C%80%E8%BF%91/</url>
      
        <content type="html"><![CDATA[<p>忽然想起年初的周记习惯已经很久都没有了，英语单词也放下很久没有背了，那去干嘛去了？什么也没做，最近一直忙着家里的装修，带孩子，时间过得稀里糊涂地。啥都没做但却很累，身体比最重的时候轻了20斤！</p><p>把网站<a href="http://itkuaibao.cn" target="_blank" rel="noopener">IT快报</a>上线了，但用户量始终是零，貌似没啥激情去弄了。</p><p>一句话，生活又开始失控了，失控的生活会忘记读书，忘记思考，忘记为未来积攒力量。一切又开始归于混沌不知方向。那种对未来激情澎湃的感觉不知去向了。</p><p>是为一周开始，以此自勉激励。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>工作上几个亟待解决的问题</title>
      <link href="/2017/05/09/%E5%B7%A5%E4%BD%9C%E4%B8%8A%E5%87%A0%E4%B8%AA%E4%BA%9F%E5%BE%85%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/"/>
      <url>/2017/05/09/%E5%B7%A5%E4%BD%9C%E4%B8%8A%E5%87%A0%E4%B8%AA%E4%BA%9F%E5%BE%85%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="完备的测试机制"><a href="#完备的测试机制" class="headerlink" title="完备的测试机制"></a>完备的测试机制</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">老板：给xx系统升级到最新版，一会儿要配置企业号</span><br><span class="line"></span><br><span class="line">我：好</span><br><span class="line"></span><br><span class="line">老板：按计划明天培训，升完级每个模块都完整走个单子</span><br><span class="line"></span><br><span class="line">我：好</span><br><span class="line"></span><br><span class="line">老板：其他的配置都点一下，不要添加，可以修改</span><br></pre></td></tr></table></figure><p>一次小小的升级其实没什么，但一想到无聊的测试就让人心生厌倦。</p><h1 id="持续集成"><a href="#持续集成" class="headerlink" title="持续集成"></a>持续集成</h1><p>不同版本来回切换，各种bug和需求漫天飞，SQL升级总是让人头痛，工作一直处于凌乱之中。如果真的忙不过来，那只能消极怠工了，因为再怎么挣扎也是枉然。</p><h1 id="更新工具集"><a href="#更新工具集" class="headerlink" title="更新工具集"></a>更新工具集</h1><p>Java9都快要发布了，我们还一直在使用Java7,老旧的不一定不能用，但新的工具是很多团队努力创造的，肯定有它的优势所在，工作效率会高很多。</p><h1 id="TODO-list"><a href="#TODO-list" class="headerlink" title="TODO list"></a>TODO list</h1><ol><li>寻求测试解决之道</li><li>尝试实施持续集成</li><li>学习Java8、9和Groovy，应用到工作当中</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计划 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>网站运维杂记</title>
      <link href="/2017/05/07/%E7%BD%91%E7%AB%99%E8%BF%90%E7%BB%B4%E6%9D%82%E8%AE%B0/"/>
      <url>/2017/05/07/%E7%BD%91%E7%AB%99%E8%BF%90%E7%BB%B4%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL错误：The-server-quit-without-updating-PID-file-xxx-xxx-xxx-pid"><a href="#MySQL错误：The-server-quit-without-updating-PID-file-xxx-xxx-xxx-pid" class="headerlink" title="MySQL错误：The server quit without updating PID file(xxx/xxx/xxx.pid)"></a>MySQL错误：The server quit without updating PID file(xxx/xxx/xxx.pid)</h1><p>网上有N多重原因可以导致这个错误，这里增加一条，my.cnf被编辑到一半是异常退出也会导致这个问题。由于网络原因，我再编辑my.cnf的时候突然断开了。然后在打开vi的时候，被告知在交换区有内容需要处理。这时候一定不能忽视它，一定要仔细根据说明将交换区的内容处理掉。</p><h1 id="处理交换区（swap）的内容"><a href="#处理交换区（swap）的内容" class="headerlink" title="处理交换区（swap）的内容"></a>处理交换区（swap）的内容</h1><p>Linux的说明就已经很详细了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">E325: ATTENTION</span><br><span class="line">Found a swap file by the name <span class="string">".a.txt.swp"</span></span><br><span class="line">          owned by: root   dated: Sun May  7 02:35:31 2017</span><br><span class="line">         file name: /usr/<span class="built_in">local</span>/tomcat8/bin/a.txt</span><br><span class="line">          modified: YES</span><br><span class="line">         user name: root   host name: iz8vbbqbnh4ug2q9so5jflz</span><br><span class="line">        process ID: 4114 (still running)</span><br><span class="line">While opening file <span class="string">"a.txt"</span></span><br><span class="line">             dated: Sun May  7 02:35:21 2017</span><br><span class="line"></span><br><span class="line">(1) Another program may be editing the same file.  If this is the <span class="keyword">case</span>,</span><br><span class="line">    be careful not to end up with two different instances of the same</span><br><span class="line">    file when making changes.  Quit, or <span class="built_in">continue</span> with caution.</span><br><span class="line">(2) An edit session <span class="keyword">for</span> this file crashed.</span><br><span class="line">    If this is the <span class="keyword">case</span>, use <span class="string">":recover"</span> or <span class="string">"vim -r a.txt"</span></span><br><span class="line">    to recover the changes (see <span class="string">":help recovery"</span>).</span><br><span class="line">    If you did this already, delete the swap file <span class="string">".a.txt.swp"</span></span><br><span class="line">    to avoid this message.</span><br></pre></td></tr></table></figure></p><h1 id="CentOS-7-防火墙"><a href="#CentOS-7-防火墙" class="headerlink" title="CentOS 7 防火墙"></a>CentOS 7 防火墙</h1><p>不用iptables了，用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl mask firewalld</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 交换区 </tag>
            
            <tag> tomcat </tag>
            
            <tag> firewall </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017第9周、第10周总结</title>
      <link href="/2017/04/17/2017-week-9-and-10/"/>
      <url>/2017/04/17/2017-week-9-and-10/</url>
      
        <content type="html"><![CDATA[<p>总结都合并在一起写了，说明是有多懒了。这两周身体不舒服，读书学习都停滞了。为了不忘记总结的好习惯，这里简单写写吧，也算是把周号补齐了。</p><p>心脏不舒服，严重时相当难受。应该是休息不好导致的，一直早搏，心律不齐，胸口闷，打嗝。真是身体是革命的本钱啊。</p><p>因为没户口的外地小孩儿在北京连幼儿园都上不了，我再一次感觉到在北京待着就是个错误。我经常想到把房子卖了去个能收留我们的城市安家。</p><p>我知道我是在求生活，不应该那么矫情。但是真心觉得自己不爱现在的工作，没办法做到全身心投入。我需要自己乐意干的事业，哪怕苦一点儿也没事。</p><p>这几天装修、买家具家电，真心觉得自己挣的钱太可怜。《富爸爸穷爸爸》中就有说到，每一个人都需要培育自己的财富树。省吃俭用固然可以增加积蓄，但是不能致富，更不能实现钱生钱的目标。只有达到了钱生钱，有被动收入，才有可能实现财务自由。切忌铺张浪费，但省吃俭用至是最原始的致富方法。我需要把工资收入合理地分成不同的途径来用：</p><p>房租<br>房贷<br>生活日杂<br>健康工程<br>创业基金<br>教育基金<br>娱乐</p><p>前期特别是创业基金，一定要寻找正确渠道去花掉这一笔钱，否则就落入了挣死工资的套路，永远麻木的挣一个花一个了。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2017第8周总结</title>
      <link href="/2017/04/05/2017-week-8/"/>
      <url>/2017/04/05/2017-week-8/</url>
      
        <content type="html"><![CDATA[<p>清明节，没啥意思。<br>感觉心脏不舒服，去医院检查，什么都没看出来，还生一肚子气。<br>和老婆去果各庄，感觉是去了荒郊野岭了，村里还不如原村热闹。一点儿人气都没有。<br>女儿快能走路了。<br>装修：地砖铺完了，窗户和门也换了，就剩墙面和吊顶了。</p><p>心脏不适很长时间了，是时候调整一下了：<br>1.增加运动量，早晚上下班路上增加骑自行车的路程。<br>2.平时保持温和的心态，给自己减压，劳逸结合，轻松面对工作和生活。</p><p>工作也学习基本没有什么很迫切的目标了，就一心想把我的网站搞起来</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>胡思乱想</title>
      <link href="/2017/04/05/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/"/>
      <url>/2017/04/05/%E8%83%A1%E6%80%9D%E4%B9%B1%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>接触的人和事太少了，有种与世隔绝的感觉。对工作有些懈怠，感觉自己的工资拿得有些没有安全。三个人的公司，老板天天在网络上遥控自己，突然在脑海中冒出一个词语–“求生活”。</p><p>虽然买房子了，可是跟人聊我住的那边时仍然会说“我住那儿”而不是“我家”。那天母亲在小区里跟别人聊天，听说没户口的小孩儿上不了小区里的幼儿园。一听到这感觉心都凉了。这里真的是他乡啊，怎么努力都感觉不到亲近。比起许多老家小学毕业就出门打工挣钱的同学，觉得自己更加居无定所。他们可以在打工的城市一直生活下去，而我始终觉得自己哪天需要在孩子上学的时候卖掉房子回老家去。人老了，有孩子了，就都有这种想法吗？</p><p>我觉得自己真的需要时间大力发展自己的事业，全身心投入做自己最喜欢做的事情，才能让自己不至于浪费青春。做自己喜欢的事、擅长的事！挣自己的钱才踏实啊。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2017第7周总结</title>
      <link href="/2017/03/27/2017-week-7/"/>
      <url>/2017/03/27/2017-week-7/</url>
      
        <content type="html"><![CDATA[<h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>工作没啥可说的，没有什么新鲜的东西。</p><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>一次买了三本CSS方面的书，后来感觉有点儿后悔啊，太冲动了，根本没有规划时间来学习，光顾藏书了。<br>算法学习就别提了，感觉要重头开始看了。 🙂<br>英语单词也没以前记得认真了，但总体还算是坚持下来了，只得鼓励。</p><h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>闺女体检结果：肥胖，建议多运动。<br>平时就感觉闺女很重，昨天抱了抱邻居家的诺诺感觉比我闺女轻好多啊。<br>母亲从宜昌来北京了（3月25）。<br>房子装修终于开始了，昨天去看了看，窗户换完了，卫生间的瓷砖都贴完了，进度很快啊。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2017第6周总结</title>
      <link href="/2017/03/20/2017-week-6/"/>
      <url>/2017/03/20/2017-week-6/</url>
      
        <content type="html"><![CDATA[<p>即使我的这些日志发布在了网上，但被身边的熟人看到的机会几乎等于零，所以，我觉得我真的可以在这里放大点儿胆子，什么都可以说，不必藏着掖着。</p><p>以前每次接完私活儿都会很后悔，觉得要痛定思痛决定以后再也不干了。但每次有新的活儿来的时候，还是会心动。这两三周时间，一直在忙着可客户做网站，真的很累。我是那种有活儿没做完就会心里一直惦记的人，所以在公司上班的时候也想着这个网站，一有时间就想弄一弄。但结果是公司的活儿落了一大截，好几天都没有产出，心里有很大危机感。周末一直加班弄，在公司也胆战心惊地弄，就像做贼似的（真的是做贼？好吧我承认）。搞得我很紧张，休息也休息不好。发觉总是心悸（或者叫心动异常？），很是不舒服，妈的，这点儿钱真是不好挣啊。</p><p>其实我知道，做网站这种活儿，在淘宝上已经有很多廉价提供商，我的生产力远达不到他们那么高。所以做网站这种活儿我不应该去接，吃力不讨好。我一心想做一个资讯类网站，先做好内容，然后扩展规模。真正去经营一个网站，看会面对一些什么问题。把它作为自己的项目来做，思考如何盈利，这种事情比做网站有意义得多。</p><p>对于公司的前景，说实话，我并不看好，新UI也上去了，但是并没有多大的反响，一片死寂。做这个东西真的挣不了多少钱。我知道一天拿公司六百块回家（税后）还干着别人的活儿有点儿不地道。但我也没办法，我对公司的活儿真的没多少兴趣了（兴趣真的很重要）。</p><p>我要更快速地摸索出自己的路子来，走出公司，自己挣自己的钱。这才是长久之道。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>79岁大爷的人生经验</title>
      <link href="/2017/03/15/Seventy-nine-year-old-uncle-s-life-experience/"/>
      <url>/2017/03/15/Seventy-nine-year-old-uncle-s-life-experience/</url>
      
        <content type="html"><![CDATA[<p>在公交车上听一帮老头聊天，其中一个79岁的大爷谈论他的人生经验，总结如下：</p><p>不要贪图享乐，要勤俭节约<br>少吃荤，多喝水，多吃素，吃五谷杂粮<br>行好事，重过程，莫急前程</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017第5周总结</title>
      <link href="/2017/03/13/2017-week-5/"/>
      <url>/2017/03/13/2017-week-5/</url>
      
        <content type="html"><![CDATA[<h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>这周一直在忙自己的项目，勉强继续背着单词，书却不怎么看了。<br>周六晚上加班快到两点，第二天（昨天）一直昏昏沉沉，难道真的老了啊。不能熬夜了。</p><p>女儿被蚊子咬了，脸上咬了四处，特别是眼睛上也被咬了一下，肿得厉害。哎，女儿像是我们的试验品，总有发生了才知道小心的事情。</p><p>哥周六下班了过来了一趟，总体感觉很无趣。他的日子也不好过，我们的日子也很平淡。他一过来，更显得日子过得毫无乐趣。</p><p>母亲想过来帮忙带孩子了，而我和老婆却因为之前和她相处的经历不太希望她过来了。她总喜欢玩手机（微信），还不乐意我们说她。不仅如此，只要她在，任何事情都得按她的意思来。哪儿稍微不和她的意就会被念叨。总之，她不愿意被人管，反而喜欢管别人。我很担心以后该如何跟母亲相处。</p><h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><p>我越来越觉得需要投资培植自己的项目，哪怕不盈利，但我得转变自己的角色或者叫生活模式。我要作为一个独立的个体向社会提供我所能提供的服务，而不是每天等到下班时间点下班，然后自由自在不思进取。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2017第4周总结</title>
      <link href="/2017/03/06/2017-week-4/"/>
      <url>/2017/03/06/2017-week-4/</url>
      
        <content type="html"><![CDATA[<h1 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h1><h2 id="《万万没想到》"><a href="#《万万没想到》" class="headerlink" title="《万万没想到》"></a><a href="https://book.douban.com/subject/25986341/" target="_blank" rel="noopener">《万万没想到》</a></h2><p>这本书也是读到最后越是感触越深啊。</p><ol><li>不要刻意去藏书，书买到家里了不代表就是你的了，你把它消化了真的是你的；</li><li>书只读一遍是不够的，要能从全局理解作者的写书的思路。全局上理解书的思想。否则容易见树不见林；</li><li>一定要做读书笔记，书要越读越薄，最后书可以丢掉，只看笔记就好了。读书笔记能带走一本书里的全部精华，而不仅仅是读后感。<br>4.马太效应：名字来自圣经《新约·马太福音》一则寓言：“凡有的，还要加倍给他叫他多余；没有的，连他所有的也要夺过来”。以此来描述现在的穷富两级分化：穷人将会越来越穷，而富人将会更加富有。如何避免自己越来越穷，值得思考。</li></ol><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p>程序员的常态：小修小补，毫无乐趣。</p><h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>继续扇贝背单词，算法学习停滞了，一周没继续了！</p><h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>给老婆买了个iphone6，哈哈~~<br>三十了，得知道如何保养自己的身体了。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我的Web订阅系统</title>
      <link href="/2017/03/03/My-Web-Subscribtion-System/"/>
      <url>/2017/03/03/My-Web-Subscribtion-System/</url>
      
        <content type="html"><![CDATA[<p>根据图书<a href="https://book.douban.com/subject/25986341/" target="_blank" rel="noopener">《万万没想到》</a>的介绍，规划出我的Web订阅系统的需求如下：</p><h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ol><li>能够订阅每个网站不同位置（基于CSS选择器原理）的内容，网站有更新即可现实到<em>个人列表中</em>。</li><li>可以在个人列表中对待阅读条目进行<em>标记</em>、删除等操作</li><li>可以在<em>标签栏</em>中查看各个标签的文件夹。打开标签进行各个条目的阅读。</li></ol><h1 id="系统目标"><a href="#系统目标" class="headerlink" title="系统目标"></a>系统目标</h1><p>用户可以将自己关心的网站，包括新闻、资讯、论坛、社区等网站加入到订阅条目中。系统会自动检测网站的更新状态。这样用户每天就不用去打开各个网站了，只需要盯着这个系统就可以了。不用担心有重要的信息没有看到，也不会被其他无关的信息打扰。</p><p>系统与RSS（暂时不支持RSS，以后可以支持）相比的优势是，各种类型的网站都可以订阅。很多网站其实是不提供RSS功能或者RSS的内容有限。</p><p>系统另外的一个优点是，你可以在一个地方综合考虑去看或不看哪些信息，多个条目摆在一起方便读者对比，很容易判断自己最应该读的信息是哪些，其他没有排上名的可以统一标记为已读或者直接删除。<br>对于最重要的信息，可以标记加星，等有时间的时候再仔细研究。通过这种方式来过滤掉垃圾信息，排查出重要信息。</p><h1 id="远期目标"><a href="#远期目标" class="headerlink" title="远期目标"></a>远期目标</h1><ol><li>可以对大量的网站进行监听，从而实现一个拥有丰富细致分类的门户总站；</li><li>用户可以关注不同的分类，系统可以向用户推荐内容；</li><li>用户可参与内容采集、分享。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 订阅系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Gradle快速生成项目升级文件</title>
      <link href="/2017/03/02/Use-Gradle-to-make-project-update-file/"/>
      <url>/2017/03/02/Use-Gradle-to-make-project-update-file/</url>
      
        <content type="html"><![CDATA[<h1 id="安装Gradle"><a href="#安装Gradle" class="headerlink" title="安装Gradle"></a>安装Gradle</h1><p>参考这里:<a href="https://gradle.org/install" target="_blank" rel="noopener">https://gradle.org/install</a>。</p><h1 id="打包脚本"><a href="#打包脚本" class="headerlink" title="打包脚本"></a>打包脚本</h1><p>在Tomcat下创建一个build.gradle文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">task zipRoot(<span class="built_in">type</span>:Zip) &#123;</span><br><span class="line"> archiveName <span class="string">"Update-file.zip"</span></span><br><span class="line"> from (<span class="string">'webapps'</span>)</span><br><span class="line"> exclude(</span><br><span class="line"> <span class="string">'docs'</span>,</span><br><span class="line"> <span class="string">'examples'</span>,</span><br><span class="line"> <span class="string">'host-manager'</span>,</span><br><span class="line"> <span class="string">'manager'</span>,</span><br><span class="line"> <span class="string">'**/lib'</span>,</span><br><span class="line"> <span class="string">'**/oss.properties'</span>,</span><br><span class="line"> <span class="string">'**/log4j.properties'</span>,</span><br><span class="line"> <span class="string">'**/jdbc.properties'</span>,</span><br><span class="line"> <span class="string">'**/rds.properties'</span>,</span><br><span class="line"> <span class="string">'**/auth2-config.properties'</span></span><br><span class="line"> )</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>做升级时，我一般只复制经常修改的文件，项有些配置文件是不能覆盖的（生产环境和开发环境是不一样的）。</p><h1 id="编写DOS脚本"><a href="#编写DOS脚本" class="headerlink" title="编写DOS脚本"></a>编写DOS脚本</h1><p>在build.gradle文件的相同位置创建zipRoot.bat脚本，内容如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gradle zipRoot</span><br></pre></td></tr></table></figure></p><p>这样，每次要生成升级文件时，只需双击zipRoot.bat文件就可以自动生成文件了。</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gradle </tag>
            
            <tag> 持续集成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub调查: 超过50%的Java日志语句写法错误</title>
      <link href="/2017/03/01/GitHub-Research-Over-50-of-Java-Logging-Statements-Are-Written-Wrong/"/>
      <url>/2017/03/01/GitHub-Research-Over-50-of-Java-Logging-Statements-Are-Written-Wrong/</url>
      
        <content type="html"><![CDATA[<h1 id="为什么你无法利用生产系统的日志找到错误的根本原因"><a href="#为什么你无法利用生产系统的日志找到错误的根本原因" class="headerlink" title="为什么你无法利用生产系统的日志找到错误的根本原因?"></a>为什么你无法利用生产系统的日志找到错误的根本原因?</h1><p>要问你是否用日志文件去监视你的系统就好像在问你是不是喝水一样。我们都用日志，但是我们怎么用的日志其实很难回答。<br>在下面的文章中，我们将深入到日志文件中看看他们是怎么写的,都写了些什么。<br>咱们开始吧。</p><blockquote><p>特别感谢（Big shout out to）研发团队（R&amp;D team）的Aviv Danziger的大力帮助，帮我们对数据进行分析处理。   </p></blockquote><h1 id="基本原理-Groundwork"><a href="#基本原理-Groundwork" class="headerlink" title="基本原理(Groundwork)"></a>基本原理(Groundwork)</h1><p>我们的研究需要大量的数据，因此我们使用了Google BigQuery，几个月之前，我们第一次用它来统计Github上排名前列的Java项目是怎么使用日志的。<br>截止到这篇文章发表，我们统计了Github上排名前400,000的Java仓库（根据2016年项目获取到的星数排名）。我们从中排除了Android、样例程序和简单的测试程序。留下了17,797个仓库。</p><p>然后，我们提取了包含100条以上日志语句的仓库，最后剩下了1,463个仓库。现在，是时候为让我们彻夜不眠的问题找到答案了。</p><h1 id="TL-DR-Too-long-Don’t-Read-主要结论"><a href="#TL-DR-Too-long-Don’t-Read-主要结论" class="headerlink" title="TL;DR(Too long;Don’t Read): 主要结论"></a><a href="https://www.zhihu.com/question/20187408" target="_blank" rel="noopener">TL;DR(Too long;Don’t Read)</a>: 主要结论</h1><p>如果你没心思去看统计图，想跳过本文直奔主题，这里给出我们总结的重要的五点：</p><ol><li>日志没有我们想象的那样包含很多信息，即使日志可能每天以上百GB的速度增长。50%以上的日志语句不包含任何关于程序变量状态的信息。</li><li>在生成系统中，64%的日志语句都是不活动的。</li><li>The logging statements that do reach production have 35% less variables than the average development level logging statement。</li><li>经常出现“This should never happen” 。</li><li>应该有更好的办法来解决生成系统中的错误。</li></ol><p>现在我们用数据来说明每一点。</p><h1 id="1-实际上有多少日志语句包含变量"><a href="#1-实际上有多少日志语句包含变量" class="headerlink" title="1. 实际上有多少日志语句包含变量?"></a>1. 实际上有多少日志语句包含变量?</h1><p>首先我们要检查的是每条语句中有多少变量。在每个仓库中,我们选择将语句划分成从0个变量到5个及以上的几组。然后获取到总数，并且获取到在所有研究的仓库中的平均数值。</p><p><img src="https://www.javacodegeeks.com/wp-content/uploads/2017/02/totalrepo-300x253@2x.png" alt="Average Java Project by Number of Variables"><br>Java项目日志中平均包含变量个数</p><p>看到了吗, 日志中包含变量平均个数为0的占到了50%以上。 另外可见仅有0.95%的项目的日志语句中包含5个及以上变量。<br>这意味着日志文件捕捉到的系统信息其实是非常有限的。要从日志文件中分析出到底发生了什么犹如大海捞针一样困难。</p><h1 id="2-在生产系统中有多少日志语句是活动的"><a href="#2-在生产系统中有多少日志语句是活动的" class="headerlink" title="2. 在生产系统中有多少日志语句是活动的?"></a>2. 在生产系统中有多少日志语句是活动的?</h1><p>多种原因会造成开发环境和生产环境的差异，不同日志的方式其中之一。在开发环境中，所有级别都是活动的。但是，在生成系统中仅有ERROR和WARN的是活动的。<br>看起来就想这样：<br><img src="https://www.javacodegeeks.com/wp-content/uploads/2017/02/prodvslog-300x190@2x.png" alt><br>开发环境和生产环境日志的差异</p><p>统计显示，Java应用中有35.5%的日志语句在生产系统中有可能被执行（ERROR, WARN），另外的65.5%的语句仅在开发环境执行（TRACE, INFO, DEBUG）。<br>哎呀，大部分信息都丢失了！ </p><h1 id="3-一条日志中平均包含多少个变量"><a href="#3-一条日志中平均包含多少个变量" class="headerlink" title="3. 一条日志中平均包含多少个变量?"></a>3. 一条日志中平均包含多少个变量?</h1><p>所以，不仅开发人员在编程语句中省略了变量，平均上看Java系统在日志系统中根本没有多少语句能执行。<br>现在，我们决定来看看每个级别的日志平均包含多少个变量信息。</p><p><img src="https://www.javacodegeeks.com/wp-content/uploads/2017/02/logging_level-300x273@2x.png" alt="Average Number of Variables per Logging Statement"><br>每条日志语句平均包含变量数量</p><p>从平均值上看到，TRACE、DEBUG和INFO的日志比WARN和ERROR的包含更多的变量信息。“更多”时相对的，前三种日志包含的变量数量平均为0.78个，后两个的平均值为0.5（作者的意思是都很低）。<br>这意味着生产系统的日志语句包含的变量数量比开发系统要少35%。另外，前面提过，他们全部的数量也很少。</p><p>如果你在从日志中分析系统出了什么故障，但一无所获。不用担心，其实还有别的好办法。</p><p>用<a href="https://en.wikipedia.org/wiki/OverOps" target="_blank" rel="noopener">OverOps</a> 可以帮你在不依赖日志文件的内容下，看到任何异常、错误日志或和警告的变量信息。你可以通过事件调用栈看到完整的源码和变量状态。即使并没有打印任何信息到日志文件。OverOps还能展示出错误之前的250条DEBUG、TRACE 和INFO级别的语句。<br><a href="https://youtu.be/xb8eP08b2iQ" target="_blank" rel="noopener">点击这里查看Demo</a></p><h1 id="4-This-Should-Never-Happen"><a href="#4-This-Should-Never-Happen" class="headerlink" title="4. This Should Never Happen"></a>4. This Should Never Happen</h1><p>我们已经了解了这些日志语句的所有信息, 来开个玩笑. 我们发现了58处 “This should never happen”。<br>我们想说的是，如果那真的应该不会发生，那你至少应该体面的打印一两个变量出来，这样你才能知道它到底是怎么发生的。</p><h1 id="我们怎么实现的这些统计"><a href="#我们怎么实现的这些统计" class="headerlink" title="我们怎么实现的这些统计?"></a>我们怎么实现的这些统计?</h1><p>如上文提到，为了得到这些数据，我们第一步是过滤到没用的Java项目，关注那些超过100条日志语句的项目。最后得到1463个项目。<br>然后通过正则表达式取出所有日志行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT *</span><br><span class="line">FROM [java-log-levels-usage:java_log_level_usage.top_repos_java_contents_lines_no_android_no_arduino]</span><br><span class="line">WHERE REGEXP_MATCH(line, r<span class="string">'.*((LOGGER|Logger|logger|LOG|Log|log)[.](trace|info|debug|warn|warning|error|fatal|severe|config|fine|finer|finest)).*'</span>)</span><br><span class="line">OR REGEXP_MATCH(line, r<span class="string">'.*((Level|Priority)[.](TRACE|TRACE_INT|X_TRACE_INT|INFO|INFO_INT|DEBUG|DEBUG_INT|WARN|WARN_INT|WARNING|WARNING_INT|ERROR|ERROR_INT)).*'</span>)</span><br><span class="line">OR REGEXP_MATCH(line, r<span class="string">'.*((Level|Priority)[.](FATAL|FATAL_INT|SEVERE|SEVERE_INT|CONFIG|CONFIG_INT|FINE|FINE_INT|FINER|FINER_INT|FINEST|FINEST_INT|ALL|OFF)).*'</span>)</span><br></pre></td></tr></table></figure><p>现在我们拿到了数据，现在开始进行切分。首先，过滤出每一个日志级别包含的变量数量。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">SELECT sample_repo_name</span><br><span class="line">      ,log_level</span><br><span class="line">      ,CASE WHEN parametersCount + concatenationCount = 0  THEN <span class="string">"0"</span></span><br><span class="line">            WHEN parametersCount + concatenationCount = 1  THEN <span class="string">"1"</span></span><br><span class="line">            WHEN parametersCount + concatenationCount = 2  THEN <span class="string">"2"</span></span><br><span class="line">            WHEN parametersCount + concatenationCount = 3  THEN <span class="string">"3"</span></span><br><span class="line">            WHEN parametersCount + concatenationCount = 4  THEN <span class="string">"4"</span></span><br><span class="line">            WHEN parametersCount + concatenationCount &gt;= 5 THEN <span class="string">"5+"</span></span><br><span class="line">        END total_params_tier</span><br><span class="line">      ,SUM(parametersCount + concatenationCount) total_params</span><br><span class="line">      ,SUM(CASE WHEN parametersCount &gt; 0 THEN 1 ELSE 0 END) has_parameters</span><br><span class="line">      ,SUM(CASE WHEN concatenationCount &gt; 0 THEN 1 ELSE 0 END) has_concatenation</span><br><span class="line">      ,SUM(CASE WHEN parametersCount = 0 AND concatenationCount = 0 THEN 1 ELSE 0 END) has_none</span><br><span class="line">      ,SUM(CASE WHEN parametersCount &gt; 0 AND concatenationCount &gt; 0 THEN 1 ELSE 0 END) has_both</span><br><span class="line">      ,COUNT(1) logging_statements</span><br><span class="line">      ,SUM(parametersCount) parameters_count</span><br><span class="line">      ,SUM(concatenationCount) concatenation_count</span><br><span class="line">      ,SUM(CASE WHEN isComment = <span class="literal">true</span> THEN 1 ELSE 0 END) comment_count</span><br><span class="line">      ,SUM(CASE WHEN shouldNeverHappen = <span class="literal">true</span> THEN 1 ELSE 0 END) should_never_happen_count</span><br><span class="line">  FROM [java-log-levels-usage:java_log_level_usage.top_repos_java_log_lines_no_android_no_arduino_attributes]  </span><br><span class="line"> GROUP BY sample_repo_name</span><br><span class="line">         ,log_level</span><br><span class="line">         ,total_params_tier</span><br></pre></td></tr></table></figure></p><p>然后计算每个级别的平均值。如下显示了计算所有仓库语句平均半分比的方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">SELECT total_params_tier</span><br><span class="line">      ,AVG(logging_statements / total_repo_logging_statements) percent_out_of_total_repo_statements</span><br><span class="line">      ,SUM(total_params) total_params</span><br><span class="line">      ,SUM(logging_statements) logging_statements</span><br><span class="line">      ,SUM(has_parameters) has_parameters</span><br><span class="line">      ,SUM(has_concatenation) has_concatenation</span><br><span class="line">      ,SUM(has_none) has_none</span><br><span class="line">      ,SUM(has_both) has_both</span><br><span class="line">      ,SUM(parameters_count) parameters_count</span><br><span class="line">      ,SUM(concatenation_count) concatenation_count</span><br><span class="line">      ,SUM(comment_count) comment_count</span><br><span class="line">      ,SUM(should_never_happen_count) should_never_happen_count</span><br><span class="line">  FROM (SELECT sample_repo_name</span><br><span class="line">              ,total_params_tier</span><br><span class="line">              ,SUM(total_params) total_params</span><br><span class="line">              ,SUM(logging_statements) logging_statements</span><br><span class="line">              ,SUM(logging_statements) OVER (PARTITION BY sample_repo_name) total_repo_logging_statements</span><br><span class="line">              ,SUM(has_parameters) has_parameters</span><br><span class="line">              ,SUM(has_concatenation) has_concatenation</span><br><span class="line">              ,SUM(has_none) has_none</span><br><span class="line">              ,SUM(has_both) has_both</span><br><span class="line">              ,SUM(parameters_count) parameters_count</span><br><span class="line">              ,SUM(concatenation_count) concatenation_count</span><br><span class="line">              ,SUM(comment_count) comment_count</span><br><span class="line">              ,SUM(should_never_happen_count) should_never_happen_count</span><br><span class="line">          FROM [java-log-levels-usage:java_log_level_usage.top_repos_java_log_lines_no_android_no_arduino_attributes_counters_with_params_count]</span><br><span class="line">         GROUP BY sample_repo_name</span><br><span class="line">                 ,total_params_tier)</span><br><span class="line"> WHERE total_repo_logging_statements &gt;= 100</span><br><span class="line"> GROUP BY total_params_tier</span><br><span class="line"> ORDER BY 1,2</span><br></pre></td></tr></table></figure></p><p>你可以从我们的<a href="http://384uqqh5pka2ma24ild282mv.wpengine.netdna-cdn.com/wp-content/uploads/2017/02/Logging-Scrapes-from-GitHub.xlsx" target="_blank" rel="noopener">原始数据文件</a>看看计算过程.</p><h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><p>我们都使用日志文件，但好像大多数都认为这是理所当然（take them for granted）的。大量的日志管理工具让我们忘了去优化自己的代码，让代码可以易读，方便我们理解、调试和修复。</p><blockquote><p>原文：<a href="https://www.javacodegeeks.com/2017/02/github-research-50-java-logging-statements-written-wrong.html" target="_blank" rel="noopener">https://www.javacodegeeks.com/2017/02/github-research-50-java-logging-statements-written-wrong.html</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 翻译 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Log </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017第3周总结</title>
      <link href="/2017/02/27/2017-week-3/"/>
      <url>/2017/02/27/2017-week-3/</url>
      
        <content type="html"><![CDATA[<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>1、继续扇贝记单词。发现阅读《远大前程》这类书都很吃力啊，自己的词汇量和阅读能力真的吃紧啊，远比想象的糟糕。<br>2、《算法》学习进展缓慢。</p><h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>岳母回高平了，以后老婆更辛苦了。</p><h1 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h1><p><a href="http://ent1.topvee.cn/" target="_blank" rel="noopener">NITSM</a>系统新UI上线了，感觉还不错，希望市场反馈能好点儿吧。</p><h1 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h1><h2 id="《万万没想到》"><a href="#《万万没想到》" class="headerlink" title="《万万没想到》"></a>《<a href="https://book.douban.com/subject/25986341/" target="_blank" rel="noopener">万万没想到</a>》</h2><p>1,随机事件的产生概率不受历史数据的影响：虽然我有三年天天买彩票却一分钱都没中的经历，但不能说明我以后买彩票中奖的几率就会更大。想要在1到10的数字中抽到6，前面五次都没抽到6，并不能证明下一次抽到6的几率就大于10%。概率的平均分布是在“大数状态”下的理想预测，实际情况下不会因为历史数据而对未来的随机概率产生影响。因此，彩票分析完全是扯淡的行为。</p><p>2,随机事件产生的分布状态在“小数状态”时容易产生极端，让人觉得有什么规律性。</p><p>3,人的意志力就像肌肉的力量一样是可以被用完的，所以你应该节约你的意志力，在一些不重要的问题上少去消耗意志力，才能在真正需要意志力的地方够用。因此，我觉得自己不应该为了多一点儿时间来学习而牺牲自己的休息时间。</p><blockquote><p>作者博客:<a href="http://www.geekonomics10000.com/" target="_blank" rel="noopener">学而时嘻之-用理工科思维理解世界</a><br>引申阅读：<br><a href="https://book.douban.com/subject/3688489/" target="_blank" rel="noopener">《异类》</a><br><a href="https://book.douban.com/subject/25876611/" target="_blank" rel="noopener">《引爆点》</a><br><a href="https://book.douban.com/subject/10785583/" target="_blank" rel="noopener">《思考，快与慢》</a></p></blockquote><h1 id="这个也有意思"><a href="#这个也有意思" class="headerlink" title="这个也有意思"></a>这个也有意思</h1><p><a href="https://www.zhihu.com/question/22590902" target="_blank" rel="noopener">如何挣钱？</a></p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>算法学习之排序</title>
      <link href="/2017/02/23/algorithms-sort/"/>
      <url>/2017/02/23/algorithms-sort/</url>
      
        <content type="html"><![CDATA[<h1 id="Sort"><a href="#Sort" class="headerlink" title="Sort"></a>Sort</h1><h1 id="Insert-sort"><a href="#Insert-sort" class="headerlink" title="Insert sort"></a>Insert sort</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSort</span><span class="params">(Comparable[] items)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;items.length; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i;j &gt; <span class="number">0</span> &amp;&amp; less(items[j],items[j-<span class="number">1</span>]); j--)&#123;</span><br><span class="line">exchange(items, j, j - <span class="number">1</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/xooxle/algs4/raw/master/sort/me/huqiao/algs4/sort/pic/insert-sort.gif" alt="Alt Insert sort" title="Insert sort"></p><h1 id="Select-sort"><a href="#Select-sort" class="headerlink" title="Select sort"></a>Select sort</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSort</span><span class="params">(Comparable[] items)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;items.length; i++)&#123;</span><br><span class="line"><span class="keyword">int</span> minIndex = i;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>;j&lt;items.length; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(less(items[j],items[minIndex]))&#123;</span><br><span class="line">minIndex = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">exchange(items, i, minIndex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/xooxle/algs4/raw/master/sort/me/huqiao/algs4/sort/pic/select-sort.gif" alt="Alt Select sort" title="Select sort"></p><h1 id="Shell-sort"><a href="#Shell-sort" class="headerlink" title="Shell sort"></a>Shell sort</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSort</span><span class="params">(Comparable[] items)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = items.length;</span><br><span class="line"><span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(h&lt;N) h = h*<span class="number">3</span> + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">while</span>(h&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">List&lt;Integer&gt; highlight = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i;j&gt;=h &amp;&amp; less(items[j],items[j - h]); j-=h)&#123;</span><br><span class="line">exchange(items,j,j - h);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">h/=<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/xooxle/algs4/raw/master/sort/me/huqiao/algs4/sort/pic/shell-sort.gif" alt="Alt Shell sort" title="Shell sort"></p><h1 id="Merge-sort"><a href="#Merge-sort" class="headerlink" title="Merge sort"></a>Merge sort</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSort</span><span class="params">(Comparable[] items)</span> </span>&#123;</span><br><span class="line">aux = <span class="keyword">new</span> Comparable[items.length];</span><br><span class="line">sort(items,<span class="number">0</span>,items.length  - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] items,<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(hi&lt;=lo) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid = lo + (hi - lo) / <span class="number">2</span>;</span><br><span class="line">sort(items,lo,mid);</span><br><span class="line">sort(items,mid + <span class="number">1</span>,hi);</span><br><span class="line">merge(items,lo,mid,hi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] items,<span class="keyword">int</span> lo,<span class="keyword">int</span> mid,<span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = lo,j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = lo; k &lt;= hi; k++)&#123;</span><br><span class="line">aux[k] = items[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = lo; k &lt;= hi; k++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i &gt; mid)&#123;</span><br><span class="line">items[k] = aux[j];</span><br><span class="line">j++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(j &gt; hi)&#123;</span><br><span class="line">items[k] = aux[i];</span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(less(aux[i] , aux[j]))&#123;</span><br><span class="line">items[k] = aux[i];</span><br><span class="line">i++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">items[k] = aux[j];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure><p><img src="https://github.com/xooxle/algs4/raw/master/sort/me/huqiao/algs4/sort/pic/merge-sort.gif" alt="Alt Merge sort" title="Merge sort"></p><h1 id="Quick-sort"><a href="#Quick-sort" class="headerlink" title="Quick sort"></a>Quick sort</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSort</span><span class="params">(Comparable[] items)</span> </span>&#123;</span><br><span class="line">sort(items,<span class="number">0</span>,items.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] items,<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(hi&lt;=lo) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> j = paratition(items,lo,hi);</span><br><span class="line">sort(items,lo,j);</span><br><span class="line">sort(items,j+<span class="number">1</span>,hi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">paratition</span><span class="params">(Comparable[] items, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//lo mark</span></span><br><span class="line"><span class="keyword">int</span> i = lo;</span><br><span class="line"><span class="comment">//hi mark</span></span><br><span class="line"><span class="keyword">int</span> j = hi + <span class="number">1</span>;</span><br><span class="line">Comparable v = items[lo];</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//find an item bigger than v</span></span><br><span class="line"><span class="keyword">while</span>(less(items[++i],v)) <span class="keyword">if</span>(i==hi) <span class="keyword">break</span>;</span><br><span class="line"><span class="comment">//find an item smaller than v</span></span><br><span class="line"><span class="keyword">while</span>(less(v,items[--j])) <span class="keyword">if</span>(j==lo) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// when lo mark meet hi mark then stop all(sort complate)</span></span><br><span class="line"><span class="keyword">if</span>(i&gt;=j) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//exchange smaller item and bigger item from left to right</span></span><br><span class="line">exchange(items, i, j);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">exchange(items, lo, j);</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://github.com/xooxle/algs4/raw/master/sort/me/huqiao/algs4/sort/pic/quick-sort.gif" alt="Alt Quick sort" title="Quick sort"></p><h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><p>Video record by <a href="http://www.bandicam.com/" target="_blank" rel="noopener">Bandicam</a>. Use <a href="http://www.pcfreetime.com/" target="_blank" rel="noopener">格式工厂</a> to convert MP4 file to GIF picture.</p><p>Code in github:<a href="https://github.com/xooxle/algs4" target="_blank" rel="noopener">algs4</a>.</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017第2周总结</title>
      <link href="/2017/02/20/2017-week-2/"/>
      <url>/2017/02/20/2017-week-2/</url>
      
        <content type="html"><![CDATA[<h1 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h1><p>1.坚持扇贝记单词，从周三开始每天单词量从100提升到了150（包括复习的）。不足是无法看到自己的努力带来的变化，有点儿松懈的感觉。</p><p>2.每天看《算法》第二章《排序》。进度非常缓慢。课后习题#拿不起放不下#的感觉。我觉得序号改变策略了，不能耗在课后习题上了。时间本来有限，所以一定要用在刀刃上。快速了解各种算法的核心，关键是要保证自己能看完这本书。</p><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>时间真的稍纵即逝啊，每天早上早起一个小时到公司，却发现基本做不了什么事情。在公交车上的时间利用效率真的很低。只能背背单词和看看闲书，不适合看《算法》这类型的书。周末的时间也很有限，在家要陪伴家人，几乎无法学习。基本上我没有整块儿（半天以上）的时间可以拿来自己学习。<br>时间如此有限，才更应该把精力集中在很少数的目标上，不能朝三暮四地学习。</p><h1 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h1><p>《癌症.真相》：人体的免疫系统是个好东西，应该多保护好它。癌症的一种疗法就叫免疫疗法，就是利用自身的免疫系统来清理癌细胞。破坏免疫力的行为都是不对的：肥胖、熬夜、精神紧张、焦虑、缺少蔬菜水果。所以最好的抗癌方法其实是乐观平和的心态、合理的饮食。</p><h1 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h1><p>1,情人节给老婆买了三朵玫瑰花，能看出来她很开心。所以以后每逢节日还是应该表示一下的，要不生活为了啥呢？<br>2,这周自己过了三十岁生日了，第一次有人给买蛋糕过的生日竟然是三十岁，感谢老婆！<br>3,岳母这周六（2月25）要回高平了，母亲也不愿意过来帮忙，只能让老婆在家看孩子了。</p><h1 id="改变"><a href="#改变" class="headerlink" title="改变"></a>改变</h1><p>1.公交车上的时间全部留给英语学习。背单词+看《老友记》。<br>2.读《算法》的要求放低一些，关注核心算法实现，课后习题简单看看。（进度大致保证在一天一个算法）</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一则广告算法招聘</title>
      <link href="/2017/02/15/one-ad-alg-res/"/>
      <url>/2017/02/15/one-ad-alg-res/</url>
      
        <content type="html"><![CDATA[<h1 id="收录理由"><a href="#收录理由" class="headerlink" title="收录理由"></a>收录理由</h1><p>多学点儿算法还是有前途的。</p><h1 id="职责："><a href="#职责：" class="headerlink" title="职责："></a>职责：</h1><ol><li>负责广告平台算法策略的建设与不断优化；</li><li>进行先进算法研发，对亿级用户及海量微博信息进行挖掘与分析，用于在线广告精准投放；</li><li>优化在线广告投放效果，满足客户需求和改善用户体验，提高流量变现能力，达到技术和商业的完美结合。</li></ol><h1 id="任职资格："><a href="#任职资格：" class="headerlink" title="任职资格："></a>任职资格：</h1><ol><li>编程基础良好，熟悉常用数据结构及计算机算法；</li><li>具备Linux/Unix环境开发经验，掌握C/C++或Java高级编程语言，会使用至少一种脚本语言；</li><li>突出的分析和解决问题能力，有持续自我学习的意愿，善于沟通和逻辑表达，良好的团队合作意识；</li><li>数学基础良好，符合以下任一条件者优先<br>a) 具有在线广告算法一年以上从业经验者；<br>b) 对数据挖掘、机器学习技术有较深理论功底与实践经验者；<br>c) 对推荐引擎技术有较深理论功底与实践经验者；<br>d) 对信息检索、文本挖掘技术有较深理论功底与实践经验者；<br>e) 对大规模数据并行计算有较多实践经验者；<br>f) 进行过应用数学、统计学、模式识别、人工智能、运筹学等专业学习者；</li></ol>]]></content>
      
      
      <categories>
          
          <category> 计划 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2017第1周总结</title>
      <link href="/2017/02/13/2017-week-1/"/>
      <url>/2017/02/13/2017-week-1/</url>
      
        <content type="html"><![CDATA[<h1 id="肯定"><a href="#肯定" class="headerlink" title="肯定"></a>肯定</h1><p>1.坚持住了每天用扇贝记单词。<br>2.完成《算法第四版》第一章《Fundamentals》的阅读。所提及的算法都尝试写一遍。但课后习题没有完全完成。主要原因是没有参考答案，所以自己在实现时先就没有动力了。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>作息改了一下，每天提前一个小时到公司，自己学习。体验：喜忧参半啊，有更多的时间去学习了当然不错，但休息不好，容易犯困，还容易生气。并且提前的一个小时，不能算作“长块儿的完整时间”，所以利用效率也不是很高。</p><h1 id="读书"><a href="#读书" class="headerlink" title="读书"></a>读书</h1><p>《癌症.真相》：癌细胞的产生是因为基因变异，基因变异发生在细胞分裂的时候，细胞分裂的次数越多，发生基因变异的可能性就越大。如果某个组织部位一直受伤害，那么身体会反复去修复它。修复的过程就会产生更多的细胞分裂，从而使致癌几率上升。</p><h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>设定目标之后一定要专注。不要在三心二意的去看别的东西。我在公交车上记单词的时，有时会走神去看车窗外的风景。我发现 ，这些风景其实就是我的干扰因素。我应该在上车之前就告诫好自己不要一直去看风景。这样我才能在到某个车站之前完成当天的任务。这其实和生活中的大目标也很相似。如果因为发现旁边的某本书也很有意思儿放下手头的这本书，那么你很有可能会因为另外第三本更有意思的书儿放下现在觉得有意思的这一本。如此下去，只会导致你最后什么目标都完成不了。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>提交博客源码到Github中</title>
      <link href="/2017/01/09/submit-blog-source-to-github/"/>
      <url>/2017/01/09/submit-blog-source-to-github/</url>
      
        <content type="html"><![CDATA[<p>成功将博客迁移到Github Pages后，我可以用Github来托管我的学习笔记了。每次用MarkdownPad将笔记整理好，打好标签，写好分类，使用Hexo生产静态页面，然后提交到Github Pages就行了。</p><p>现在要处理的一个问题是，如何将这些Markdown文件也提交到GitHub中。这样，我就可以在任意一台机器上开始开始记笔记了。</p><p>提交源码的时候会遇到的一个问题是，包含.git文件夹的文件夹，最终在github上会显示成灰色的不可用文件夹。我们需要做的就是把想要提交到github中去的文件夹下的.git文件夹删掉。</p><p>物理上删除.git文件夹之后，还需要让Git发现这个文件夹。比如我们将theme/next中的.git文件夹删除之后，需要执行以下命令来更新Git的状态：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git rm --cached themes/next</span><br><span class="line">$ git add themes/.</span><br></pre></td></tr></table></figure><p>其他带有.git文件夹的文件夹类似。</p><hr><p>这样，在另外一台电脑上就可直接检出博客源码了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:&lt;your git userid&gt;@&lt;your git projectid&gt;</span><br></pre></td></tr></table></figure><p>得到类似如下的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-blog-source/</span><br><span class="line">  -.git/</span><br><span class="line">  -package.json</span><br><span class="line">  -scaffolds/</span><br><span class="line">  -<span class="built_in">source</span>/</span><br><span class="line">  -themes/</span><br><span class="line">  -_config.yml</span><br></pre></td></tr></table></figure><p>在blog-source中执行如下代码来初始化Hexo:</p><p>先安装Hexo:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo --save</span><br></pre></td></tr></table></figure></p><blockquote><p>如果hexo-deploy-git没有安装，还需要手动执行npm install hexo-deploy-git –save 来安装。</p></blockquote><p>安装完成之后的目录结构大致如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-blog-source/</span><br><span class="line">  -.git/</span><br><span class="line">  -.npmignore</span><br><span class="line">  -node_modules/</span><br><span class="line">  -package.json</span><br><span class="line">  -scaffolds/</span><br><span class="line">  -<span class="built_in">source</span>/</span><br><span class="line">  -themes/</span><br><span class="line">  -_config.yml</span><br></pre></td></tr></table></figure><p>将source/_posts/、.git、_config.yml、db.json和pachage.json备份到其他文件夹。</p><blockquote><p>hexo init 命令会导致.git文件夹被删除、_config.yml文件被覆盖、srouce/_posts/hello-world.md文件被覆盖。所以需要备份以便还原。</p></blockquote><p>执行hexo的初始化</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>再将上述备份的文件复制回来,最终得到如下文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-blog-source/</span><br><span class="line">  -.git/</span><br><span class="line">  -.npmignore</span><br><span class="line">  -db.json</span><br><span class="line">  -node_modules/</span><br><span class="line">  -package.json</span><br><span class="line">  -public/</span><br><span class="line">  -scaffolds/</span><br><span class="line">  -<span class="built_in">source</span>/</span><br><span class="line">  -themes/</span><br><span class="line">  -_config.yml</span><br></pre></td></tr></table></figure><p>生成并测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>部署:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>大功告成~</p><blockquote><p>更新github代码覆盖到本地:<br>$ git fetch origin<br>$ git reset –hard origin/master</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用crontab为MySQL创建定时备份任务</title>
      <link href="/2017/01/05/MySQL-Backup/"/>
      <url>/2017/01/05/MySQL-Backup/</url>
      
        <content type="html"><![CDATA[<p>选择一个文件夹，创建一个需要定时执行的脚步文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/</span><br><span class="line">mkdir mysql-backup</span><br><span class="line"><span class="built_in">cd</span> mysql-backup/</span><br><span class="line">vi mysqlbackup.sh</span><br></pre></td></tr></table></figure><p>在文件中输入如下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line">filename=$(date +<span class="string">"%y-%m-%d_%H%M%S"</span>)</span><br><span class="line">/usr/<span class="built_in">local</span>/mysql/bin/mysqldump -uroot -p[your password] [your db name] | gzip&gt;/usr/<span class="built_in">local</span>/mysql-backup/backupfiles/[your db name]-<span class="variable">$filename</span>.sql.gz</span><br></pre></td></tr></table></figure><blockquote><p>注意：$(date +”%y-%m-%d_%H%M%S”)中date和后面的+号一定要有空格，然后+号和后面的格式字符串一定不能有空格。也不知道是为什么。</p></blockquote><p>这里其实还是使用了MySQL自带的mysqldump工具来进行的备份，只是多了一步压缩的操作。压缩的文件带上当前的系统时间。</p><p>改变文件属性，使其可以执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">chmod 755 mysqlbackup.sh </span><br><span class="line">ll</span><br><span class="line">total 4</span><br><span class="line">-rwxr-xr-x 1 root root 170 Jan  5 16:03 mysqlbackup.sh</span><br></pre></td></tr></table></figure><p>接下来将这个可执行的文件配置到crontab中定时执行即可,执行crontab -e打开配置文件，输入以下内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 1,12,18 * * * /usr/<span class="built_in">local</span>/mysql-backup/mysqlbackup.sh</span><br></pre></td></tr></table></figure><p>这里配置的是每天凌晨1点，中午12点和晚上6点分别执行一次备份。<br>可以执行service crond reload来重新载入crontab的配置。</p><p>配置项中各项的大概含义是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">*  *  *   *   *    <span class="built_in">command</span></span><br><span class="line">|  |  |   |   |      需要执行的命令（可执行脚本路径）</span><br><span class="line">|  |  |   |   |-----&gt;星期（0-7）</span><br><span class="line">|  |  |   |---------&gt;月份（1-12）</span><br><span class="line">|  |  |-------------&gt;日（1-31）</span><br><span class="line">|  |----------------&gt;小时（0-23）</span><br><span class="line">|-------------------&gt;分钟（0-59）</span><br></pre></td></tr></table></figure></p><p>其中每一个*如果有多项时，可以用逗号分隔。<br>更多详细的crontab配置<a href="http://www.cnblogs.com/peida/archive/2013/01/08/2850483.html" target="_blank" rel="noopener">参考这里</a>。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> corntab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Install MySQL,JDK and Tomcat in Linux</title>
      <link href="/2017/01/04/Install-MySQL-JDK-and-Tomcat-in-Linux/"/>
      <url>/2017/01/04/Install-MySQL-JDK-and-Tomcat-in-Linux/</url>
      
        <content type="html"><![CDATA[<h1 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title="安装MySQL"></a>安装MySQL</h1><p>在官网<a href="http://dev.mysql.com/downloads/mysql#downloads" target="_blank" rel="noopener">http://dev.mysql.com/downloads/mysql#downloads</a>选择合适您操作系统的版本进行下载， 这里以选择Linux Generic为例。</p><blockquote><p>MySQL官网上只能下载到最新的版本，想要下载以前的版本找起来非常费劲。你可以从这里来下载:<br><a href="http://download.softagency.net/MySQL/Downloads/MySQL-5.5/" target="_blank" rel="noopener">http://download.softagency.net/MySQL/Downloads/MySQL-5.5/</a></p></blockquote><p>把下载的文件上传到Linux某个临时文件夹里，然后解压文件，得到一个文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf mysql-5.5.45-linux2.6-x86_64.tar.gz</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x 13 root root      4096 Jan  3 20:09 mysql-5.5.53-linux2.6-x86_64</span><br><span class="line">-rw-r--r--  1 root root 185923648 Jan  3 20:00 mysql-5.5.53-linux2.6-x86_64.tar.gz</span><br></pre></td></tr></table></figure><p>复制解压后的mysql目录到系统的本地软件目录:<br>执行命令：cp mysql-5.5.45-linux2.6-x86_64 /usr/local/mysql -r</p><p>添加mysql用户和mysql用户组:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql mysql</span><br></pre></td></tr></table></figure></p><p>切换到/user/local/mysql目录下，改变mysql目录的用户和组：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql/</span><br><span class="line">chown -R mysql:mysql ./</span><br></pre></td></tr></table></figure><h2 id="安装数据库"><a href="#安装数据库" class="headerlink" title="安装数据库"></a>安装数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./scripts/mysql_install_db  --user=mysql --basedir=/usr/<span class="built_in">local</span>/mysql --datadir=/usr/<span class="built_in">local</span>/mysql/data --pid-file=/usr/<span class="built_in">local</span>/mysql/data/mysql.pid --tmpdir=/tmp</span><br></pre></td></tr></table></figure><blockquote><p>如果报cannot open shared object file错误，可以执行如下命令：<br>apt-get install libaio1 libaio-dev</p></blockquote><p>把mysql文件夹的所属组和所属用户修改为root：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R root:root ./</span><br></pre></td></tr></table></figure></p><p>把data文件夹的所属组合所属用户修改为mysql：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql:mysql data</span><br></pre></td></tr></table></figure></p><p>最终效果如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2zegp7tdd3qrlnkeswi3Z install]<span class="comment"># cd /usr/local/</span></span><br><span class="line">[root@iZ2zegp7tdd3qrlnkeswi3Z <span class="built_in">local</span>]<span class="comment"># ll</span></span><br><span class="line">total 60</span><br><span class="line">drwxr-xr-x   6 root root 4096 Dec 30 17:36 aegis</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Jan  3 20:44 bin</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 etc</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 games</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 include</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 lib</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 lib64</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 libexec</span><br><span class="line">drwxr-xr-x  13 root root 4096 Jan  3 20:11 mysql</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 sbin</span><br><span class="line">drwxr-xr-x.  5 root root 4096 Aug 14  2014 share</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 src</span><br><span class="line">[root@iZ2zegp7tdd3qrlnkeswi3Z <span class="built_in">local</span>]<span class="comment"># cd mysql</span></span><br><span class="line">[root@iZ2zegp7tdd3qrlnkeswi3Z mysql]<span class="comment"># ll</span></span><br><span class="line">total 72</span><br><span class="line">drwxr-xr-x  2 root  root   4096 Jan  3 20:12 bin</span><br><span class="line">-rw-r--r--  1 root  root  17987 Jan  3 20:11 COPYING</span><br><span class="line">drwxr-xr-x  6 mysql mysql  4096 Jan  4 13:56 data</span><br><span class="line">drwxr-xr-x  2 root  root   4096 Jan  3 20:11 docs</span><br><span class="line">drwxr-xr-x  3 root  root   4096 Jan  3 20:11 include</span><br><span class="line">-rw-r--r--  1 root  root    301 Jan  3 20:11 INSTALL-BINARY</span><br><span class="line">drwxr-xr-x  3 root  root   4096 Jan  3 20:11 lib</span><br><span class="line">drwxr-xr-x  4 root  root   4096 Jan  3 20:11 man</span><br><span class="line">drwxr-xr-x 10 root  root   4096 Jan  3 20:11 mysql-test</span><br><span class="line">-rw-r--r--  1 root  root   2496 Jan  3 20:11 README</span><br><span class="line">drwxr-xr-x  2 root  root   4096 Jan  3 20:11 scripts</span><br><span class="line">drwxr-xr-x 27 root  root   4096 Jan  3 20:11 share</span><br><span class="line">drwxr-xr-x  4 root  root   4096 Jan  3 20:11 sql-bench</span><br><span class="line">drwxr-xr-x  2 root  root   4096 Jan  3 20:11 support-files</span><br></pre></td></tr></table></figure><h2 id="添加开机启动"><a href="#添加开机启动" class="headerlink" title="添加开机启动"></a>添加开机启动</h2><p>执行命令把启动脚本放到开机初始化目录：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp support-files/mysql.server /etc/init.d/mysql</span><br></pre></td></tr></table></figure></p><p>启动之前，需要修改mysql的编码为utf8：<br>1.找到mysql的配置文件，拷贝到etc目录下，把/usr/local/mysql/support-files/my-medium.cnf 复制到 /etc/my.cnf。即用命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp /usr/<span class="built_in">local</span>/mysql/support-files/my-medium.cnf  /etc/my.cnf</span><br></pre></td></tr></table></figure></p><p>2.打开my.cnf修改编码<br>在[mysqld]下增加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">character-set-server=utf8</span><br></pre></td></tr></table></figure><p>启动mysql服务：执行命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysql start</span><br></pre></td></tr></table></figure></p><p>修改MySQL的root用户密码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./bin/mysqladmin -u root password <span class="string">'passw0rd'</span></span><br></pre></td></tr></table></figure></p><p>把mysql客户端放到默认路径：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/mysql/bin/mysql /usr/<span class="built_in">local</span>/bin/mysql</span><br></pre></td></tr></table></figure></p><p>然后测试是否能顺利登录MySQL：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p[your password]</span><br></pre></td></tr></table></figure></p><p>记得给MySQL添加开机启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/init.d/</span><br><span class="line">chkconfig --add mysql</span><br></pre></td></tr></table></figure><h2 id="设置MySQL不区分大小写"><a href="#设置MySQL不区分大小写" class="headerlink" title="设置MySQL不区分大小写"></a>设置MySQL不区分大小写</h2><p>修改MySQL的配置文件my.cnf，在[mysqld]部分添加如下配置选项：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lower_case_table_names = 1</span><br></pre></td></tr></table></figure></p><p>这是没有办法的办法，最好的办法还是应该严格按照规范执行。目前觉得最佳实践是SQL语句中的库名、表名、字段名等都用小写就没这些问题了。</p><h2 id="定时备份任务"><a href="#定时备份任务" class="headerlink" title="定时备份任务"></a>定时备份任务</h2><p><a href="http://blog.huqiao.me/2017/01/05/MySQL-Backup/">参考这里</a>。</p><h1 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h1><p>到官网下载合适的安装包，下载地址：<a href="http://www.oracle.com/technetwork/cn/java/javase/downloads/jdk7-downloads-1880260.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/cn/java/javase/downloads/jdk7-downloads-1880260.html</a>.</p><blockquote><p>和MySQL一样，因为JDK也是Oracle公司的，在官网也只提供最新版本的下载。我这里备份了一个：<a href="http://pan.baidu.com/s/1qYextPq" target="_blank" rel="noopener">http://pan.baidu.com/s/1qYextPq</a>。</p></blockquote><p>JDK的安装很简单，只需要将文件解压到/usr/local/中即可：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2zegp7tdd3qrlnkeswi3Z <span class="built_in">local</span>]<span class="comment"># ll</span></span><br><span class="line">total 60</span><br><span class="line">drwxr-xr-x   6 root root 4096 Dec 30 17:36 aegis</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Jan  3 20:44 bin</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 etc</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 games</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 include</span><br><span class="line">drwxr-xr-x   8 root root 4096 Jan  4 11:56 jdk1.7.0_79</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 lib</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 lib64</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 libexec</span><br><span class="line">drwxr-xr-x  13 root root 4096 Jan  3 20:11 mysql</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 sbin</span><br><span class="line">drwxr-xr-x.  5 root root 4096 Aug 14  2014 share</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 src</span><br></pre></td></tr></table></figure><p>最要的是设置环境变量。<br>本编辑器gedit（如果没安装可以用vi）打开/etc/profile，在文件最后添加<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.7.0_79</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">export</span> CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar</span><br></pre></td></tr></table></figure></p><p>保存后重新编译/etc/profile文件，测试Java是否可用:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2zegp7tdd3qrlnkeswi3Z <span class="built_in">local</span>]<span class="comment"># java -version</span></span><br><span class="line">java version <span class="string">"1.7.0_79"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build 1.7.0_79-b15)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 24.79-b02, mixed mode)</span><br></pre></td></tr></table></figure><h1 id="安装Tomcat"><a href="#安装Tomcat" class="headerlink" title="安装Tomcat"></a>安装Tomcat</h1><p>Tomcat的下载就不用多说了，可以在<a href="http://tomcat.apache.org/" target="_blank" rel="noopener">官网</a>找到下载链接。也可以使用这个镜像地址：<a href="http://archive.apache.org/dist/tomcat/" target="_blank" rel="noopener">http://archive.apache.org/dist/tomcat/</a>。</p><p>也和MySQL、JDK一样，解压到local目录中即可：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">drwxr-xr-x   6 root root 4096 Dec 30 17:36 aegis</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Jan  3 20:44 bin</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 etc</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 games</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 include</span><br><span class="line">drwxr-xr-x   8 root root 4096 Jan  4 11:56 jdk1.7.0_79</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 lib</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 lib64</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 libexec</span><br><span class="line">drwxr-xr-x  13 root root 4096 Jan  3 20:11 mysql</span><br><span class="line">drwxr-xr-x  10 root root 4096 Jan  4 16:43 NitsmUpload</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 sbin</span><br><span class="line">drwxr-xr-x.  5 root root 4096 Aug 14  2014 share</span><br><span class="line">drwxr-xr-x.  2 root root 4096 Sep 23  2011 src</span><br><span class="line">drwxr-xr-x  10 root root 4096 Jan  4 13:50 tomcat-8.0.36</span><br></pre></td></tr></table></figure></p><h2 id="为Tomcat添加开机启动项"><a href="#为Tomcat添加开机启动项" class="headerlink" title="为Tomcat添加开机启动项"></a>为Tomcat添加开机启动项</h2><p>进入tomcat-8.0.36/bin目录中；<br>修改catalina.sh文件，在export处增加如下内容：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CATALINA_HOME=/usr/<span class="built_in">local</span>/tomcat-8.0.36</span><br><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.7.0_79</span><br></pre></td></tr></table></figure></p><p>创建catalina.sh链接到/etc/init.d中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/<span class="built_in">local</span>/apache-tomcat-7.0.63/bin/catalina.sh  /etc/init.d/tomcat</span><br></pre></td></tr></table></figure></p><p>添加到自动服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update-rc.d  –f  tomcat  defaults（删除 defaults 换成remove）</span><br></pre></td></tr></table></figure></p><h2 id="使用chkconfig添加开机启动"><a href="#使用chkconfig添加开机启动" class="headerlink" title="使用chkconfig添加开机启动"></a>使用chkconfig添加开机启动</h2><p>在/etc/init.d/下创建tomcat文件，内容为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># description: Tomcat Start Stop Restart  </span></span><br><span class="line"><span class="comment"># processname: tomcat  </span></span><br><span class="line"><span class="comment"># chkconfig: 234 20 80  </span></span><br><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/java/jdk1.7.0_79  </span><br><span class="line"><span class="built_in">export</span> JAVA_HOME  </span><br><span class="line">PATH=<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$PATH</span>  </span><br><span class="line"><span class="built_in">export</span> PATH  </span><br><span class="line">CATALINA_HOME=/usr/apache-tomcat-8.0.36  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span>  </span><br><span class="line">start)  </span><br><span class="line">sh <span class="variable">$CATALINA_HOME</span>/bin/startup.sh  </span><br><span class="line">;;   </span><br><span class="line">stop)     </span><br><span class="line">sh <span class="variable">$CATALINA_HOME</span>/bin/shutdown.sh  </span><br><span class="line">;;   </span><br><span class="line">restart)  </span><br><span class="line">sh <span class="variable">$CATALINA_HOME</span>/bin/shutdown.sh  </span><br><span class="line">sh <span class="variable">$CATALINA_HOME</span>/bin/startup.sh  </span><br><span class="line">;;   </span><br><span class="line"><span class="keyword">esac</span>      </span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure></p><p>执行如下命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chkconfig –add tomcat</span><br><span class="line">chkconfig –level 2345 tomcat on</span><br></pre></td></tr></table></figure></p><h2 id="修改Tomcat默认编码为UTF8"><a href="#修改Tomcat默认编码为UTF8" class="headerlink" title="修改Tomcat默认编码为UTF8"></a>修改Tomcat默认编码为UTF8</h2><p>修改/usr/local/apache-tomcat-8.0.36/conf/server.xml文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"80"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span> <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="设置内存"><a href="#设置内存" class="headerlink" title="设置内存"></a>设置内存</h2><p>要添加在tomcat 的bin 下catalina.sh 里，位置cygwin=false前 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=<span class="string">"-Xms256m -Xmx512m -Xss1024K -XX:PermSize=128m -XX:MaxPermSize=256m"</span> </span><br><span class="line">cygwin=<span class="literal">false</span></span><br></pre></td></tr></table></figure><blockquote><p>Tomcat8容易遇到启动缓慢的问题，参考<a href="http://nobodyiam.com/2016/06/07/tomcat-startup-slow/" target="_blank" rel="noopener">Tomcat启动缓慢问题解决</a>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Linux </tag>
            
            <tag> MySQL </tag>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的自执行方法和模块模式</title>
      <link href="/2016/12/22/test/"/>
      <url>/2016/12/22/test/</url>
      
        <content type="html"><![CDATA[<p>首先，每个方法定义的局部变量，在外部是无法访问的，比如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里的name变量对外界没有任何的污染，不会影响到其他地方的代码。如果每个模块的代码都这样写，那么就都不会打架了。</p><p>利用的函数的这一特性来实现隔离非常有效。通常情况下，我们只需要一个匿名的自执行函数就可以了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> name = <span class="string">'Tom'</span>;</span><br><span class="line">   <span class="keyword">return</span> name;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>如果仅仅是return一个name那大可没必要这么干，我们需要返回一个具有类似JavaBean读写功能的对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> name = <span class="string">'Tom'</span>;</span><br><span class="line">   <span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">        name :name,<span class="attr">age</span>:age</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>这里返回了一个JSON对象，既然是对象，那么完全可以是有方法的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> name = <span class="string">'Tom'</span>;</span><br><span class="line">   <span class="keyword">var</span> age = <span class="number">10</span>;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">        name:name,<span class="attr">age</span>:age,</span><br><span class="line">        setName(n)&#123;</span><br><span class="line">            name = n;</span><br><span class="line">        &#125;,</span><br><span class="line">        setAge(a)&#123;</span><br><span class="line">            age = a;</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p><p>是的，不光可以有方法，方法中竟然还能访问早已经执行完毕了的那个自执行方法的变量。真的很神奇。</p><p>神奇的背后其实是闭包在起作用。自执行方法虽然早在setName和setAge方法之前就已经执行完毕了，但因为后两个方法的定义中引用到了自执行方法中的变量。那么JavaScript引擎在为后两个函数创建闭包的时候会将自执行方法的变量“保留”。</p><p>这样就实现了代码的隔离（避免带来污染）还能合理访问的目的。</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《自品牌》</title>
      <link href="/2016/12/06/%E8%AF%BB%E3%80%8A%E8%87%AA%E5%93%81%E7%89%8C%E3%80%8B/"/>
      <url>/2016/12/06/%E8%AF%BB%E3%80%8A%E8%87%AA%E5%93%81%E7%89%8C%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>时刻关注行业动态，因为你的技术随时有可能过期。</p><p>达尔文在一百年前就说过，现在剩下的物种，不一定是最强大的也不一定是最有智慧的，只是他们懂得根据环境的要求改变自己。</p><p>所以，我们应该随时调整自己，不仅是技术、还有对事物的观念，只有这样才能应对变化的环境。</p><p>技术这东西，已经不能以“用到了再学”的方法来处理了。新技术层出不穷，层层堆叠，如果你慢了，到时候就很难看清本质了。可以不用都精通，想都精通也肯定做不到，但绝对不是不闻不问。</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>资源搜集</title>
      <link href="/2016/12/06/resource/"/>
      <url>/2016/12/06/resource/</url>
      
        <content type="html"><![CDATA[<p></p><h3>个人博客</h3><p></p><ul><br>    <li><a href="http://litaotao.github.io/" target="_blank" rel="noopener noreferrer">李涛涛</a></li><br>    <li><a href="http://daichuanqing.com/" target="_blank" rel="noopener noreferrer">晓生（交互设计）</a></li><br>    <li><a href="http://www.ruanyifeng.com/blog/" target="_blank" rel="noopener noreferrer">阮一峰博客</a></li><br>    <li><a href="http://evanyou.me" target="_blank" rel="noopener noreferrer">尤雨溪(Vue.js作者)</a></li><br></ul><br><h3>优质社区</h3><br><ul><br>    <li><a href="https://gold.xitu.io" target="_blank" rel="noopener noreferrer">掘金</a></li><br></ul><br><h3>工具</h3><br><ul><br>    <li><a href="https://docs.google.com" target="_blank" rel="noopener noreferrer">谷歌文档</a></li><br>    <li><a href="https://coggle.it/" target="_blank" rel="noopener noreferrer">思维导图</a></li><br>    <li><a href="https://www.iconfinder.com" target="_blank" rel="noopener noreferrer">图标搜索</a></li><br></ul>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Java正则表达式案例</title>
      <link href="/2016/12/02/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A1%88%E4%BE%8B/"/>
      <url>/2016/12/02/Java%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A1%88%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="反向引用"><a href="#反向引用" class="headerlink" title="反向引用"></a>反向引用</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String content = <span class="string">"[RECORDID=2012233234525.2586]"</span>;</span><br><span class="line">String replaceBy = <span class="string">"&lt;a href=\"../detail.do?recordId=$1\"  title=\"查看详情\"&gt;$1&lt;/a&gt;"</span>;</span><br><span class="line"></span><br><span class="line">content = content.replaceAll(<span class="string">"\\[RECORDID=(\\d&#123;1,&#125;(.)?\\d&#123;1,&#125;)\\]"</span>, replaceBy);</span><br><span class="line"></span><br><span class="line"><span class="comment">//&lt;a href="../detail.do?recordId=2012233234525.2586"  title="查看详情"&gt;2012233234525.2586&lt;/a&gt;</span></span><br><span class="line">System.out.println(content);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成功移居GitHub Pages</title>
      <link href="/2016/12/01/hello-world/"/>
      <url>/2016/12/01/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="GitHub-Hexo-Next"><a href="#GitHub-Hexo-Next" class="headerlink" title="GitHub+Hexo+Next"></a>GitHub+Hexo+Next</h1><p>借助于这边文章：<a href="http://www.jianshu.com/p/61987cec0fad" target="_blank" rel="noopener">《GitHub+Hexo+Next搭建免费独立个人博客》</a>，终于在GitHub Pages中创建了自己的博客系统。生命在于折腾真的太对了。通过在这次折腾，发现了很多好玩的东西：<br>Vue.js、Markdown、Hexo、Nodejs、sublime text、React。感觉自己对于整个前端技术已经落后了好大一截啊，各种技术的堆砌，几乎已经看不到底层的脉络了。</p><p>用Git写博客的方式也是从没有想过的，线下使用MarkdownPad桌面编辑器来写博客，随时可以用git提交到GitHub中。这样的静态博客真的很方便。</p><p>其实平时的一些学习代码都可以整理成代码保存在GitHub中。接下来要好好研究研究Markdown了。</p><p>这个博客的主题<a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next</a>强调的是“精于心，简于形”，博客不应该有太多让人分心的地方，更多的是起到一个思考、记录和分享交流的目的。与其说坚持把这个博客写好，不如说应该让自己的生活应该多一些沉淀少一些浮躁。有了这个原则，写博客也就不用刻意地去坚持了。</p><h1 id="二级域名配置"><a href="#二级域名配置" class="headerlink" title="二级域名配置"></a>二级域名配置</h1><h2 id="CNAME内容"><a href="#CNAME内容" class="headerlink" title="CNAME内容"></a>CNAME内容</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blog.huqiao.me</span><br></pre></td></tr></table></figure><h2 id="阿里云域名配置"><a href="#阿里云域名配置" class="headerlink" title="阿里云域名配置"></a>阿里云域名配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">记录类型 主机记录 解析线路 记录值</span><br><span class="line">CNAME　　blog　　默认　　xooxle.github.io.</span><br></pre></td></tr></table></figure><h2 id="dig记录"><a href="#dig记录" class="headerlink" title="dig记录"></a>dig记录</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32&gt;dig blog.huqiao.me +nostats +nocomments +nocmd</span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.10.1 &lt;&lt;&gt;&gt; blog.huqiao.me +nostats +nocomments +nocmd</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;blog.huqiao.me.                        IN      A</span><br><span class="line">blog.huqiao.me.         589     IN      CNAME   xooxle.github.io.</span><br><span class="line">xooxle.github.io.       21844   IN      CNAME   github.map.fastly.net.</span><br><span class="line">github.map.fastly.net.  10      IN      A       151.101.100.133</span><br></pre></td></tr></table></figure><h1 id="待解决问题"><a href="#待解决问题" class="headerlink" title="待解决问题"></a>待解决问题</h1><ul><li>发布时间总是跟着最近一次提交时间变动</li><li>文章阅读次数</li><li>社交账号：微博、微信 </li></ul>]]></content>
      
      
      <categories>
          
          <category> 折腾 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人营销计划</title>
      <link href="/2016/11/29/%E4%B8%AA%E4%BA%BA%E8%90%A5%E9%94%80%E8%AE%A1%E5%88%92/"/>
      <url>/2016/11/29/%E4%B8%AA%E4%BA%BA%E8%90%A5%E9%94%80%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>《软实力》看完这么久了，再不行动行动，恐怕这书又白读了。</p><p>总的来说，我要想的是如何作为个人对外提供优质的服务。</p><p>确定研究方向；<br>推广渠道-SNS工具、广告、免费资源吸引等；<br>开发博客系统；<br>拥有服务器和域名；<br>形成完善的知识学习架构体系：规划-学习-实践-分享；</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>梦想：财务自由</title>
      <link href="/2016/11/21/%E8%B4%A2%E5%8A%A1%E8%87%AA%E7%94%B1/"/>
      <url>/2016/11/21/%E8%B4%A2%E5%8A%A1%E8%87%AA%E7%94%B1/</url>
      
        <content type="html"><![CDATA[<p>读《富爸爸穷爸爸》时令人激动不已的道理，仅仅依靠工资是无法获得财务自由的。我需要用自己的收入来培育自己的“资产大树”，但资产大树为我产生的“被动收入”足以支付我的日常开销，我就实现了财务自由。</p><p>财务自由以后：不是不工作了，那会无聊死的。工作，但不是为了钱而工作，而是为了兴趣工作，做自己喜欢做的事情。真正“赎回”自己的生活。两个字：自由！</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读《软技能-代码之外的生存指南 》</title>
      <link href="/2016/11/18/%E8%AF%BB%E3%80%8A%E8%BD%AF%E6%8A%80%E8%83%BD-%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%96%E7%9A%84%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97%E3%80%8B/"/>
      <url>/2016/11/18/%E8%AF%BB%E3%80%8A%E8%BD%AF%E6%8A%80%E8%83%BD-%E4%BB%A3%E7%A0%81%E4%B9%8B%E5%A4%96%E7%9A%84%E7%94%9F%E5%AD%98%E6%8C%87%E5%8D%97%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="尽快上手"><a href="#尽快上手" class="headerlink" title="尽快上手"></a>尽快上手</h1><p>学习技术的过程应该是：学习-&gt;实践-&gt;传授。以最快的速度开始动手操作，然后再为实践过程中遇到的问题寻找答案。而不是拿到一本书从头到尾一点儿一点儿的读。很早的时候就有这种感觉，学习一门技术最好的办法就是参与一个使用了改技术的项目。原因就是，一旦你参与了这样的一个项目，马上形成了两种条件：</p><p>你没有太多的时间去从头到尾把所有的细枝末节都掌握，因为你需要马上做出东西来。<br>你必须要把遇到的问题解决掉，这要是放在平时，你可能直接将这个问题无限期搁置。<br>所以，在学习一门新技术的时候，最好的方式就是在具备以下几个条件之后，马上动手实践：</p><p>你知道你的目标是什么；<br>你知道技术大概的脉络；<br>你知道从什么地方着手；</p><h1 id="努力帮助别人"><a href="#努力帮助别人" class="headerlink" title="努力帮助别人"></a>努力帮助别人</h1><p>很多时候，我觉得我在公司为老板做的软件分文不值。每当我看到老板对自己的产品像乔布斯一样仔细端详调整时，我觉得他做的好多东西都是没意义的。我已经思考过很多遍了，我应该做点儿什么，才能结束这种为别人打工的日子。我要自主地走上市场，为社会提供一些服务。但环顾周围和互联网，只要是能挣钱的地方都已经扎堆了成千上万的人，他们都在那儿抓破脑门儿地想如何争先、如何更进一步。我还有机会吗？</p><p>一个不记录一下就会遗忘的道理：不是说我的技术有多牛逼我就有价值，我的技术那只是我自己的，如果我不用这个技术来服务他人，也不把我的技术分享出来帮助他人提高，那我对于别人来说一点儿价值都没有。</p><p>这个社会最本质的生存之道是，我能帮助别人，我就有价值，能帮助的人越多，我就越有价值！</p><p>但是，就目前为止，我看不到自己的任何价值，我能帮到的人之后我的老板。并且我的可替代性非常大。这说起来让人很有危机感。也正是这种危机感让我觉得我跟老板的这种雇佣关系特别明显。一天的工作日结束后，如果我没有帮助到我的老板挣到应有的价值，我会觉得很惭愧。</p><p>我觉得我剩下的任务只有一个：我怎样能帮助更多的人，除了我的老板！</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>阿里云RDS接口开发笔记</title>
      <link href="/2016/07/18/aliyun-rds-develop-note/"/>
      <url>/2016/07/18/aliyun-rds-develop-note/</url>
      
        <content type="html"><![CDATA[<p>这里是RDS的接口文档:阿里云开发者社区，但文档里说的那些什么签名啊什么的其实是有误导的，咱不需要关心。感觉RDS的接口最开始就是这种HTTP的，我在看这个文档的时候就很奇怪，为什么没有封装成SDK。看签名部分的时候真的很蛋疼。</p><p>其实是有SDK的，并且在文档中有引用到：aliyun-openapi-java-sdk。阿里云几乎所有的api都可以在这里找到，当然包括了RDS。</p><p>但就单个模块而言，在github中的SDK没有比较好的javadoc说明，每个接口应该传什么样的参数还得参考前面的API文档。</p><p>下面是我根据SDK写的工具类，时间仓促，仅仅实现了数据库的添加和删除操作，其他功能可以调API来具体实现。仅供参考。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aliyuncs.rds;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.DefaultAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.IAcsClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ClientException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.exceptions.ServerException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.DefaultProfile;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.profile.IClientProfile;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.rds.exception.RequestTimeoutException;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.rds.model.v20140815.CreateDatabaseRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.rds.model.v20140815.DeleteDatabaseRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.rds.model.v20140815.DescribeDatabasesRequest;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.rds.model.v20140815.DescribeDatabasesResponse;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.rds.model.v20140815.DescribeDatabasesResponse.Database;</span><br><span class="line"><span class="keyword">import</span> com.aliyuncs.rds.model.v20140815.GrantAccountPrivilegeRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RDSUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_STATUS_CREATING = <span class="string">"Creating"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_STATUS_RUNNING = <span class="string">"Running"</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DB_STATUS_DELETING = <span class="string">"Deleting"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String regionId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="keyword">private</span> String dbInstanceId;</span><br><span class="line">    <span class="keyword">private</span> IAcsClient client;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RDSUtil</span><span class="params">(String regionId, String accessKeyId, String accessKeySecret,String dbInstanceId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.regionId = regionId;</span><br><span class="line">        <span class="keyword">this</span>.accessKeyId = accessKeyId;</span><br><span class="line">        <span class="keyword">this</span>.accessKeySecret = accessKeySecret;</span><br><span class="line">        <span class="keyword">this</span>.dbInstanceId = dbInstanceId;</span><br><span class="line"></span><br><span class="line">        IClientProfile profile = DefaultProfile.getProfile(<span class="keyword">this</span>.regionId, <span class="keyword">this</span>.accessKeyId,<span class="keyword">this</span>.accessKeySecret);</span><br><span class="line">        client = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建数据库</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createDatabase</span><span class="params">(String dbName,<span class="keyword">long</span> timeout)</span><span class="keyword">throws</span> RequestTimeoutException, ServerException, ClientException</span>&#123;</span><br><span class="line"></span><br><span class="line">        CreateDatabaseRequest request = <span class="keyword">new</span> CreateDatabaseRequest();</span><br><span class="line">        request.setDBInstanceId(dbInstanceId);</span><br><span class="line">        request.setDBName(dbName);</span><br><span class="line">        request.setCharacterSetName(<span class="string">"utf8"</span>);</span><br><span class="line"></span><br><span class="line">        client.getAcsResponse(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> created = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!created)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                time++;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            List&lt;Database&gt; list = findDatabaseByName(dbName,<span class="string">"Running"</span>);</span><br><span class="line">            created = list.size()&gt;<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(created)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(time&gt;timeout)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RequestTimeoutException(<span class="string">"no database named '"</span> + dbName + <span class="string">"' found after create database request has bean send "</span> + timeout +<span class="string">" seconds ago."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 授权</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">grantPrivilege</span><span class="params">(String dbName,String accountName)</span> <span class="keyword">throws</span> ServerException, ClientException</span>&#123;</span><br><span class="line"></span><br><span class="line">        GrantAccountPrivilegeRequest grantRequest = <span class="keyword">new</span> GrantAccountPrivilegeRequest();</span><br><span class="line">        grantRequest.setDBInstanceId(dbInstanceId);</span><br><span class="line">        grantRequest.setDBName(dbName);</span><br><span class="line">        grantRequest.setAccountPrivilege(<span class="string">"ReadWrite"</span>);</span><br><span class="line">        grantRequest.setAccountName(accountName);</span><br><span class="line"></span><br><span class="line">        client.getAcsResponse(grantRequest);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除数据库</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> RequestTimeoutException </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dropDatabase</span><span class="params">(String dbName,<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> ServerException, ClientException, RequestTimeoutException</span>&#123;</span><br><span class="line">        DeleteDatabaseRequest delDbRequest = <span class="keyword">new</span> DeleteDatabaseRequest();</span><br><span class="line">        delDbRequest.setDBInstanceId(dbInstanceId);</span><br><span class="line">        delDbRequest.setDBName(dbName);</span><br><span class="line"></span><br><span class="line">        client.getAcsResponse(delDbRequest);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//等待数据库的运行中状态消失</span></span><br><span class="line">        timeout -= waitUntil(dbName,DB_STATUS_RUNNING,<span class="keyword">false</span>,timeout);</span><br><span class="line">        <span class="comment">//等待数据库的删除中状态消失</span></span><br><span class="line">        waitUntil(dbName,DB_STATUS_DELETING,<span class="keyword">false</span>,timeout);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 安装数据库名称和状态查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Database&gt; <span class="title">findDatabaseByName</span><span class="params">(String dbName,String status)</span> <span class="keyword">throws</span> ServerException, ClientException</span>&#123;</span><br><span class="line">        DescribeDatabasesRequest describeDbRequest = <span class="keyword">new</span> DescribeDatabasesRequest();</span><br><span class="line">        describeDbRequest.setDBInstanceId(dbInstanceId);</span><br><span class="line">        describeDbRequest.setDBName(dbName);</span><br><span class="line">        describeDbRequest.setDBStatus(status);</span><br><span class="line">        DescribeDatabasesResponse descDBResponse = client.getAcsResponse(describeDbRequest);</span><br><span class="line">        List&lt;Database&gt; list = descDBResponse.getDatabases();</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待数据库到（不到）指定的状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">waitUntil</span><span class="params">(String dbName,String status,<span class="keyword">boolean</span> existsed,<span class="keyword">long</span> timeout)</span> <span class="keyword">throws</span> ServerException, ClientException, RequestTimeoutException</span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Database&gt; list = findDatabaseByName(dbName,status);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> time = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((existsed &amp;&amp; list.size()==<span class="number">0</span>) || (!existsed &amp;&amp; list.size()&gt;<span class="number">0</span>) )&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            list = findDatabaseByName(dbName,status);</span><br><span class="line">            time++;</span><br><span class="line">            <span class="keyword">if</span>(time&gt;timeout)&#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RequestTimeoutException(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> time;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RDS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Hibernate实现多租户（Multi-Tendency）功能</title>
      <link href="/2016/06/21/hibernate-multitendency/"/>
      <url>/2016/06/21/hibernate-multitendency/</url>
      
        <content type="html"><![CDATA[<p>这几天的研究，四处搜寻资料，基本理清实现多租户的一个思路。至于多租户是什么可参考《<a href="http://www.ibm.com/developerworks/cn/java/j-lo-mutiltenancy/index.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">浅析多租户在 Java 平台和某些 PaaS 上的实现</a>》。里面提到了很多激动人心的是JavaEE8会加入对多租户的支持。但是这个真的不知道要等到什么时候了。</p><hr><p>我所维护的一个系统是基于Hibernate的，现在准备修改架构，希望能够提供Saas服务。这样一个升级，首先想到的是，数据库的数据会急剧增加，面对大数据的时候，首先的选择估计会扔掉Hibernate，使用纯的JDBC或者用MyBatis。</p><p>如果使用JDBC那就完全自由了，但自由确实自由了，现有的整个系统是以Hibernate为基础的，扔掉Hibernate的前提是你要自己来实现至少用起来还算凑合的一个DAO。我没有找到市面上有这么一种JDBC框架，方便使用者进行分表、分库等操作。</p><p>另外我还看到EclipseLink也可以实现多租户功能，但据说他的社区比Hibernate差多了，也只能作罢。</p><hr><p>所以，还是回到了这篇文章上来了：《<a href="http://www.ibm.com/developerworks/cn/java/j-lo-dataMultitenant/index.html" target="_blank" rel="noopener">数据层的多租户浅谈</a>》（看完了记得回来，我这里有补充）。</p><p>这里讲到了Hibernate在4.0的时候就已经支持多租户了，实现起来分几种方式<br>1.一个租户一个单独数据库（DATABASE）-<strong>注意，是物理意义上的独立，可以理解为不同的数据源</strong>；<br>2.多个租户公用一个数据源，但每个租户有不同的数据库（SCHEMA）；<br>3.多个租户都在一个数据库里，数据也完全在一起，通过一个字段（列）来区分（DISCRIMINATOR）；</p><p>我在看上面那篇引文的时候对这三种的描述上是有<strong>误解</strong>的，我以为：<br>DATABASE：不同数据库，也许是同一个数据源上的<br>SCHEMA：对多个租户进行分表（但从头到尾，没有看到任何地方用分表的方式实现过多租户）</p><p>说说我对这三种情况如何选择的想法。<br>首先如果你的数据量不大那你完全可以使用DISCRIMINATOR方式，也就是把所有数据都放到一个表里面。这样做的前提是，你是在从无到有新建一个项目。否则，将不支持多租户的系统改造成多租户时不建议这么做。因为这有可能会影响到你程序的方方面面，你要改的代码也许不计其数。<br>第二种，分数据库（SCHEMA）。反正我是选择的这种方式，因为多租户首先考虑的是有可能数据量会很大，相对于DISCRIMINATOR方式而言，这种分数据库其实就是分表了。另外，对于数据的备份、迁移都是非常方便的。<br>最后一种，分数据源（DATABASE）。我觉得这完全可以和SCHEMA方式配合起来用，作为它的一种补充，什么时候需要补充？当一个数据源上的数据库多到严重影响性能的时候，就可以考虑分多个数据源了。</p><hr><p>好了说了这么多，直接上代码吧，首先，Hibernate给了我们一个确定tendantId的接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import org.hibernate.context.spi.CurrentTenantIdentifierResolver;</span><br><span class="line"></span><br><span class="line">import com.xyz.util.threadlocal.ThreadLocalUtil;</span><br><span class="line"></span><br><span class="line">public class TenantIdResolver implements CurrentTenantIdentifierResolver &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public String resolveCurrentTenantIdentifier() &#123;</span><br><span class="line">String tendantId = ThreadLocalUtil.tendantId.get();</span><br><span class="line">tendantId  = &quot;dataSource1:db1&quot;;//TODO 删除TEST</span><br><span class="line">return tendantId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean validateExistingCurrentSessions() &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里也前面引文里提到的不太一样的是，我把tendantId的信息量加大了，不光能表示使用哪个数据库，还能同时表示使用哪个数据源。（前面提到的，实现SCHEMA时还实现DATABASE）<br>这里使用了一个ThreadLocal来存储tendantId，具体的设置点在哪儿，你可以根据你的应用场景来考虑。我现在还没考虑到这里，等考虑好了再来补充。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.SQLException;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.Map;</span><br><span class="line"></span><br><span class="line">import org.hibernate.HibernateException;</span><br><span class="line">import org.hibernate.service.jdbc.connections.internal.C3P0ConnectionProvider;</span><br><span class="line">import org.hibernate.service.jdbc.connections.spi.MultiTenantConnectionProvider;</span><br><span class="line">import org.hibernate.service.spi.Configurable;</span><br><span class="line">import org.hibernate.service.spi.ServiceRegistryAwareService;</span><br><span class="line">import org.hibernate.service.spi.ServiceRegistryImplementor;</span><br><span class="line">import org.hibernate.service.spi.Stoppable;</span><br><span class="line"></span><br><span class="line">import com.xyz.util.threadlocal.ThreadLocalUtil;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 分数据库多租户</span><br><span class="line"> * @author huqiao(412853638@qq.com)</span><br><span class="line"> */</span><br><span class="line">public class SchemaBasedMultiTenantConnectionProvider implements MultiTenantConnectionProvider, Stoppable,</span><br><span class="line">Configurable, ServiceRegistryAwareService   &#123;</span><br><span class="line"></span><br><span class="line">private static final long serialVersionUID = 1L;</span><br><span class="line">private final C3P0ConnectionProvider connectionProvider = new C3P0ConnectionProvider();</span><br><span class="line">private final C3P0ConnectionProvider connectionProvider2 = new C3P0ConnectionProvider();</span><br><span class="line"></span><br><span class="line">private final Map&lt;String,C3P0ConnectionProvider&gt; tenantIdConnMap = new HashMap&lt;String,C3P0ConnectionProvider&gt;();</span><br><span class="line"></span><br><span class="line">private C3P0ConnectionProvider getProvider()&#123;</span><br><span class="line">String tenantIdentifier = ThreadLocalUtil.tendantId.get();</span><br><span class="line">tenantIdentifier = tenantIdentifier.split(&quot;:&quot;)[0];</span><br><span class="line">return tenantIdConnMap.get(tenantIdentifier);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Connection getAnyConnection() throws SQLException &#123;</span><br><span class="line">return getProvider().getConnection();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void releaseAnyConnection(Connection connection) throws SQLException &#123;</span><br><span class="line">getProvider().closeConnection(connection);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Connection getConnection(String tenantIdentifier) throws SQLException &#123;</span><br><span class="line">//ThreadLocalUtil.tendantId.set(tenantIdentifier);</span><br><span class="line">tenantIdentifier = tenantIdentifier.split(&quot;:&quot;)[1];</span><br><span class="line">final Connection connection = getAnyConnection();</span><br><span class="line">try &#123;</span><br><span class="line">connection.createStatement().execute(&quot;USE &quot; + tenantIdentifier);</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">throw new HibernateException(&quot;Could not alter JDBC connection to specified schema [&quot; + tenantIdentifier</span><br><span class="line">+ &quot;]&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line">return connection;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void releaseConnection(String tenantIdentifier, Connection connection) throws SQLException &#123;</span><br><span class="line">try &#123;</span><br><span class="line">connection.createStatement().execute(&quot;USE test&quot;);</span><br><span class="line">&#125; catch (SQLException e) &#123;</span><br><span class="line">throw new HibernateException(&quot;Could not alter JDBC connection to specified schema [&quot; + tenantIdentifier</span><br><span class="line">+ &quot;]&quot;, e);</span><br><span class="line">&#125;</span><br><span class="line">getProvider().closeConnection(connection);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean isUnwrappableAs(Class unwrapType) &#123;</span><br><span class="line">return this.getProvider().isUnwrappableAs(unwrapType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public &lt;T&gt; T unwrap(Class&lt;T&gt; unwrapType) &#123;</span><br><span class="line">return this.getProvider().unwrap(unwrapType);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void stop() &#123;</span><br><span class="line">this.getProvider().stop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean supportsAggressiveRelease() &#123;</span><br><span class="line">return this.getProvider().supportsAggressiveRelease();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(&#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span><br><span class="line">@Override</span><br><span class="line">public void configure(Map configurationValues) &#123;</span><br><span class="line"></span><br><span class="line">//connectorProvider初始化</span><br><span class="line">this.connectionProvider.configure(configurationValues);</span><br><span class="line"></span><br><span class="line">configurationValues.put(&quot;hibernate.connection.url&quot;, &quot;jdbc:mysql://&#123;db-server-url&#125;:3306/dbname?useUnicode=true&amp;amp;characterEncoding=utf8&quot;);</span><br><span class="line">configurationValues.put(&quot;hibernate.connection.password&quot;, &quot;password&quot;);</span><br><span class="line">this.connectionProvider2.configure(configurationValues);</span><br><span class="line"></span><br><span class="line">//connectorProvider与tenantId的关系映射</span><br><span class="line">tenantIdConnMap.put(&quot;dataSource1&quot;, connectionProvider);</span><br><span class="line">tenantIdConnMap.put(&quot;dataSource2&quot;, connectionProvider2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void injectServices(ServiceRegistryImplementor serviceRegistry) &#123;</span><br><span class="line">connectionProvider.injectServices(serviceRegistry);</span><br><span class="line">connectionProvider2.injectServices(serviceRegistry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>和引文不同的是，这里直接使用的是C3P0ConnectionProvider,而不是DriverManagerConnectionProviderImpl，DriverManagerConnectionProviderImpl自己实现了一个连接池，但我觉得使用C3P0应该才是正道。</p><p>引文中只创建了一个connectionProvider，我在这里创建了两个，其实可以是N个。然后再在getProvider()方法中来确定使用哪个connectionProvider。OK这其实就是多个数据源的实现。</p><p>多个数据库的实现在方法getConnection()里，可以看到，在切换数据库的时候就是简单地使用了一个USE而已。</p><p>这个代码现在存在的问题在configure(）方法里。我现在还没考虑好如何根据业务需求来创建N个connectionProvier并且做好映射，这里仅仅是为了试验，仓促地构建了另外一个connectionProvider，它和配置的connectionProvider的区别仅仅是url和password不一样。</p><p>最后，injectServices方法里，一定要为每一个connectionProvider都injectServices一下。</p><p>接下来看看Hibernate配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=&quot;sessionFactory&quot;</span><br><span class="line">class=&quot;org.springframework.orm.hibernate4.LocalSessionFactoryBean&quot;&gt;</span><br><span class="line">&lt;!-- </span><br><span class="line">&lt;property name=&quot;dataSource&quot; ref=&quot;dataSource&quot;/&gt;</span><br><span class="line">--&gt;</span><br><span class="line">&lt;property name=&quot;hibernateProperties&quot;&gt;</span><br><span class="line">&lt;props&gt;</span><br><span class="line">&lt;!-- C3P0的配置 --&gt;</span><br><span class="line">&lt;prop key=&quot;c3p0.jdbcUrl&quot; &gt;$&#123;jdbc.url&#125;&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;c3p0.user&quot; &gt;$&#123;jdbc.username&#125;&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;c3p0.password&quot;  &gt;$&#123;jdbc.password&#125;&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;c3p0.preferredTestQuery&quot; &gt;$&#123;preferredTestQuery&#125;&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;c3p0.idleConnectionTestPeriod&quot; &gt;$&#123;idleConnectionTestPeriod&#125;&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;c3p0.testConnectionOnCheckout&quot; &gt;$&#123;testConnectionOnCheckout&#125;&lt;/prop&gt;</span><br><span class="line">&lt;!-- 数据源配置 --&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.connection.url&quot;&gt;jdbc:mysql://localhost:3306/dbname?useUnicode=true&amp;amp;characterEncoding=utf8&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.connection.username&quot;&gt;root&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.connection.password&quot;&gt;root&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.connection.driver_class&quot;&gt;com.mysql.jdbc.Driver&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.connection.autocommit&quot;&gt;false&lt;/prop&gt;</span><br><span class="line">&lt;!-- Hibernate配置 --&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.dialect&quot;&gt;$&#123;hibernate.dialect&#125;&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.hbm2ddl.auto&quot;&gt;$&#123;hibernate.hbm2ddl.auto&#125;&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.max_fetch_depth&quot;&gt;$&#123;hibernate.maxFetchDepth&#125;&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.show_sql&quot;&gt;$&#123;hibernate.show_sql&#125;&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.format_sql&quot;&gt;$&#123;hibernate.format_sql&#125;&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.jdbc.batch_size&quot;&gt;$&#123;hibernate.jdbc.batch_size&#125;&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.cache.use_query_cache&quot;&gt;$&#123;cache.use_query_cache&#125;&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.cache.use_second_level_cache&quot;&gt;$&#123;cache.use_second_level_cache&#125;&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.cache.region.factory_class&quot;&gt;$&#123;hibernate.cache.region.factory_class&#125;&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.temp.use_jdbc_metadata_defaults&quot;&gt;$&#123;hibernate.temp.use_jdbc_metadata_defaults&#125;&lt;/prop&gt;</span><br><span class="line">&lt;!-- 多租户配置 --&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.multiTenancy&quot;&gt;SCHEMA&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.tenant_identifier_resolver&quot;&gt;com.xyz.TenantIdResolver&lt;/prop&gt;</span><br><span class="line">&lt;prop key=&quot;hibernate.multi_tenant_connection_provider&quot;&gt;com.xyz.SchemaBasedMultiTenantConnectionProvider&lt;/prop&gt;</span><br><span class="line">&lt;/props&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property name=&quot;packagesToScan&quot; value=&quot;com.xyz.*.entity&quot;/&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>因为使用了C3P0，这里增加了相应的配置。另外注意一下，我这里原先配置的dataSource被废掉了，应为是我们自己创建C3P0的ConnectionProvider。如果看过引文了，那么下面的多租户配置就不多说了吧。</p><p><strong><em>后话</em></strong><br>其中还有很多不够完善的地方，等想好了再修改补充吧。<br>接下来应该考虑如何按照业务需要来初始化不同的ConnectionProvider了。如果这一切都做好了，还应该考虑考虑多租户环境下，如何实现用户的登录逻辑。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
            <tag> SAAS </tag>
            
            <tag> 多租户 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL创建外键时报Can&#39;t create table errno 150 错误解决办法</title>
      <link href="/2016/05/17/mysql-can-not-create-table-error-150/"/>
      <url>/2016/05/17/mysql-can-not-create-table-error-150/</url>
      
        <content type="html"><![CDATA[<p>总的来说，这个问题的原因就是创建的外键和关联的表的主键类型不匹配。下面用个简单的例子来说明。<br>两张很简单的表，学生表和教师表：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_teacher`</span> (  </span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,  </span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,  </span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)  </span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`t_student`</span> (  </span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">varchar</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">''</span>,  </span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,  </span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)  </span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></p><p>现在需要给学生表创建一个外键来关联教师表：<br>第一种情况，很简单，就是列的类型不匹配，比如用int类型的列去关联varchar的列：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`t_student`</span>  </span><br><span class="line"><span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="string">`teacher_id`</span>  <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">AFTER</span> <span class="string">`name`</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="string">`t_student`</span> <span class="keyword">ADD</span> <span class="keyword">CONSTRAINT</span> <span class="string">`teacher_id_fk`</span> <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (<span class="string">`teacher_id`</span>) <span class="keyword">REFERENCES</span> <span class="string">`t_teacher`</span> (<span class="string">`id`</span>) <span class="keyword">ON</span> <span class="keyword">DELETE</span> RESTRICT <span class="keyword">ON</span> <span class="keyword">UPDATE</span> RESTRICT;</span><br></pre></td></tr></table></figure></p><p>另外一种情况，虽然数据类型一致了，但是字符编码不一致，例如：</p><p>最后一种情况则是，找不到外键引用的列。列在增加外键的时候，可能已经存在数据了（历史数据，或者更新数据库表时设置的默认值），但这些数据并不一定能在外键关联表中找到对应的行记录。这种情况也会导致外键创建失败。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>进步了的时间才算时间</title>
      <link href="/2015/04/27/%E8%BF%9B%E6%AD%A5%E4%BA%86%E7%9A%84%E6%97%B6%E9%97%B4%E6%89%8D%E7%AE%97%E6%97%B6%E9%97%B4/"/>
      <url>/2015/04/27/%E8%BF%9B%E6%AD%A5%E4%BA%86%E7%9A%84%E6%97%B6%E9%97%B4%E6%89%8D%E7%AE%97%E6%97%B6%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<p>今天看到一个观点，觉得挺有道理的。“做技术的应该找大一点儿的公司和平台，为以后铺路”。确实啊，如果一直在小公司呆着，你永远都只能是小打小闹，不会有什么突破。等你稍微老一点儿，一大堆勤奋而且工资要求又低的新人涌入这个行业的时候，你就会被拍死在沙滩上！</p><p>去大公司的道理看似废话，大公司和大平台谁都想去啊，但不是每个人都能去的。我认为这不是重点，重点是，在你工作了一段时间之后，你还有没有想去大公司的欲望。</p><p>回顾自己四五年编码工作，期间当然也有过精彩时刻，但总的来说，还是有很多不足。有些时候不忙，有些时候即使忙也是瞎忙。算是有些蹉跎、有些碌碌无为了吧。到现在，我还需要费点儿劲儿才能想起，一个人越追求稳定，他的生活将变得越来越不稳定。你不但不应该去追求稳定，还应该时刻将自己推到风口浪尖，去承担更大的责任，迎接更多变数的挑战。只有这样才能成长。</p><p>去大公司的好处，不光只是简单的镀金。这里的大公司不单指公司人数多、办公楼高。像干IT的应该是IT技术比较雄厚。我一直以来的一个观点是，干什么工作都应该让自己的经验有所积累，否则除了钱就什么都没有了。咱不应该只为钱工作，那是老人的想法。然后，无论干哪一行，首先要入门，这个可能很简单，但很多人入门之后就开始得意忘形了，以为成功了，然后妄自称大，停止不前了（都说活到老学到老，说来容易，做起来不容易啊）。入门之后该做什么？应该入流。什么意思，你的工作在整个行业里来说应该是入流的，就是说大家都在玩的东西你也应该会玩，否则你就out了。别人的工具集都已经到工业时代了，你还在钻木取火，你累不累？ 你要是在入门之后就到井底去凉快去了，要是那天别人把井盖盖上的了，你会被冻死的。这也是为什么要去大公司的原因，很多大公司引领者技术潮流，只有在这样的环境中，你才不会被边缘化。</p><p>生病一般都是因为生活中的一些不良习惯，比如你长期吸烟，你有可能会患上肺癌。这个道理很浅显，但有些可能就不那么容易理解了，比如我在炒菜的时候，总是会想起中学班主任告诉我的，味精经过高温加热之后会致癌。我不知道这条经验是否经过了科学验证，但我也会小心地少放或者不放味精。我想说的是，生活中有太多的陷阱，你必须得时刻保持警惕和小心。工作和生活是一个道理，你应该时刻保持活力，别老想着积攒一些草给自己筑个巢让自己舒服的住里面。也别像没睡醒似的耷拉着脑袋，前面绿灯亮了，后面的车等着你走路呢！</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 职场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate中的left outer join</title>
      <link href="/2014/12/17/Hibernate%E4%B8%AD%E7%9A%84left-outer-join/"/>
      <url>/2014/12/17/Hibernate%E4%B8%AD%E7%9A%84left-outer-join/</url>
      
        <content type="html"><![CDATA[<p>首先，最简单的是一对多的连接，比如：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student <span class="keyword">from</span> Teacher t <span class="keyword">join</span> t.students student <span class="keyword">where</span> student....</span><br></pre></td></tr></table></figure></p><p>如果是多对一呢？这里有隐式和显示的区别（上面的一对多的情况属于隐式连接）。可以像下面这样<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student <span class="keyword">from</span> Student student </span><br><span class="line"><span class="keyword">where</span> student.teacher.age&gt;<span class="number">30</span></span><br></pre></td></tr></table></figure></p><p>这属于隐式的，Hibernate会自动连接Teacher表。也可以像下面这样显示的连接：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student <span class="keyword">from</span> Student student</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span> student.teacher t </span><br><span class="line"><span class="keyword">where</span> t.age&gt;<span class="number">30</span></span><br></pre></td></tr></table></figure></p><p>这里明确的说明了连接Teacher表的时候要使用左外连接。这里容易忽略outer，如果写成下面的样子：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> student <span class="keyword">from</span> Student student</span><br><span class="line"><span class="keyword">left</span> <span class="keyword">join</span> student.teacher t </span><br><span class="line"><span class="keyword">where</span> t.age&gt;<span class="number">30</span></span><br></pre></td></tr></table></figure></p><p>这是错误的写法，Hibernate将不认识t.age的条件。</p>]]></content>
      
      
      <categories>
          
          <category> Hibernate </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>从MyEclipse插件安装中想到的</title>
      <link href="/2014/12/02/%E4%BB%8EMyEclipse%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%AD%E6%83%B3%E5%88%B0%E7%9A%84/"/>
      <url>/2014/12/02/%E4%BB%8EMyEclipse%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%AD%E6%83%B3%E5%88%B0%E7%9A%84/</url>
      
        <content type="html"><![CDATA[<p>title: 从MyEclipse插件安装中想到的 date: 2014-12-02 23:03 categories:<br>tags:<br>网上一搜“Eclipse插件安装”一大堆文章，之前也懒得记。刚才又安装了以下SVN插件，伤心啊。<br>我已经将SVN插件压缩文件下载到了本地，然后使用help-&gt;Install from site的安装方式来安装，结果先滚出一堆什么乱七八糟的东西来，好像是在检查网络上的一个路径，TM，我不都已经下载下来了吗？你检查什么呢？！<br>好不容易经过了这一步，然后我选择了我下载的压缩文件，然后就开始等待了。。。<br><img src="http://img.blog.csdn.net/20141202222714375?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt></p><p>一直停在这个画面，并且每有打算收场的意思，网上一搜，又是因为天朝的威望导致的，无语。<br>没辙了，换成dropin方式安装吧，刚开始我的安装文件解压后在了这个地方：<br><img src="http://img.blog.csdn.net/20141202223040219?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt></p><p>然后，dropin文件夹下如网上所述创建了link文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path=D:\\tool\\MyEclipse2014\\add\\Subversive-2.0.0.I20140609-1700</span><br></pre></td></tr></table></figure></p><p>重启之后，发现MyEclipse没有任何变化，忽然想起之前好像说过解压的安装文件要放在eclipse文件夹下，于是调整如下：<br><img src="http://img.blog.csdn.net/20141202223423861?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt></p><p>重启MyEclipse，果然见证了奇迹。开心啊，终于如愿了一把，准备记录一下心得，以后一定要记得这个。还没完呢，接下来要安装SVN connector吧，有了之前的经验，我和安装SVN一样把svn connector的安装文件解压到了eclipse文件夹下，然后下了一个link文件指向eclipse文件夹所在文件夹：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path=D:\\tool\\MyEclipse2014\\add\\eclipse\\Subversive-connectors</span><br></pre></td></tr></table></figure></p><p>满心自行重启MyEclipse，结果啥都没安装上，哎，思前想后，实在没辙，算了把eclipse文件夹去掉吧：<br><img src="http://img.blog.csdn.net/20141202223959153?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt></p><p>同理修改link文件内容，重启MyEclipse，安装成功！心里啊，悲喜交加！</p><p>想起之前老婆问的一个问题，为啥从网页上复制的东西粘贴到Excel文件里会带有链接？还有为啥粘贴的数字编号会自动使用了科学计数方式显示。我说你不想这样，就右击，然后选择粘贴位普通字符啊，不行就先将单元格格式设置位文本，她说这样多麻烦啊。我说，问题产生的原理就在这里，明白原理了，就不要遇到问题了一直堵在这里往前撞，应该绕开它。我们总是在写程序的时候，为某些理所当然应该没问题但却又产生了问题的情况气愤不已，结果到头来不是发现自己犯了低级错误就是孤陋寡闻，或者是别人的一个错误，让你在那儿头疼了半天。实在不值。</p><p>最近CSDN的博客系统老是响应缓慢，我想是不是被那个闲的蛋疼的大侠给黑了？</p><p>让人头痛的IE，每次想起就想骂骂微软，你不会写浏览器就别在那儿瞎整！你拉完屎了，大家跟着你臭！</p><p>Chrome最近升级的debug模式下的页面测量功能，有的时候本来想把界面拉大，结果反而变小了。有点儿像Dreamware，就是不知道怎么把界面拉大，偶然在尝试把界面拉小的时候结果界面却变大了，彻底顿悟啊！终于知道Chrome背后的呵呵呵了：你猜猜看，到底怎样才能将界面拉大？</p><p>每当遇到这种情况，就觉得这软件不咋地。写程序多了，就会对软件的bug越敏感（即使自己写的软件也bug百出），遇到网络上有用户登录或这次页面连验证码都不带的，就想黑他一把：这东西也敢放在这里？经常因为这样的一些软件而感到有些气愤，干嘛做得这么差劲？</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>排序算法之快速排序</title>
      <link href="/2014/11/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>/2014/11/22/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>快速排序可能是应用最广泛的排序算法了。流行的原因是因为它实现简单、适用于各种不同的输入数据且在一般的应用中比其他算法都要快得多。快速排序属于原地排序，不需要额外的空间（相对于归并排序）。快速排序算法的时间复杂度为NlogN。<br>快速排序和归并排序类似，也是分治思想是应用。归并排序每次将数组一分为二，将两边都排序之后再合并。快速排序算法是每次将数组进行切分，保证切分点在相对于两边的子数组是有序的。左边的子数组都不大于切分点，右边的字数组都不小于切分点。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickSort</span> <span class="keyword">extends</span> <span class="title">AbstractSort</span> <span class="keyword">implements</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line"> sort(a,<span class="number">0</span>,a.length - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a,<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(hi&lt;=lo) <span class="keyword">return</span>;<span class="comment">//递归结束条件</span></span><br><span class="line"><span class="keyword">int</span> j = partition(a,lo,hi);</span><br><span class="line"><span class="comment">//递归对子数组进行排序</span></span><br><span class="line">sort(a,lo,j-<span class="number">1</span>);</span><br><span class="line">sort(a,j+<span class="number">1</span>,hi);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 切分</span></span><br><span class="line"><span class="comment"> * 使a[lo]左边元素不大于本身，右边元素不小于本身</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Comparable[] a, <span class="keyword">int</span> lo, <span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = lo,j = hi + <span class="number">1</span>;</span><br><span class="line">Comparable v = a[lo];</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">while</span>(less(a[++i],v))&#123;<span class="comment">//从左往右直到遇到一个比v大的元素</span></span><br><span class="line"><span class="keyword">if</span>(i==hi) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(less(v,a[--j]))&#123;<span class="comment">//从右往左直到遇到一个比v小的元素</span></span><br><span class="line"><span class="keyword">if</span>(j==lo) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i&gt;=j)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">exch(a, i, j);</span><br><span class="line">&#125;</span><br><span class="line">exch(a, lo, j);</span><br><span class="line"><span class="keyword">return</span> j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">QuickSort sort = <span class="keyword">new</span> QuickSort();</span><br><span class="line">Integer[] data = RandomFactory.randomInt(<span class="number">3000000</span>, <span class="number">40000</span>);</span><br><span class="line"><span class="comment">//sort.show(data);</span></span><br><span class="line"><span class="keyword">long</span> t = System.currentTimeMillis();</span><br><span class="line">sort.sort(data);</span><br><span class="line">t = System.currentTimeMillis() - t;</span><br><span class="line"><span class="comment">//sort.show(data);</span></span><br><span class="line">System.out.println(<span class="string">"quick sort"</span>);</span><br><span class="line">System.out.println(<span class="string">"is sorted:"</span>+sort.isSorted(data));</span><br><span class="line">System.out.println(<span class="string">"time consumed:"</span> + t);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果比归并算法还稍快一点：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">quick sort</span><br><span class="line">is sorted:<span class="literal">true</span></span><br><span class="line">time consumed:1373</span><br></pre></td></tr></table></figure></p><p>从排序算法代码中可以看出，算法中的切分操作发生在下一层递归之前。而归并算法的合并操作是在下一层递归之后进行的。这一点上看，快速排序有一点自上而下的味道，归并算法更类似于撒网搜网的感觉。 </p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式在Java中的使用</title>
      <link href="/2014/11/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9C%A8Java%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2014/11/16/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%9C%A8Java%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>这里不打算说明正则表达式的具体细节，只讲Java中使用正则表达式的一些基础知识。<br>一个简单的例子，使用正则表达式来匹配电话号码，电话号码包括了三到四位的区号；可有可无的连接符；6位到八位的电话号码。正则表达式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\d&#123;3,4&#125;-?\d&#123;6,9&#125;</span><br></pre></td></tr></table></figure></p><p>这里仅仅是举个例子，实际使用中，考虑到电话号码的合法性，区号还需要改进。简单而言，像下面这样就能使用这个正则表达式对字符串进行验证了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> match = Pattern.matches(<span class="string">"\\d&#123;3,4&#125;-?\\d&#123;6,9&#125;"</span>, <span class="string">"010-23232222"</span>);</span><br></pre></td></tr></table></figure></p><p>match就是我们需要的验证结果。<br>也可以转换成Matcher对象再调用Matcher的matches方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Pattern pattern = Pattern.compile(<span class="string">"\\d&#123;3,4&#125;-?\\d&#123;6,9&#125;"</span>);</span><br><span class="line"><span class="comment">//boolean match = Pattern.matches("\\d&#123;3,4&#125;-?\\d&#123;6,9&#125;", "010-23232222");</span></span><br><span class="line">Matcher matcher = pattern.matcher(<span class="string">"010-23232222"</span>);</span><br><span class="line">System.out.println(matcher.matches());</span><br></pre></td></tr></table></figure></p><p>这里，仅仅是验证一个字符串是否符合正则表达式，这是最简单的应用。如果想要在在一个字符串中进行匹配查找，就需要使用到Matcher对象了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Pattern pattern = Pattern.compile(<span class="string">"\\d&#123;3,4&#125;-?\\d&#123;6,9&#125;"</span>);</span><br><span class="line">Matcher matcher = pattern.matcher(<span class="string">"联系电话：010-23232222，地址：北京市朝阳区..."</span>);</span><br><span class="line"><span class="keyword">while</span>(matcher.find())&#123;</span><br><span class="line">System.out.println(matcher.group());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样，就能从字符串中摘取出符合正则表达式的内容了。</p><h1 id="匹配模式"><a href="#匹配模式" class="headerlink" title="匹配模式"></a>匹配模式</h1><p>有的时候，需要进行忽略大小写的匹配：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String moneyRegex = <span class="string">"[+-]?(\\d)+(.(\\d)*)?(\\s)*[CF]"</span>;</span><br><span class="line">String input = <span class="string">"-3.33c"</span>;</span><br><span class="line"><span class="keyword">boolean</span> match = Pattern.compile(moneyRegex,Pattern.CASE_INSENSITIVE).matcher(input).matches();</span><br></pre></td></tr></table></figure></p><p>该例子实现匹配摄氏温度和华氏温度，对于以C、c、F和f结尾的温度值都能匹配。<br>这是依赖于API来忽略大小写，正则表达式内部也支持忽略大小写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String moneyRegex = <span class="string">"[+-]?(\\d)+(.(\\d)*)?(\\s)*(?i)[CF]"</span>;</span><br><span class="line">String input = <span class="string">"-3.33f"</span>;</span><br><span class="line"><span class="keyword">boolean</span> match = Pattern.compile(moneyRegex).matcher(input).matches();</span><br></pre></td></tr></table></figure></p><p>Java还提供了很多类似于CASE_INSENSITIVE的模式标记，多个模式标记可以使用“|”符号连接。</p><h1 id="Pattern-CANON-EQ"><a href="#Pattern-CANON-EQ" class="headerlink" title="Pattern.CANON_EQ"></a>Pattern.CANON_EQ</h1><p>启用正则等价。</p><h1 id="Pattern-COMMENTS"><a href="#Pattern-COMMENTS" class="headerlink" title="Pattern.COMMENTS"></a>Pattern.COMMENTS</h1><p>启用注释，开启之后，正则表达式中的空格以及#号行将被忽略：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String comments = <span class="string">"    (\\d)+#this is comments."</span>;</span><br><span class="line">String input = <span class="string">"1234"</span>;</span><br><span class="line"><span class="keyword">boolean</span> match = Pattern.compile(comments,Pattern.COMMENTS).matcher(input).matches();<span class="comment">//true</span></span><br><span class="line"><span class="keyword">boolean</span> match2 = Pattern.compile(comments).matcher(input).matches();<span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p>可以看到，#号到行尾的注释部分和前面的空白字符都被忽略了。正则表达式内置的启用注释为（?x）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String comments = <span class="string">"(?x)    (\\d)+#this is comments."</span>;</span><br><span class="line">String input = <span class="string">"1234"</span>;</span><br><span class="line"><span class="keyword">boolean</span> match = Pattern.compile(comments,Pattern.COMMENTS).matcher(input).matches();<span class="comment">//true</span></span><br><span class="line"><span class="keyword">boolean</span> match2 = Pattern.compile(comments).matcher(input).matches();<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h1 id="Pattern-DOTALL"><a href="#Pattern-DOTALL" class="headerlink" title="Pattern.DOTALL"></a>Pattern.DOTALL</h1><p>启用dotall模式，一般情况下，点号（.）匹配任意字符，但不匹配换行符，启用这个模式之后，点号还能匹配换行符：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String dotall = <span class="string">"&lt;xml&gt;(.)*&lt;/xml&gt;"</span>;</span><br><span class="line">String dotallInput = <span class="string">"&lt;xml&gt;\r\n&lt;/xml&gt;"</span>;</span><br><span class="line"><span class="keyword">boolean</span> match = Pattern.compile(dotall,Pattern.DOTALL).matcher(dotallInput).matches();<span class="comment">//true</span></span><br><span class="line"><span class="keyword">boolean</span> match2 = Pattern.compile(dotall).matcher(dotallInput).matches();<span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p>使用内置方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String dotall = <span class="string">"(?s)&lt;xml&gt;(.)*&lt;/xml&gt;"</span>;</span><br><span class="line">String dotallInput = <span class="string">"&lt;xml&gt;\r\n&lt;/xml&gt;"</span>;</span><br><span class="line"><span class="keyword">boolean</span> match = Pattern.compile(dotall,Pattern.DOTALL).matcher(dotallInput).matches();<span class="comment">//true</span></span><br><span class="line"><span class="keyword">boolean</span> match2 = Pattern.compile(dotall).matcher(dotallInput).matches();<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h1 id="Pattern-LITERAL"><a href="#Pattern-LITERAL" class="headerlink" title="Pattern.LITERAL"></a>Pattern.LITERAL</h1><p>平白字符模式，启用这个模式之后，所有元字符、转义字符都被看成普通的字符，不再具有其他意义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(Pattern.compile(<span class="string">"\\d"</span>,Pattern.LITERAL).matcher(<span class="string">"\\d"</span>).matches());<span class="comment">//true</span></span><br><span class="line">System.out.println(Pattern.compile(<span class="string">"\\d"</span>,Pattern.LITERAL).matcher(<span class="string">"2"</span>).matches());<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">System.out.println(Pattern.compile(<span class="string">"(\\d)+"</span>,Pattern.LITERAL).matcher(<span class="string">"1234"</span>).matches());<span class="comment">//false</span></span><br><span class="line">System.out.println(Pattern.compile(<span class="string">"(\\d)+"</span>).matcher(<span class="string">"1234"</span>).matches());<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">System.out.println(Pattern.compile(<span class="string">"(\\d)&#123;2,3&#125;"</span>,Pattern.LITERAL).matcher(<span class="string">"(\\d)&#123;2,3&#125;"</span>).matches());<span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><h1 id="Pattern-MULTILINE"><a href="#Pattern-MULTILINE" class="headerlink" title="Pattern.MULTILINE"></a>Pattern.MULTILINE</h1><p>多行模式：默认情况下，输入的字符串被看作是一行，即便是这一行中包好了换行符也被看作一行。当匹配“^”到“$”之间的内容的时候，整个输入被看成一个一行。启用多行模式之后，包含换行符的输入将被自动转换成多行，然后进行匹配：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String multiline = <span class="string">"^(\\d)+$"</span>;</span><br><span class="line">String multilineInput = <span class="string">"1234\r99\rabc\r128"</span>;</span><br><span class="line"></span><br><span class="line">Pattern p = Pattern.compile(multiline, Pattern.MULTILINE);</span><br><span class="line">Matcher m = p.matcher(multilineInput);</span><br><span class="line"><span class="keyword">while</span>(m.find())&#123;</span><br><span class="line">System.out.println(m.group());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>例子中，将字符串中的数字摘取出来，如果不启用多行模式，将什么也匹配不到。可以用(?m)在正则表达式内部启用多行模式。</p><h1 id="Pattern-UNIX-LINE"><a href="#Pattern-UNIX-LINE" class="headerlink" title="Pattern.UNIX_LINE"></a>Pattern.UNIX_LINE</h1><p>unix行模式，大多多数系统的行都是以“\n”结尾的，但是少数系统，比如Windows，却是以“\r\n”组合来结尾的，启用这个模式之后，将会只以“\n”作为行结束符，这会影响到^、$和点号(点号匹配换行符)。<br>Pattern方法<br>split方法<br>Pattern提供了一个split方法，可以按照给定的正则表达式将字符串进行分割：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String splitRegex = <span class="string">"\\([A-D]\\)"</span>;</span><br><span class="line">String splitInput = <span class="string">"(A)非常满意  (B)满意   (C)一般  (D)不满意"</span>;</span><br><span class="line">Pattern splitPattern  = Pattern.compile(splitRegex);</span><br><span class="line"><span class="keyword">for</span>(String str : splitPattern.split(splitInput))&#123;</span><br><span class="line">System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">非常满意  </span><br><span class="line">满意   </span><br><span class="line">一般  </span><br><span class="line">不满意</span><br></pre></td></tr></table></figure></p><h1 id="quote方法"><a href="#quote方法" class="headerlink" title="quote方法"></a>quote方法</h1><p>有点儿类似于Pattern.LITERAL的功能，方法可以为给定的字符串创建LITERAL模式的正则表达式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String quote = Pattern.quote(<span class="string">"\\d"</span>);</span><br><span class="line">System.out.println(Pattern.matches(quote, <span class="string">"\\d"</span>));<span class="comment">//true</span></span><br><span class="line">System.out.println(Pattern.matches(<span class="string">"\\d"</span>, <span class="string">"\\d"</span>));<span class="comment">//false</span></span><br></pre></td></tr></table></figure></p><p>String类也提供了一些支持正则表达式的方法：</p><h1 id="matches方法："><a href="#matches方法：" class="headerlink" title="matches方法："></a>matches方法：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">"1234"</span>;</span><br><span class="line">System.out.println(str.matches(<span class="string">"(\\d)+"</span>));<span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>字符串的split方法和replace方法也支持正则表达式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">String str2 = <span class="string">"a.1分       b.2分      c.3分       d.4分"</span>;</span><br><span class="line"><span class="keyword">for</span>(String score : str2.split(<span class="string">"[a-d]+\\."</span>))&#123;</span><br><span class="line">System.out.println(score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">String str2 = <span class="string">"a.1分       b.2分      c.3分       d.4分"</span>;</span><br><span class="line">str2 = str2.replaceAll(<span class="string">"([a-d])+\\."</span>, <span class="string">"[$1]"</span>);</span><br><span class="line">System.out.println(str2);</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[a]1分       [b]2分      [c]3分       [d]4分</span><br></pre></td></tr></table></figure></p><p>这里用到了 反向引用，$1表示的就是匹配出来的[a-d]。 </p><h1 id="Matcher方法："><a href="#Matcher方法：" class="headerlink" title="Matcher方法："></a>Matcher方法：</h1><h2 id="lookingAt方法："><a href="#lookingAt方法：" class="headerlink" title="lookingAt方法："></a>lookingAt方法：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str3 = <span class="string">"foooooooooooo"</span>;</span><br><span class="line">Matcher matcher3 = Pattern.compile(<span class="string">"foo"</span>).matcher(str3);</span><br><span class="line">System.out.println(matcher3.lookingAt());<span class="comment">//true</span></span><br><span class="line">System.out.println(matcher3.matches());<span class="comment">//false</span></span><br></pre></td></tr></table></figure><p>字符串是否包含所指定的正则表达式，不用通过find方法挨个找，lookingAt可以一次性实现这个功能。</p><h2 id="字符串替换："><a href="#字符串替换：" class="headerlink" title="字符串替换："></a>字符串替换：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">double</span> d = <span class="number">1.0</span> / <span class="number">3</span>;</span><br><span class="line">String numberRegex = <span class="string">"(\\d+\\.\\d&#123;2,3&#125;)\\d*"</span>;</span><br><span class="line">Matcher matcher4 = Pattern.compile(numberRegex).matcher(<span class="string">"one divide by three eq : "</span> + d +<span class="string">""</span>);</span><br><span class="line">String result = matcher4.replaceFirst(<span class="string">"$1"</span>);</span><br><span class="line">System.out.println(result);<span class="comment">// OUPUT: one divide by three eq : 0.333</span></span><br></pre></td></tr></table></figure><p>以上代码实现讲字符串保留小数的功能（只有两位小数位则不动）。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则表达式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法之归并排序</title>
      <link href="/2014/11/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2014/11/15/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>归并排序是分治思想的一个很好的例子。它比希尔排序在时间复杂度上更优，为NlogN，并且属于稳定排序方法（稳定性：假定在待排序的记录序列中，存在多个具有相同的关键字的记录，若经过排序，这些记录的相对次序保持不变，即在原序列中，ri=rj，且ri在rj之前，而在排序后的序列中，ri仍在rj之前，则称这种排序算法是稳定的；否则称为不稳定的）。<br>自上而下的归并排序思想是，依赖于递归，逐级将待排序对象分割为较小的集合，直到这个集合只剩下一个元素，最后再归并每两个集合，排序的动作就发生在这个归并（merge）的时候。一分一合之间，集合就被排序了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MergeSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Comparable[] aux;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span></span>&#123;</span><br><span class="line">aux = <span class="keyword">new</span> Comparable[a.length];</span><br><span class="line">sort(a,<span class="number">0</span>,a.length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a,<span class="keyword">int</span> lo,<span class="keyword">int</span> hi)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(hi&lt;=lo) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid = lo + (hi - lo)/<span class="number">2</span>;<span class="comment">//将数组一分为二</span></span><br><span class="line">sort(a,lo,mid);<span class="comment">//分别对这两个子数组进行排序</span></span><br><span class="line">sort(a,mid + <span class="number">1</span>,hi);</span><br><span class="line">merge(a,lo,mid,hi);<span class="comment">//合并两个已经排序的数组</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">merge</span><span class="params">(Comparable[] a,<span class="keyword">int</span> lo,<span class="keyword">int</span> mid,<span class="keyword">int</span> hi)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = lo;</span><br><span class="line"><span class="keyword">int</span> j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = lo;k&lt;=hi;k++)&#123;<span class="comment">//将待排序数组全部复制到临时数组中</span></span><br><span class="line">aux[k] = a[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = lo;k&lt;=hi;k++)&#123;<span class="comment">//从临时数组中拿回到排序数组中</span></span><br><span class="line"><span class="keyword">if</span>(i&gt;mid) a[k] = aux[j++];<span class="comment">//左边数组已经没有元素可拿了，拿右边数组元素</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(j&gt;hi) a[k] = aux[i++];<span class="comment">//右边数组已经没有元素可拿了，拿左边边数组元素</span></span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(less(aux[i],aux[j])) a[k] = aux[i++];<span class="comment">//谁小拿谁</span></span><br><span class="line"><span class="keyword">else</span> a[k] = aux[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable a, Comparable b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.compareTo(b)&lt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">3000000</span>;</span><br><span class="line">Integer[] a = RandomFactory.randomInt(size,<span class="number">40000</span>);</span><br><span class="line"></span><br><span class="line">MergeSort sort = <span class="keyword">new</span> MergeSort();</span><br><span class="line"><span class="comment">//sort.show(a);</span></span><br><span class="line"><span class="keyword">long</span> t = System.currentTimeMillis();</span><br><span class="line">sort.sort(a);</span><br><span class="line">t = System.currentTimeMillis() -t;</span><br><span class="line"><span class="comment">//sort.show(a);</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Insert sort"</span>);</span><br><span class="line">System.out.println(<span class="string">"time:"</span> + t);</span><br><span class="line">System.out.println(<span class="string">"random data size : "</span> + size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(Comparable c : a)&#123;</span><br><span class="line">System.out.print(c+<span class="string">" "</span>);</span><br><span class="line">i++;</span><br><span class="line"><span class="keyword">if</span>(i%<span class="number">20</span>==<span class="number">0</span>)&#123;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试结果显示，同样是对300万测试数据进行排序，归并排序较希尔排序时间上有明显的优势：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Merge sort</span><br><span class="line">time:2068</span><br><span class="line">random data size : 3000000</span><br><span class="line">Shell sort</span><br><span class="line">time:7075</span><br><span class="line">random data size : 3000000</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反射中的数组</title>
      <link href="/2014/11/03/%E5%8F%8D%E5%B0%84%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84/"/>
      <url>/2014/11/03/%E5%8F%8D%E5%B0%84%E4%B8%AD%E7%9A%84%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<p>首先，拿到一个Class，可以通过如下方式来判断是否是一个数组类型：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; c = f.getType();</span><br><span class="line"><span class="keyword">if</span>(c.isArray())&#123;</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以通过：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">c.getComponentType()</span><br></pre></td></tr></table></figure></p><p>来获取到数组元素的类型。</p><p>然后，可以通过下面的方式来创建一个数组：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object o = Array.newInstance(c, n);</span><br></pre></td></tr></table></figure></p><p>添加数组元素到数组中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val = ...<span class="comment">//构建数组元素 </span></span><br><span class="line">Array.set(o, i, val);</span><br></pre></td></tr></table></figure></p><p>下面的oo就是最后的结果了：<br><code>Object[] oo = (Object[])o;</code>java</p><blockquote><p>参考：</p><ol><li><a href="http://docs.oracle.com/javase/tutorial/reflect/special/arrayComponents.html" target="_blank" rel="noopener">http://docs.oracle.com/javase/tutorial/reflect/special/arrayComponents.html</a></li><li><a href="http://docs.oracle.com/javase/tutorial/reflect/special/arrayInstance.html" target="_blank" rel="noopener">http://docs.oracle.com/javase/tutorial/reflect/special/arrayInstance.html</a></li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 反射 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>排序算法之初级排序</title>
      <link href="/2014/10/26/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%88%9D%E7%BA%A7%E6%8E%92%E5%BA%8F/"/>
      <url>/2014/10/26/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E4%B9%8B%E5%88%9D%E7%BA%A7%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<p>首先，将涉及到排序的基本操作抽象为一个接口，其中包括一下一些方法：（这里的约定是从小到大的排序）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 对数组a进行排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 大小比较</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果a&lt;b，返回true，否则false</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable a,Comparable b)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 交换数组中连个元素的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> a</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a,<span class="keyword">int</span> i,<span class="keyword">int</span> j)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 打印数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断数组是否已经排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] a)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很多的方法是通用的，抽象成一个抽象父类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSort</span> <span class="keyword">implements</span> <span class="title">Sort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">less</span><span class="params">(Comparable m, Comparable n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> m.compareTo(n) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exch</span><span class="params">(Comparable[] a, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">Comparable tmp = a[i];</span><br><span class="line">a[i] = a[j];</span><br><span class="line">a[j] = tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Comparable c : a)&#123;</span><br><span class="line">System.out.print(c + <span class="string">" "</span>) ;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSorted</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">1</span>;i&lt;a.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(less(a[i],a[i-<span class="number">1</span>])) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><p>该算法的思想最简单，即每次从非排序区查找一个最小元素放到已排序区的最后面：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 选择排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huqiao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectionSort</span> <span class="keyword">extends</span> <span class="title">AbstractSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ;i&lt;a.length;i++)&#123;</span><br><span class="line"><span class="comment">//从非排序段中找到目前最小的，放到已排序区的最末端，即i处</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i+<span class="number">1</span>;j&lt;a.length;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(less(a[j],a[i]))&#123;</span><br><span class="line">exch(a,i,j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">100000</span>;</span><br><span class="line">Integer[] a = RandomFactory.randomInt(size,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">SelectionSort sort = <span class="keyword">new</span> SelectionSort();</span><br><span class="line"><span class="comment">//sort.show(a);</span></span><br><span class="line"><span class="keyword">long</span> t = System.currentTimeMillis();</span><br><span class="line">sort.sort(a);</span><br><span class="line">t = System.currentTimeMillis() -t;</span><br><span class="line"><span class="comment">//sort.show(a);</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Selection sort"</span>);</span><br><span class="line">System.out.println(<span class="string">"time:"</span> + t);</span><br><span class="line">System.out.println(<span class="string">"random data size : "</span> + size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试对10万条数据排序结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Selection sort</span><br><span class="line">time:15475</span><br><span class="line">random data size : 100000</span><br></pre></td></tr></table></figure></p><h1 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h1><p>思想类似于整理扑克牌，从无序区取一个元素，从有序区的末端往前比较，直到发现一个比自己小的元素才停止。</p><p>如上图所示，黄色部分表示有序区，白色部分表示无序区，上图展示了无序区的第一个元素（即4）从有序区往前移动的轨迹（发现3比自己小，于是停止）。<br><img src="http://img.blog.csdn.net/20141026221744340?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt></p><p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huqiao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertSort</span> <span class="keyword">extends</span> <span class="title">AbstractSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span> ;i&lt;a.length;i++)&#123;</span><br><span class="line"><span class="comment">//拿着非排序段的第一个元素，从一排序段的末尾开始逐个比较往前移动，直到发现比自己小的元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i;j&gt;<span class="number">0</span> &amp;&amp; less(a[j],a[j-<span class="number">1</span>]);j--)&#123;</span><br><span class="line">exch(a,j,j-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">100000</span>;</span><br><span class="line">Integer[] a = RandomFactory.randomInt(size,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">InsertSort sort = <span class="keyword">new</span> InsertSort();</span><br><span class="line"><span class="comment">//sort.show(a);</span></span><br><span class="line"><span class="keyword">long</span> t = System.currentTimeMillis();</span><br><span class="line">sort.sort(a);</span><br><span class="line">t = System.currentTimeMillis() -t;</span><br><span class="line"><span class="comment">//sort.show(a);</span></span><br><span class="line">System.out.println(<span class="string">"Insert sort"</span>);</span><br><span class="line">System.out.println(<span class="string">"time:"</span> + t);</span><br><span class="line">System.out.println(<span class="string">"random data size : "</span> + size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>插入排序的表现比选择排序稍好，不过优势不是很明显：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Insert sort</span><br><span class="line">time:12851</span><br><span class="line">random data size : 100000</span><br></pre></td></tr></table></figure></p><h1 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h1><p>希尔排序是在插入排序的基础上改进而来的，它要解决的问题是，插入排序中元素移动的速度太慢。比如一个最小的元素如果排在了长度为N数组的末尾，那么它最终要移动到数组的第一位需要移动的次数是N-1。希尔排序通过h有序的方式加速了元素的移动速度：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入排序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huqiao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShellSort</span> <span class="keyword">extends</span> <span class="title">AbstractSort</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(Comparable[] a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = a.length;</span><br><span class="line"><span class="keyword">int</span> h = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(h&lt;N/<span class="number">3</span>) h = <span class="number">3</span>*h + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(h&gt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = h ;i&lt;a.length;i++)&#123;</span><br><span class="line"><span class="comment">//拿着非排序段的第一个元素，从一排序段的末尾开始逐个比较往前移动，直到发现比自己小的元素</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i;j&gt;=h &amp;&amp; less(a[j],a[j-h]);j-=h)&#123;</span><br><span class="line">exch(a,j,j-h);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">h = h/<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">100000</span>;</span><br><span class="line">Integer[] a = RandomFactory.randomInt(size,<span class="number">40000</span>);</span><br><span class="line"></span><br><span class="line">ShellSort sort = <span class="keyword">new</span> ShellSort();</span><br><span class="line"><span class="comment">//sort.show(a);</span></span><br><span class="line"><span class="keyword">long</span> t = System.currentTimeMillis();</span><br><span class="line">sort.sort(a);</span><br><span class="line">t = System.currentTimeMillis() -t;</span><br><span class="line"><span class="comment">//sort.show(a);</span></span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"Shell sort"</span>);</span><br><span class="line">System.out.println(<span class="string">"time:"</span> + t);</span><br><span class="line">System.out.println(<span class="string">"random data size : "</span> + size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>希尔排序的表现惊人，优势很明显：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Shell sort</span><br><span class="line">time:54</span><br><span class="line">random data size : 100000</span><br></pre></td></tr></table></figure></p><p>实际情况中，许多高级排序算法相对与希尔排序的优势也不是和明显，加上算法复杂度的考虑，希尔排序不失为一种既价廉又物美的算法。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入式(embed)Tomcat的使用</title>
      <link href="/2014/10/24/%E5%B5%8C%E5%85%A5%E5%BC%8F(embed)Tomcat%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2014/10/24/%E5%B5%8C%E5%85%A5%E5%BC%8F(embed)Tomcat%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>title: 嵌入式(embed)Tomcat的使用 date: 2014-10-24 16:55 categories: Tomcat<br>tags:<br>本来想用InstallAnyWhere来制作一个安装文件，里面包含一个tomcat，结果发现InstallAnyWhere一时半会儿可能学不下来。我的目的是想用Java SWT做一个壳子，内嵌一个浏览器，这个浏览器访问tomcat应用，让整个程序看起来像是一个CS架构的。我需要的功能倒是不复杂，想想能不能自己实现一个tomcat。Tomcat有没有提供这样的功能呢，不小心搜索了一下“嵌入式Tomcat”，还真有，并且在Tomcat5的时候就已经支持了：<br><a href="https://devcenter.heroku.com/articles/create-a-java-web-application-using-embedded-tomcat#create-your-pom-xml" target="_blank" rel="noopener">https://devcenter.heroku.com/articles/create-a-java-web-application-using-embedded-tomcat#create-your-pom-xml</a><br>他用的maven，直接到官网上<a href="http://apache.fayea.com/apache-mirror/tomcat/tomcat-7/v7.0.56/bin/embed/apache-tomcat-7.0.56-embed.zip" target="_blank" rel="noopener">下载embed版的压缩包</a>下来解压放到自己项目的lib目录中，并添加到buildpath中。<br>按这上面的说法抄一个吧，代码很简单：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String webappDirLocation = <span class="string">"src/main/webapp/"</span>;</span><br><span class="line">        Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//The port that we should run on can be set into an environment variable</span></span><br><span class="line">        <span class="comment">//Look for that variable and default to 8080 if it isn't there.</span></span><br><span class="line">        String webPort = System.getenv(<span class="string">"PORT"</span>);</span><br><span class="line">        <span class="keyword">if</span>(webPort == <span class="keyword">null</span> || webPort.isEmpty()) &#123;</span><br><span class="line">            webPort = <span class="string">"8080"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tomcat.setPort(Integer.valueOf(webPort));</span><br><span class="line"></span><br><span class="line">        tomcat.addWebapp(<span class="string">"/"</span>, <span class="keyword">new</span> File(webappDirLocation).getAbsolutePath());</span><br><span class="line">        System.out.println(<span class="string">"configuring app with basedir: "</span> + <span class="keyword">new</span> File(<span class="string">"./"</span> + webappDirLocation).getAbsolutePath());</span><br><span class="line"></span><br><span class="line">        tomcat.start();</span><br><span class="line">        tomcat.getServer().await();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按照该文章的步骤完全可以得出正确结果，但是他的方法生成了一个很复杂的bat文件，搞半天不还是搞出了一个和tomcat一模一样的东西来。但是如果直接run这个main方法，会报下面的错误：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">org.apache.jasper.JasperException: java.lang.IllegalStateException: No Java compiler available</span><br><span class="line">org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:585)</span><br><span class="line">org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:391)</span><br><span class="line">org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395)</span><br><span class="line">org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339)</span><br><span class="line">javax.servlet.http.HttpServlet.service(HttpServlet.java:727)</span><br><span class="line">org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)</span><br></pre></td></tr></table></figure></p><p>追踪源码，发现是在load类org.apache.jasper.compiler.JDTCompiler的时候出了问题。但是这个类确实已经存在于编译路径中了，咋整？直接在main方法中在启动tomcat之前load一把试试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class.forName(<span class="string">"org.apache.jasper.compiler.JDTCompiler"</span>);</span><br></pre></td></tr></table></figure></p><p>结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Caused by: java.lang.ClassNotFoundException: org.eclipse.jdt.internal.compiler.env.INameEnvironment</span><br><span class="line">at java.net.URLClassLoader<span class="variable">$1</span>.run(Unknown Source)</span><br><span class="line">at java.net.URLClassLoader<span class="variable">$1</span>.run(Unknown Source)</span><br><span class="line">at java.security.AccessController.doPrivileged(Native Method)</span><br><span class="line">at java.net.URLClassLoader.findClass(Unknown Source)</span><br><span class="line">at java.lang.ClassLoader.loadClass(Unknown Source)</span><br><span class="line">at sun.misc.Launcher<span class="variable">$AppClassLoader</span>.loadClass(Unknown Source)</span><br><span class="line">at java.lang.ClassLoader.loadClass(Unknown Source)</span><br><span class="line">... 3 more</span><br></pre></td></tr></table></figure></p><p>发现，其实是没有上面的这个类。从<a href="http://central.maven.org/maven2/org/eclipse/jdt/core/compiler/ecj/4.4/ecj-4.4.jar" target="_blank" rel="noopener">网上找到</a>，并加入到编译路径下就ok了：</p><p><img src="http://img.blog.csdn.net/20141024165118266?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt></p><p>接下来，把webapp换成真实项目的路径，该项目中使用了spring、Hibernate等工具：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String webappDirLocation = <span class="string">"src/main/webapp/"</span>;</span><br><span class="line">        Tomcat tomcat = <span class="keyword">new</span> Tomcat();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//The port that we should run on can be set into an environment variable</span></span><br><span class="line">        <span class="comment">//Look for that variable and default to 8080 if it isn't there.</span></span><br><span class="line">        String webPort = System.getenv(<span class="string">"PORT"</span>);</span><br><span class="line">        <span class="keyword">if</span>(webPort == <span class="keyword">null</span> || webPort.isEmpty()) &#123;</span><br><span class="line">            webPort = <span class="string">"8080"</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        tomcat.setPort(Integer.valueOf(webPort));</span><br><span class="line"></span><br><span class="line"><span class="comment">//      tomcat.addWebapp("/", new File(webappDirLocation).getAbsolutePath());</span></span><br><span class="line">        tomcat.addWebapp(<span class="string">"/nea"</span>, <span class="string">"D:\\apache-tomcat-7.0.34\\webapps\\nea"</span>);</span><br><span class="line">        System.out.println(<span class="string">"configuring app with basedir: D:\\apache-tomcat-7.0.34\\webapps\\nea"</span>);</span><br><span class="line"></span><br><span class="line">        tomcat.start();</span><br><span class="line">        tomcat.getServer().await();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>重新启动，发现spring mvc 的路径映射、Hibernate数据库初始化等动作正常执行了。 </p>]]></content>
      
      
      <categories>
          
          <category> Tomcat </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>InstallSeield安装及破解</title>
      <link href="/2014/10/24/InstallSeield%E5%AE%89%E8%A3%85%E5%8F%8A%E7%A0%B4%E8%A7%A3/"/>
      <url>/2014/10/24/InstallSeield%E5%AE%89%E8%A3%85%E5%8F%8A%E7%A0%B4%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>title: InstallSeield安装及破解 date: 2014-10-24 10:39 categories:<br>tags:<br>安装文件：<a href="http://pan.baidu.com/s/1o6NsbgA" target="_blank" rel="noopener">http://pan.baidu.com/s/1o6NsbgA</a> 密码:1qrh<br>破解工具：<a href="http://pan.baidu.com/s/1kTA6WEb" target="_blank" rel="noopener">http://pan.baidu.com/s/1kTA6WEb</a> 密码：wnjs</p><p>1、 在安装的最后一步选择激活，点击下一步</p><p>2、 随便输入一串激活码，如（1111111111……），点击下一步. </p><p>3、 提示出错，不用管，选择电子邮件激活，下一步 </p><p>4、 出现一串的序列码，拷贝它。 </p><p>5、 打开[InstallShield.12.豪华完全版].keygen.exe；粘上那串序列码，点create^，会生成一串很长的序列码，拷贝它。 </p><p>6、 回到第四步的对话框，粘上序列码，ok.</p>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>UnionFind算法学习</title>
      <link href="/2014/10/19/UnionFind%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2014/10/19/UnionFind%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>算法来自Algorithms一书1.5节，在此备忘。<br>该书配套网站：<a href="http://algs4.cs.princeton.edu/15uf/" target="_blank" rel="noopener">http://algs4.cs.princeton.edu/15uf/</a><br>算法解决的问题<br>解决的是动态连通性问题，给定N个点和N个点之间的连通数据，例如：<br>N = 10（0，1，2，3，4，5，6，7，8，9）<br>连通数据：<br>(4,3)<br>(3,8)<br>(6,5)<br>(9,4)<br>(2,1)<br>(8,9)<br>(5,0)<br>(7,2)<br>(6,1)<br>(1,0)<br>(6,7)<br>效果图如下：<br><img src="http://img.blog.csdn.net/20141019163210136?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><p>问题就是，如何判断给定的两个点是连通的？比如上图中，(8,9)、(1,0)、(6,7)都是连通的。如何判断这些节点中有多少个连通分量（孤岛，如上面的数据构成的节点就存在两个相互独立的孤岛）？</p><h1 id="quick-find算法："><a href="#quick-find算法：" class="headerlink" title="quick-find算法："></a>quick-find算法：</h1><p>该算法的思路是创建一个长度为N的数组，数组的每一个元素表示一个点，依靠判断两个数组元素的值是否相同来判断这两个元素是否是连通的，数组元素的初始值为点的序号，表示他们互不相连。新加入一个连接时，需要将连接双方的每一个点的值都改成一致的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickFindUF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">QuickFindUF</span><span class="params">(<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">id[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">count = N;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> id[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//union q to p</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pId = find(p);</span><br><span class="line"><span class="keyword">int</span> qId = find(q);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pId==qId) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;id.length;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(id[i]==qId)&#123;</span><br><span class="line">id[i] = pId;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = StdIn.readInt();</span><br><span class="line">QuickFindUF uf = <span class="keyword">new</span> QuickFindUF(N);</span><br><span class="line"><span class="keyword">while</span>(!StdIn.isEmpty())&#123;</span><br><span class="line"><span class="keyword">int</span> p = StdIn.readInt();</span><br><span class="line"><span class="keyword">int</span> q = StdIn.readInt();</span><br><span class="line"><span class="keyword">if</span>(uf.connected(p, q))&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">uf.union(p, q);</span><br><span class="line">StdOut.println(p + <span class="string">" "</span> + q);</span><br><span class="line">&#125;</span><br><span class="line">StdOut.println(uf.count()+<span class="string">" compontents"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="quick-union算法"><a href="#quick-union算法" class="headerlink" title="quick-union算法"></a>quick-union算法</h1><p>quick-union算法在对节点值的定义上有所不同，表示的是父节点，从而把所有节点变成了树状结构。<br>quick-find算法的时间主要浪费在union上，改进的quick-union算法的union方法进行了优化，不需要遍历所有节点。这主要依赖于find方法，find方法查找的不是节点本身，而是节点所属的根节点：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QuickUnionUF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">QuickUnionUF</span><span class="params">(<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">id[i] = i;</span><br><span class="line">&#125;</span><br><span class="line">count = N;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(id[p]!=p)&#123;</span><br><span class="line">p = id[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> id[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//union q to p</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pId = find(p);</span><br><span class="line"><span class="keyword">int</span> qId = find(q);</span><br><span class="line"><span class="keyword">if</span>(pId==qId) <span class="keyword">return</span>;</span><br><span class="line">id[pId] = qId;</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = StdIn.readInt();</span><br><span class="line">QuickUnionUF uf = <span class="keyword">new</span> QuickUnionUF(N);</span><br><span class="line"><span class="keyword">while</span>(!StdIn.isEmpty())&#123;</span><br><span class="line"><span class="keyword">int</span> p = StdIn.readInt();</span><br><span class="line"><span class="keyword">int</span> q = StdIn.readInt();</span><br><span class="line"><span class="keyword">if</span>(uf.connected(p, q))&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">uf.union(p, q);</span><br><span class="line"><span class="comment">//StdOut.println(p + " " + q);</span></span><br><span class="line">&#125;</span><br><span class="line">StdOut.println(uf.count()+<span class="string">" compontents"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="加权重的quick-union算法"><a href="#加权重的quick-union算法" class="headerlink" title="加权重的quick-union算法"></a>加权重的quick-union算法</h1><p>quick-union的缺点是，在最坏情况的输入数据时，最后形成的树可能是畸形的，树的深度很大，导致find方法查找根节点的时间代价越来越大。加权重的quick-union算法增加了每个节点的权重值。在初始时每个节点的权重是相同的，当节点不断地聚集，根节点的权重不断增大。union的时候，根据权重就能将小树连接到大树上，不会出现将大树连接到小树的情况，从而保证树的深度不会很大。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeightedQuickUnionUF</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] id;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] weight;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">WeightedQuickUnionUF</span><span class="params">(<span class="keyword">int</span> N)</span></span>&#123;</span><br><span class="line">System.out.println(<span class="string">"size="</span> +N);</span><br><span class="line">id = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line">weight = <span class="keyword">new</span> <span class="keyword">int</span>[N];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">id[i] = i;</span><br><span class="line">weight[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">count = N;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(id[p]!=p)&#123;</span><br><span class="line">p = id[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> id[p];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//union q to p</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">union</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> pId = find(p);</span><br><span class="line"><span class="keyword">int</span> qId = find(q);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(pId==qId) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(weight[pId] &lt; weight[qId])&#123;</span><br><span class="line"><span class="comment">//connect p to q</span></span><br><span class="line">id[pId] = qId;</span><br><span class="line">weight[qId] += weight[pId];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//connect q to p</span></span><br><span class="line">id[qId] = pId;</span><br><span class="line">weight[pId] += weight[qId];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">connected</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> q)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> find(p) == find(q);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N = StdIn.readInt();</span><br><span class="line">WeightedQuickUnionUF uf = <span class="keyword">new</span> WeightedQuickUnionUF(N);</span><br><span class="line"><span class="keyword">while</span>(!StdIn.isEmpty())&#123;</span><br><span class="line"><span class="keyword">int</span> p = StdIn.readInt();</span><br><span class="line"><span class="keyword">int</span> q = StdIn.readInt();</span><br><span class="line"><span class="keyword">if</span>(uf.connected(p, q))&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">uf.union(p, q);</span><br><span class="line"><span class="comment">//StdOut.println(p + " " + q);</span></span><br><span class="line">&#125;</span><br><span class="line">StdOut.println(uf.count()+<span class="string">" compontents"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>总的来说，quick-find方法不是基于树来考虑的，跟多的是基于分组的思想，最终的结果是不同的孤岛中的点都保存着相同的组号。quick-union算法则是基于树的思想，两个树想连的时候，不会对树的子节点进行任何操作，仅仅是对树的根节点进行调整，这就避免了从新调整节点值的操作。这种情况下，如果再保证树的深度不是很大，就能迅速提高运行速度。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>学习使用iReport几点总结</title>
      <link href="/2014/10/18/%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8iReport%E5%87%A0%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>/2014/10/18/%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8iReport%E5%87%A0%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>title: 学习使用iReport几点总结 date: 2014-10-18 18:56 categories:<br>tags:</p><ol><li>iReport和jasperreport之间的关系<br>个人理解的，iReport仅是一个报表设计器，他所能产生的结果就是jrxml文件，即报表设计木板文件。具体生成为报表，如pdf，word的时候，需要依赖于jasperreport库。</li><li>使用流程：<br><img src="http://img.blog.csdn.net/20141018184142550?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></li></ol><p>这是官方文档中的插图，说明了各个文件之间的转换关系。首先使用iReport生成jrxml文件，然后使用jasperreport library提供的api来处理jrxml文件，直到生成报表。</p><ol start="3"><li>jasperreport在操作pdf的时候依赖于itext-pdf，在支持中文字体的时候依赖于iTextAsian</li><li>许多需求在官方提供的下载包里都有例子程序，应该多查看这些例子是如何实现的。</li><li>子报表：稍微复杂一点儿的报表都会设计到子报表，从一个主报表出发，可能包含若干个子报表，主报表可以想子报表传递参数，子报表也能给主报表返回参数。</li><li>数据源：每个报表都有一个数据源，这个数据源可能是数据库查询、Java集合(Collection)、空(JREmptyDatasource)</li><li>报表目标的组成：报表分为多个水平分割的部分，例如Title(标题)，只在报表中显示一次，另外还有Page Header,Column Header等，最重要的是Detail，它表示对于每一条数据要显示的内容。</li><li>参数、变量、字段：报表是可以接受传递的参数的，并且可以设置参数的类型。如果外面传递了一个参数age，为了使用这个参数，你需要手动增加一个参数以便使用。<br>字段是指数据源中每条数据身上的字段。如果你创建的是一个数据库查询的报表，这些字段是自动创建好的，否则，例如一个自定义的类，你需要手动创建好这些类对应的字段。变量，这里包含了与页面相关的一些数据，例如页码、记录index等。</li><li>Scriptlet：你可以根据接口定义好Scriptlet，然后在iReport中使用。和在Java中使用Bean对象完全一样。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 报表 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ireport </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程并发工具--线程安全集合</title>
      <link href="/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7--%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%9B%86%E5%90%88/"/>
      <url>/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7--%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>一般的集合，如ArrayList、HashSet、HashMap等，都是线程不安全的。不安全的表现是什么？<br>ConcurrentModifyException<br>都知道，在遍历集合的时候不能对集合进行添加和删除操作，否则就会抛这个一场。如果一个线程正在遍历一个集合的时候另外一个线程往这个集合中增加或删除了元素，那么程序就会出这个异常。<br>这个异常的原理是，集合中有一个版本号，每次修改（添加或删除）集合的时候，版本号都会往上涨。当开始遍历集合的时候，先记录下这个版本号，在遍历期间，如果发现这个版本号和集合当前的版本号不等，就会抛这个异常。<br>死循环<br>集合的hasNext方法实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cursor != size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>判断的是当前的游标是否和集合的大小相等。 当一个线程在遍历集合的时候，cursor是一直往上涨的，直到“遇到”cursor==size()。一种情况是，刚好在这个线程快要结束遍历，即游标的值刚好等于size的时候，另外一个线程不小心从集合中remove了一个元素，那么size()就减小了，cursor不等于size了，然后cursor继续往上涨。这样，cursor就和size擦肩而过，永远也不能” 相见”了，于是死循环了。</p><p>为此，Java提供了线程安全的集合，例如ConcurrentHashMap,CopyOnWriteArrayList。这些集合是线程安全的。不会出现ConcurrentModifyException和死循环的问题。</p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线程并发工具--阻塞队列</title>
      <link href="/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7--%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/"/>
      <url>/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7--%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<p>BlockingQueue在生产者消费者模式中运用非常广泛，生产者往队列中增加产品，消费中从队列中获取产品。在增加和删除队列元素的时候，是否阻塞是可选的，比如队列为空时再获取队列元素时，是返回空、返回null还是抛异常，下面的摘自api文档的说明：</p><table border cellpadding="3" cellspacing="1" style="color:rgb(0,0,0); font-family:Simsun"><br><tbody><br><tr><br><td>&nbsp;</td><br><td align="CENTER"><em>Throws exception</em></td><br><td align="CENTER"><em>Special value</em></td><br><td align="CENTER"><em>Blocks</em></td><br><td align="CENTER"><em>Times out</em></td><br></tr><br><tr><br><td><strong>Insert</strong></td><br><td><a target="_blank" href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/BlockingQueue.html#add(E)"><code>add(e)</code></a></td><br><td><a target="_blank" href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/BlockingQueue.html#offer(E)"><code>offer(e)</code></a></td><br><td><a target="_blank" href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/BlockingQueue.html#put(E)"><code>put(e)</code></a></td><br><td><a target="_blank" href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/BlockingQueue.html#offer(E, long, java.util.concurrent.TimeUnit)"><code>offer(e, time, unit)</code></a></td><br></tr><br><tr><br><td><strong>Remove</strong></td><br><td><a target="_blank" href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/BlockingQueue.html#remove(java.lang.Object)"><code>remove()</code></a></td><br><td><a target="_blank" href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/BlockingQueue.html#poll(long, java.util.concurrent.TimeUnit)"><code>poll()</code></a></td><br><td><a target="_blank" href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/BlockingQueue.html#take()"><code>take()</code></a></td><br><td><a target="_blank" href="http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/BlockingQueue.html#poll(long, java.util.concurrent.TimeUnit)"><code>poll(time, unit)</code></a></td><br></tr><br><tr><br><td><strong>Examine</strong></td><br><td><a target="_blank" href="http://docs.oracle.com/javase/6/docs/api/java/util/Queue.html#element()"><code>element()</code></a></td><br><td><a target="_blank" href="http://docs.oracle.com/javase/6/docs/api/java/util/Queue.html#peek()"><code>peek()</code></a></td><br><td><em>not applicable</em></td><br><td><em>not applicable<br><br><br><br></em></td><br></tr><br></tbody><br></table><p>下面是一个生成这和消费者的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ArrayBlockingQueue&lt;String&gt; iphones = <span class="keyword">new</span> ArrayBlockingQueue&lt;String&gt;(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//apple company product iphones</span></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="number">500</span>);</span><br><span class="line">iphones.put(<span class="string">"iphone"</span> + (++num));</span><br><span class="line">System.out.println(<span class="string">"produce a iphone,total size is "</span> + iphones.size());</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"><span class="comment">// customers</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">5000</span>));</span><br><span class="line">String iphone = iphones.take();</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">": i get a iphone : "</span> + iphone+<span class="string">",left "</span> + iphones.size());</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>部分执行结果:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">produce a iphone,total size is 0</span><br><span class="line">Thread-1: i get a iphone : iphone1,left 0</span><br><span class="line">produce a iphone,total size is 1</span><br><span class="line">Thread-1: i get a iphone : iphone2,left 0</span><br><span class="line">produce a iphone,total size is 1</span><br><span class="line">Thread-2: i get a iphone : iphone3,left 0</span><br><span class="line">produce a iphone,total size is 1</span><br><span class="line">Thread-3: i get a iphone : iphone4,left 0</span><br><span class="line">produce a iphone,total size is 1</span><br><span class="line">produce a iphone,total size is 2</span><br><span class="line">produce a iphone,total size is 3</span><br><span class="line">Thread-1: i get a iphone : iphone5,left 2</span><br><span class="line">produce a iphone,total size is 3</span><br><span class="line">produce a iphone,total size is 4</span><br><span class="line">produce a iphone,total size is 5</span><br><span class="line">Thread-2: i get a iphone : iphone6,left 4</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程并发工具--Exchanger</title>
      <link href="/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7--Exchanger/"/>
      <url>/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7--Exchanger/</url>
      
        <content type="html"><![CDATA[<p>Exchanger可以实现两个线程之间的数据交换：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Exchanger&lt;String&gt; exchanger = <span class="keyword">new</span> Exchanger&lt;String&gt;();</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">5000</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">":i am ready to buy!"</span>);</span><br><span class="line">String give = <span class="string">"money"</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String goods = exchanger.exchange(give);</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">": give "</span> + give + <span class="string">" and get "</span> + goods);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">5000</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">":i am ready to sale!"</span>);</span><br><span class="line">String sale = <span class="string">"goods"</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">String money = exchanger.exchange(sale);</span><br><span class="line">System.out.println(Thread.currentThread().getName() + <span class="string">": give "</span> + sale + <span class="string">" and get "</span> + money);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure></p><p>上面的示例模拟了买卖双方的一个交换：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Thread-1:i am ready to sale!</span><br><span class="line">Thread-0:i am ready to buy!</span><br><span class="line">Thread-0: give money and get goods</span><br><span class="line">Thread-1: give goods and get money</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Exchanger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程并发工具--CountDownLatch</title>
      <link href="/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7--CountDownLatch/"/>
      <url>/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7--CountDownLatch/</url>
      
        <content type="html"><![CDATA[<p>倒计时器，某个线程可以等待这个倒计时指向0的时候开始执行：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> CountDownLatch cdl = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line"><span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">5000</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"thread "</span> + index + <span class="string">" execute complate!"</span>);</span><br><span class="line">cdl.countDown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"main thread is awaiting..."</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">cdl.await();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"all thread execute complate."</span>);</span><br></pre></td></tr></table></figure></p><p>主线程启动10个线程开始来减少倒计时数量，等到减到0时主线程继续执行，结果如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">main thread is awaiting...</span><br><span class="line">thread 0 execute complate!</span><br><span class="line">thread 8 execute complate!</span><br><span class="line">thread 2 execute complate!</span><br><span class="line">thread 4 execute complate!</span><br><span class="line">thread 9 execute complate!</span><br><span class="line">thread 7 execute complate!</span><br><span class="line">thread 5 execute complate!</span><br><span class="line">thread 1 execute complate!</span><br><span class="line">thread 6 execute complate!</span><br><span class="line">thread 3 execute complate!</span><br><span class="line">all thread execute complate.</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> CountDownLatch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程并发工具--CyclicBarrier</title>
      <link href="/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7--CyclicBarrier/"/>
      <url>/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7--CyclicBarrier/</url>
      
        <content type="html"><![CDATA[<p>CyclicBarrier能实现的效果是多个线程同时执行，这些线程执行的时间不一。但是要求在某一个点上，需要这些线程都执行完毕了之后，全部线程才能往下执行。<br>下面是示例程序：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">ExecutorService service = Executors.newCachedThreadPool();</span><br><span class="line"><span class="keyword">final</span> CyclicBarrier cyclicBarrier = <span class="keyword">new</span> CyclicBarrier(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">3</span>;i++)&#123;</span><br><span class="line">Runnable runnable = <span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"></span><br><span class="line">Random random = <span class="keyword">new</span> Random();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(random.nextInt(<span class="number">5000</span>));</span><br><span class="line">System.out.println(<span class="string">"point 1:"</span>+Thread.currentThread().getName()+<span class="string">" execute complate."</span>);</span><br><span class="line">cyclicBarrier.await();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(random.nextInt(<span class="number">5000</span>));</span><br><span class="line">System.out.println(<span class="string">"point 2:"</span>+Thread.currentThread().getName()+<span class="string">" execute complate."</span>);</span><br><span class="line">cyclicBarrier.await();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(random.nextInt(<span class="number">5000</span>));</span><br><span class="line">System.out.println(<span class="string">"point 3:"</span>+Thread.currentThread().getName()+<span class="string">" execute complate."</span>);</span><br><span class="line">cyclicBarrier.await();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(random.nextInt(<span class="number">5000</span>));</span><br><span class="line">System.out.println(<span class="string">"point 4:"</span>+Thread.currentThread().getName()+<span class="string">" execute complate."</span>);</span><br><span class="line">cyclicBarrier.await();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException | BrokenBarrierException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">service.execute(runnable);</span><br><span class="line"><span class="comment">//service.shutdown();</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">point 1:pool-1-thread-3 execute complate.</span><br><span class="line">point 1:pool-1-thread-2 execute complate.</span><br><span class="line">point 1:pool-1-thread-1 execute complate.</span><br><span class="line">point 2:pool-1-thread-2 execute complate.</span><br><span class="line">point 2:pool-1-thread-1 execute complate.</span><br><span class="line">point 2:pool-1-thread-3 execute complate.</span><br><span class="line">point 3:pool-1-thread-3 execute complate.</span><br><span class="line">point 3:pool-1-thread-1 execute complate.</span><br><span class="line">point 3:pool-1-thread-2 execute complate.</span><br><span class="line">point 4:pool-1-thread-1 execute complate.</span><br><span class="line">point 4:pool-1-thread-2 execute complate.</span><br><span class="line">point 4:pool-1-thread-3 execute complate.</span><br></pre></td></tr></table></figure></p><p>可以看到，到达么一个点的顺序可能不固定，但是没有说一个线程才到达point1的时候，另外一个线程已经达到point2了，即大家共同达到一个点之后才会继续往下执行。 </p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
            <tag> CyclicBarrier </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程并发工具--Semaphore(信号灯)</title>
      <link href="/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7--Semaphore(%E4%BF%A1%E5%8F%B7%E7%81%AF)/"/>
      <url>/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7--Semaphore(%E4%BF%A1%E5%8F%B7%E7%81%AF)/</url>
      
        <content type="html"><![CDATA[<p>Semaphore可以运行指定个数的线程同时运行某段代码，而不是一般同步情况下的一个线程。下面的程序中，10个线程运行的时候，都必须先获得到Semaphore，运行完毕之后归还Semaphore，达到限制指定个数的多个线程同时执行的效果。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Semaphore sp = <span class="keyword">new</span> Semaphore(<span class="number">3</span>,<span class="keyword">false</span>);</span><br><span class="line">ExecutorService service = Executors.newCachedThreadPool();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> index = i;</span><br><span class="line">service.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">sp.acquire();</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(index + <span class="string">":thread"</span> + Thread.currentThread().getName() + <span class="string">" get the  Semaphore,Semaphore left:"</span> + sp.availablePermits());</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">Thread.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">3000</span>));</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">sp.release();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">service.shutdown();</span><br></pre></td></tr></table></figure></p><p>上面的程序中设置了3个信号灯，但是却有10个线程等待这来获取到信号灯并执行自己的代码。这10个线程必须等待，每次最多只能有3个线程能获取到信号灯并执行。注意到Semaphore的构造方法中的那个boolean参数，它表示线程来获取信号灯的权利是否是按先后顺序的。<br>true时：<br><img src="http://img.blog.csdn.net/20141018112528466?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><p>false时可能的结果：</p><p><img src="http://img.blog.csdn.net/20141018112223171?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程并发工具--Lock和Condition</title>
      <link href="/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7--Lock-amp;Condition/"/>
      <url>/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7--Lock-amp;Condition/</url>
      
        <content type="html"><![CDATA[<p>Lock和Condition是为了替代synchroinzed、wait、notify的，有点是更面向对象，功能上也更强大。下面是一个简单的例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outputer</span> </span>&#123;</span><br><span class="line">  Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">output</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">   lock.lock();</span><br><span class="line">   <span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : str.toCharArray()) &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">      Thread.sleep(<span class="number">50</span>);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">      e.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     System.out.print(c);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println();</span><br><span class="line">   &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">    lock.unlock();</span><br><span class="line">   &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>Lock比传统的synchronzied的优点，除了更面向对象外，它还增加了读写锁的功能。<br>读写锁的优点是，多个读的线程是仍然可以并发的，仅仅是读和写、写和写之间做同步，这样既提高了读时的效率也保证了写时的安全：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ReentrantReadWriteLock wrl = <span class="keyword">new</span> ReentrantReadWriteLock();</span><br><span class="line">wrl.readLock().lock();</span><br><span class="line">wrl.readLock().unlock();</span><br><span class="line"></span><br><span class="line">wrl.writeLock().lock();</span><br><span class="line">wrl.writeLock().unlock();</span><br></pre></td></tr></table></figure></p><p>读写锁的一个应用是在缓存的实现中，读取缓存的时候先上读锁，然后判断在缓存中是否有数据，如果没有，则需要写，这个时候需要先将读锁解掉，然后上写锁，再加载数据，之后再解写锁，上读锁，在官方文档中有一个这样的例子：</p><p><img src="http://img.blog.csdn.net/20141018105326183?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><p>Lock与synchronzied对应，与wait()和notify()对应的则是Condition：<br>你在将出传统的syncrhonized改成Lock之后，会发现wait和notify没法调了，这话时候需要使用Condition：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Condition condition = lock.newCondition();</span><br><span class="line">condition.await();<span class="comment">//this.wait();</span></span><br><span class="line">condition.signal();<span class="comment">//this.notify();</span></span><br></pre></td></tr></table></figure></p><p>Condition较之以前的lock的好处是，之前的lock.wait()和lock.notify()无法根据实际情况去等待和唤醒一个想要的线程。有了Condition之后，可以设置多个condition，线程等待或唤醒是确定的某一个condition，这样在通信上更明确，也更方便了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程并发工具--线程执行器</title>
      <link href="/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7--%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%99%A8/"/>
      <url>/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%B9%B6%E5%8F%91%E5%B7%A5%E5%85%B7--%E7%BA%BF%E7%A8%8B%E6%89%A7%E8%A1%8C%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>有的时候，你可能会产生大量的线程，这些线程的执行可能是有规定的，比如同时只运行最多有3个线程在执行，这种情况就可以使用线程执行器。线程执行器的分为一下几种：</p><p>#1）固定大小的<br>ExecutorService executorService = Executors.newFixedThreadPool(3);<br>这个执行器表示不论多少个线程被装进这个执行器里面，同时在运行的最多只有3个。</p><h1 id="2）单线程执行"><a href="#2）单线程执行" class="headerlink" title="2）单线程执行"></a>2）单线程执行</h1><p>ExecutorService executorService = Executors.newSingleThreadExecutor();<br>这个和Executors.newFixedThreadPool(1)是一个道理。 </p><h1 id="3）缓存式执行器"><a href="#3）缓存式执行器" class="headerlink" title="3）缓存式执行器"></a>3）缓存式执行器</h1><p>ExecutorService executorService = Executors.newCachedThreadPool();<br>你来多少线程我就给你起多少个线程为你服务。 </p><p>另外，关闭线程池有两种方法，shutdown()表示等所有任务都执行完毕之后再关闭；shutdownNow()表示立即关闭，不论是否当前还有正在运行的任务。 </p><p>往执行器中提交任务的两种任务：<br>1：普通提交，不管执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">servie.execute(<span class="keyword">new</span> Runnable()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"task running in Executors"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>2：Future&amp;Callable等待执行结果：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Future future = servie.submit(<span class="keyword">new</span> Callable&lt;String&gt;() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">System.out.println(future.get());</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>线程同步与通信</title>
      <link href="/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B8%8E%E9%80%9A%E4%BF%A1/"/>
      <url>/2014/10/18/%E7%BA%BF%E7%A8%8B%E5%90%8C%E6%AD%A5%E4%B8%8E%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="线程同步（互斥）"><a href="#线程同步（互斥）" class="headerlink" title="线程同步（互斥）"></a>线程同步（互斥）</h1><p>同步的需求是指同一段代码，一个线程在执行的时候，不能有别的线程也在执行。<br>为此，Java提供了锁的机制:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">  <span class="comment">// some code need synchronized</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>一个线程在执行到同步代码块的时候，就需要先拿到lock对象作为锁，能拿到的前提是lock对象身上的锁还没有被别的线程拿走，否则就要等待了。执行完毕同步代码块之后，线程就会把lock对象的锁归还，别的线程才能获取到锁并继续往下执行。<br>怎样才能真正锁住是认真考虑的事情，锁对象的选择至关重要。这里要记住的一点是，字符串作为锁的时候一定要小心：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String key1 = <span class="string">"a"</span>;</span><br><span class="line">String key2 = <span class="string">"a"</span>;</span><br></pre></td></tr></table></figure></p><p>这个时候，key1和key2可以看成是同一个对象，用key1做为锁的线程和用key2作为锁的线程能够实现同步互斥。但是<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String key1 = <span class="keyword">new</span> String(<span class="string">"a"</span>);</span><br><span class="line">String key2 = <span class="keyword">new</span> String(<span class="string">"a"</span>);</span><br></pre></td></tr></table></figure></p><p>或者<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String key1 = p1 + p2;</span><br><span class="line">String key2 = p1 + p2;</span><br></pre></td></tr></table></figure></p><p>两种情况的key1和key2就不能作为锁了，因为他们是不同的对象。 </p><p>代码块级别的锁使用的是显式的锁，就是明确指定了锁是哪个。成员方法级别的同步使用的是隐式的锁—this；同理，静态方法使用的锁则为该方法所在类的类对象(class)。</p><h1 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h1><p>线程通信指的是线程间的协调执行。<br>同步互斥的代码最好不要放到匿名的Thread内部类中，而应该归纳到一个外部类里面。<br>通过查询运行条件，判断是否该继续执行还是应该等待，继续等待就调用锁对象的wait方法。如果条件满足，自己执行完之后，如果条件满足，需要改变条件变量，并调用notify来唤醒其他等待的线程。<br>如此循环… </p><p>总的来说，线程通信依赖的是synchronized机制和条件变量。CPU不知道谁该执行谁该等待，它只会随机调一个线程来跑，线程只能依靠自身的检测来确定自己应该执行还是应该等待其他线程执行完毕满足条件之后再执行。这就是线程通信。</p>]]></content>
      
      
      <categories>
          
          <category> 多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线程同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Timer定时器</title>
      <link href="/2014/10/18/Timer%E5%AE%9A%E6%97%B6%E5%99%A8/"/>
      <url>/2014/10/18/Timer%E5%AE%9A%E6%97%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>最简单的需求，设定多长时间以后执行某个动作:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTimerTask</span> <span class="keyword">extends</span> <span class="title">TimerTask</span></span>&#123;</span><br><span class="line"> <span class="meta">@Override</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  System.out.println(<span class="string">"task running..."</span>);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>每三秒执行一次：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">timer.schedule(<span class="keyword">new</span> MyTimerTask(), <span class="number">3000</span>);</span><br></pre></td></tr></table></figure></p><p>Timer提供不同的API实现不同的定时功能，例如:<br>1）定时到指定的时间执行（一次）<br>2）定时到指定的时间后每隔一段时间执行一次（循环多次）<br>3）延迟指定时间后执行<br>API如图所示：<br><img src="http://img.blog.csdn.net/20141018092150231?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="API"></p><p>另外，如果希望动态修改执行间隔，可以先调用cancel();方法取消定时器，然后重新schedule();</p><p>比较复杂一点儿的定时任务可以参考<a href="http://www.quartz-scheduler.org/documentation/best-practices" target="_blank" rel="noopener">Quzrtz</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 定时器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate Criteria中的三种Distinct</title>
      <link href="/2014/09/17/Hibernate-Criteria%E4%B8%AD%E7%9A%84%E4%B8%89%E7%A7%8DDistinct/"/>
      <url>/2014/09/17/Hibernate-Criteria%E4%B8%AD%E7%9A%84%E4%B8%89%E7%A7%8DDistinct/</url>
      
        <content type="html"><![CDATA[<h1 id="案例："><a href="#案例：" class="headerlink" title="案例："></a>案例：</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 客户拜访计划</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"cus_visit"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Visit</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 同行人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Set&lt;Employee&gt; partners;</span><br><span class="line"><span class="meta">@ManyToMany</span>(targetEntity = Employee.class, cascade = &#123; CascadeType.MERGE &#125;,fetch = FetchType.LAZY)</span><br><span class="line"><span class="meta">@Cascade</span>(value = &#123; org.hibernate.annotations.CascadeType.SAVE_UPDATE,org.hibernate.annotations.CascadeType.DELETE &#125;)</span><br><span class="line"><span class="meta">@JoinTable</span>(name = <span class="string">"cus_visit_employee"</span>, joinColumns = &#123; <span class="meta">@JoinColumn</span>(name = <span class="string">"visit_id"</span>) &#125;, inverseJoinColumns = &#123; <span class="meta">@JoinColumn</span>(name = <span class="string">"employee_id"</span>) &#125;)</span><br><span class="line"><span class="meta">@Fetch</span>(FetchMode.SELECT)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Set&lt;Employee&gt; <span class="title">getPartners</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> partners;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPartners</span><span class="params">(Set&lt;Employee&gt; partners)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.partners = partners;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Criteria创建：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Criteria criteria = getSession().createCriteria(Visit.class)</span><br><span class="line">.setFirstResult(pageInfo.getStartIndex())</span><br><span class="line">.setMaxResults(pageInfo.getNumPerPage());</span><br></pre></td></tr></table></figure></p><p>查询条件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addQueryCause</span><span class="params">(Criteria criteria, Visit visit)</span> </span>&#123;</span><br><span class="line">criteria.createAlias(<span class="string">"partners"</span>, <span class="string">"partner"</span>);</span><br><span class="line"><span class="keyword">if</span>(visit.getPartners()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">Set&lt;Employee&gt; partnerSet = visit.getPartners();</span><br><span class="line"><span class="keyword">for</span>(Employee employee :partnerSet)&#123;</span><br><span class="line">criteria.add(Restrictions.or(Restrictions.like(</span><br><span class="line"><span class="string">"partner.empNo"</span>, employee.getEmpNo(),MatchMode.ANYWHERE),Restrictions.like(</span><br><span class="line"><span class="string">"partner.name"</span>, employee.getName(),MatchMode.ANYWHERE)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//其他查询条件...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="第一种：对查询完毕之后的结果进行Distinct"><a href="#第一种：对查询完毕之后的结果进行Distinct" class="headerlink" title="第一种：对查询完毕之后的结果进行Distinct"></a>第一种：对查询完毕之后的结果进行Distinct</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addQueryCause(idsOnlyCriteria, visit);</span><br><span class="line">criteria.setResultTransformer(criteria.DISTINCT_ROOT_ENTITY);</span><br><span class="line"><span class="keyword">return</span> criteria.list();</span><br></pre></td></tr></table></figure><h1 id="第二种：只查询一个属性，并对这个属性进行Distinct"><a href="#第二种：只查询一个属性，并对这个属性进行Distinct" class="headerlink" title="第二种：只查询一个属性，并对这个属性进行Distinct"></a>第二种：只查询一个属性，并对这个属性进行Distinct</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addQueryCause(idsOnlyCriteria, visit);</span><br><span class="line">criteria.setProjection(Projections.distinct(Projections.id()));</span><br><span class="line"><span class="keyword">return</span> criteria.list();</span><br></pre></td></tr></table></figure><h1 id="第三种：使用子查询，实现整条记录的Distinct"><a href="#第三种：使用子查询，实现整条记录的Distinct" class="headerlink" title="第三种：使用子查询，实现整条记录的Distinct"></a>第三种：使用子查询，实现整条记录的Distinct</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DetachedCriteria idsOnlyCriteria = DetachedCriteria.forClass(Visit.class);</span><br><span class="line">idsOnlyCriteria.setProjection(Projections.distinct(Projections.id()));</span><br><span class="line">addQueryCause(idsOnlyCriteria, visit);</span><br><span class="line"></span><br><span class="line">criteria.add(Subqueries.propertyIn(<span class="string">"id"</span>, idsOnlyCriteria));</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> criteria.list();</span><br></pre></td></tr></table></figure><p>第三种实现依赖于第二种功能，把条件都放到对id查询的限制上，之后在查询主记录只需要使主键IN子查询结果就行了。最后生成的SQL语句：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">    this_.id <span class="keyword">as</span> id1_61_0_,</span><br><span class="line">   ....</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">    cus_visit this_ </span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">    this_.id <span class="keyword">in</span> (</span><br><span class="line">        <span class="keyword">select</span></span><br><span class="line">            <span class="keyword">distinct</span> this_.id <span class="keyword">as</span> y0_ </span><br><span class="line">        <span class="keyword">from</span></span><br><span class="line">            cus_visit this_ </span><br><span class="line">        <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span></span><br><span class="line">            cus_visit_employee partners3_ </span><br><span class="line">                <span class="keyword">on</span> this_.id=partners3_.visit_id </span><br><span class="line">        <span class="keyword">left</span> <span class="keyword">outer</span> <span class="keyword">join</span></span><br><span class="line">            core_employee partner1_ </span><br><span class="line">                <span class="keyword">on</span> partners3_.employee_id=partner1_.emp_no </span><br><span class="line">        <span class="keyword">where</span></span><br><span class="line">            (</span><br><span class="line">                this_.planer=? </span><br><span class="line">                <span class="keyword">or</span> partner1_.emp_no=?</span><br><span class="line">            )</span><br><span class="line">    ) </span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span></span><br><span class="line">    this_.id <span class="keyword">asc</span> <span class="keyword">limit</span> ?</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Hibernate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> distinct </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring动态切换数据库</title>
      <link href="/2014/08/22/Spring%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2014/08/22/Spring%E5%8A%A8%E6%80%81%E5%88%87%E6%8D%A2%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>首先定义一个AbstractRoutingDataSource，Spring给我们留了这样的接口，让我们方便的定义怎么切换数据源：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Logger logger = Logger.getAnonymousLogger();</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String p = <span class="string">"a"</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();</span><br><span class="line">p = request.getParameter(<span class="string">"dataSource"</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(p==<span class="keyword">null</span>)&#123;</span><br><span class="line">p=<span class="string">"a"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Logger <span class="title">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> logger;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以通过参数来确定到底使用哪个数据源，总的来说，你可以在你自己的AbstractRoutingDataSource中获取到HttpServletRequest，剩下的就是你自己发挥了。代码里对异常进行了catch，因为这里可能会抛No thread-bound request found的异常，具体什么原因不确定，但是等系统跑起来之后（也就是真的从web访问的时候）可以正常运行。</p><p>下面是Spring对sessionFactory的配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"faceDataSource"</span> <span class="attr">class</span>=<span class="string">"test.MyRoutingDataSource"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetDataSources"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"a"</span> <span class="attr">value-ref</span>=<span class="string">"dataSource1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"b"</span> <span class="attr">value-ref</span>=<span class="string">"dataSource2"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultTargetDataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource1"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource1"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span></span></span><br><span class="line"><span class="tag"><span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName1&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url1&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username1&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password1&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"preferredTestQuery"</span> <span class="attr">value</span>=<span class="string">"$&#123;preferredTestQuery&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span> <span class="attr">value</span>=<span class="string">"$&#123;idleConnectionTestPeriod&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testConnectionOnCheckout"</span> <span class="attr">value</span>=<span class="string">"$&#123;testConnectionOnCheckout&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource2"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span></span></span><br><span class="line"><span class="tag"><span class="attr">destroy-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClass"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.driverClassName2&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jdbcUrl"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.url2&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"user"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.username2&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.password2&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"preferredTestQuery"</span> <span class="attr">value</span>=<span class="string">"$&#123;preferredTestQuery&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span> <span class="attr">value</span>=<span class="string">"$&#123;idleConnectionTestPeriod&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testConnectionOnCheckout"</span> <span class="attr">value</span>=<span class="string">"$&#123;testConnectionOnCheckout&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span> </span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionFactory"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate4.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"faceDataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hibernateProperties"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.dialect"</span>&gt;</span>$&#123;hibernate.dialect&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.hbm2ddl.auto"</span>&gt;</span>$&#123;hibernate.hbm2ddl.auto&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.max_fetch_depth"</span>&gt;</span>$&#123;hibernate.maxFetchDepth&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.show_sql"</span>&gt;</span>$&#123;hibernate.show_sql&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.format_sql"</span>&gt;</span>$&#123;hibernate.format_sql&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.jdbc.batch_size"</span>&gt;</span>$&#123;hibernate.jdbc.batch_size&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.cache.use_query_cache"</span>&gt;</span>$&#123;cache.use_query_cache&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.cache.use_second_level_cache"</span>&gt;</span>$&#123;cache.use_second_level_cache&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.cache.region.factory_class"</span>&gt;</span>$&#123;hibernate.cache.region.factory_class&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"hibernate.temp.use_jdbc_metadata_defaults"</span>&gt;</span>$&#123;hibernate.temp.use_jdbc_metadata_defaults&#125;<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"packagesToScan"</span> <span class="attr">value</span>=<span class="string">"com.novots.bros.*.entity"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>到目前为止，在几个静态的数据库之间切换已经没有问题了。<br>没多久，客户又提出，数据库可能是动态增加进来的。而不是想上面那样固定的几个数据库。<br>几番查找，找到了一个可以动态增加数据源的东西：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dynamicBeanReader"</span> <span class="attr">class</span>=<span class="string">"cn.chinacti.crm.dynamicdatasource.entity.DynamicBeanReaderImpl"</span></span></span><br><span class="line"><span class="tag"><span class="attr">init-method</span>=<span class="string">"init"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>此一段，将引出很多故事：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicBeanReaderImpl</span> <span class="keyword">implements</span> <span class="title">DynamicBeanReader</span>,<span class="title">ApplicationContextAware</span></span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(DynamicBeanReaderImpl.class);<span class="comment">//日记  </span></span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> ConfigurableApplicationContext applicationContext = <span class="keyword">null</span>;    </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> XmlBeanDefinitionReader beanDefinitionReader;  </span><br><span class="line">    <span class="comment">/*初始化方法*/</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        beanDefinitionReader = <span class="keyword">new</span> XmlBeanDefinitionReader((BeanDefinitionRegistry)  </span><br><span class="line">                applicationContext.getBeanFactory());    </span><br><span class="line">        beanDefinitionReader.setEntityResolver(<span class="keyword">new</span> ResourceEntityResolver(applicationContext));    </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;    </span><br><span class="line">        <span class="keyword">this</span>.applicationContext = (ConfigurableApplicationContext)applicationContext;    </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadBean</span><span class="params">(DynamicBean dynamicBean)</span></span>&#123;   </span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();  </span><br><span class="line">        String beanName = dynamicBean.getBeanName();  </span><br><span class="line">        <span class="keyword">if</span>(applicationContext.containsBean(beanName))&#123;  </span><br><span class="line">            logger.warn(<span class="string">"bean【"</span>+beanName+<span class="string">"】已经加载！"</span>);  </span><br><span class="line">            <span class="keyword">return</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        beanDefinitionReader.loadBeanDefinitions(<span class="keyword">new</span> DynamicResource(dynamicBean));  </span><br><span class="line">        logger.info(<span class="string">"初始化bean【"</span>+dynamicBean.getBeanName()+<span class="string">"】耗时"</span>+(System.currentTimeMillis()-startTime)+<span class="string">"毫秒。"</span>);  </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里利用ApplicationContextAware创建一个beanDefinitionReader，通过 beanDefinitionReader可以动态加载loadbean对象到application context中。beanDefinitionReader需要一个Resource对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicResource</span> <span class="keyword">implements</span> <span class="title">Resource</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> DynamicBean dynamicBean;  </span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicResource</span><span class="params">(DynamicBean dynamicBean)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.dynamicBean = dynamicBean;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/* (non-Javadoc) </span></span><br><span class="line"><span class="comment">     * @see org.springframework.core.io.InputStreamSource#getInputStream() </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> InputStream <span class="title">getInputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ByteArrayInputStream(dynamicBean.getXml().getBytes(<span class="string">"UTF-8"</span>));  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>DynamicBean的功能无非是组装bean的xml定义字符串：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 动态bean描述对象 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicBean</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">protected</span> String beanName;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DynamicBean</span><span class="params">(String beanName)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.beanName = beanName;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBeanName</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> beanName;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBeanName</span><span class="params">(String beanName)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.beanName = beanName;  </span><br><span class="line">    &#125;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 获取bean 的xml描述 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> String <span class="title">getBeanXml</span><span class="params">()</span></span>;  </span><br><span class="line">      </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 生成完整的xml字符串 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getXml</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        StringBuffer buf = <span class="keyword">new</span> StringBuffer();  </span><br><span class="line">        buf.append(<span class="string">"&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;"</span>)  </span><br><span class="line">            .append(<span class="string">"&lt;beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\""</span>)  </span><br><span class="line">            .append(<span class="string">"       xmlns:p=\"http://www.springframework.org/schema/p\" xmlns:aop=\"http://www.springframework.org/schema/aop\""</span>)  </span><br><span class="line">            .append(<span class="string">"       xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:jee=\"http://www.springframework.org/schema/jee\""</span>)  </span><br><span class="line">            .append(<span class="string">"       xmlns:tx=\"http://www.springframework.org/schema/tx\""</span>)  </span><br><span class="line">            .append(<span class="string">"       xsi:schemaLocation=\""</span>)  </span><br><span class="line">            .append(<span class="string">"           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd"</span>)  </span><br><span class="line">            .append(<span class="string">"           http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd"</span>)  </span><br><span class="line">            .append(<span class="string">"           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd"</span>)  </span><br><span class="line">            .append(<span class="string">"           http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-2.5.xsd"</span>)  </span><br><span class="line">            .append(<span class="string">"           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd\"&gt;"</span>)  </span><br><span class="line">            .append(getBeanXml())  </span><br><span class="line">            .append(<span class="string">"&lt;/beans&gt;"</span>);  </span><br><span class="line">        System.out.println(getBeanXml());</span><br><span class="line">        <span class="keyword">return</span> buf.toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceDynamicBean</span> <span class="keyword">extends</span> <span class="title">DynamicBean</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> String driverClassName;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> String url;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> String username;  </span><br><span class="line">      </span><br><span class="line">    <span class="keyword">private</span> String password;  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String preferredTestQuery;</span><br><span class="line">    <span class="keyword">private</span> String idleConnectionTestPeriod;</span><br><span class="line">    <span class="keyword">private</span> String testConnectionOnCheckout;</span><br><span class="line">    <span class="keyword">private</span> String testConnectionOnCheckin;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DataSourceDynamicBean</span><span class="params">(String beanName)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>(beanName);  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/* (non-Javadoc) </span></span><br><span class="line"><span class="comment">     * @see org.youi.common.bean.DynamicBean#getBeanXml() </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getBeanXml</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        StringBuffer xmlBuf = <span class="keyword">new</span> StringBuffer();  </span><br><span class="line">        </span><br><span class="line">        xmlBuf.append(<span class="string">"&lt;bean id=\""</span>).append(beanName).append(<span class="string">"\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\" destroy-method=\"close\"&gt;"</span>);</span><br><span class="line">        xmlBuf.append(<span class="string">"&lt;property name=\"driverClass\" value=\""</span>).append(driverClassName).append(<span class="string">"\" /&gt;"</span>);</span><br><span class="line">        xmlBuf.append(<span class="string">"&lt;property name=\"jdbcUrl\" value=\""</span>).append(url).append(<span class="string">"\"/&gt;"</span>);</span><br><span class="line">        xmlBuf.append(<span class="string">"&lt;property name=\"user\" value=\""</span>).append(username).append(<span class="string">"\"/&gt;"</span>);</span><br><span class="line">        xmlBuf.append(<span class="string">"&lt;property name=\"password\" value=\""</span>).append(password).append(<span class="string">"\" /&gt;"</span>);</span><br><span class="line">        xmlBuf.append(<span class="string">"&lt;property name=\"preferredTestQuery\" value=\""</span>).append(preferredTestQuery).append(<span class="string">"\"/&gt;"</span>);</span><br><span class="line">        xmlBuf.append(<span class="string">"&lt;property name=\"idleConnectionTestPeriod\" value=\""</span>).append(idleConnectionTestPeriod).append(<span class="string">"\"/&gt;"</span>);</span><br><span class="line">        xmlBuf.append(<span class="string">"&lt;property name=\"testConnectionOnCheckout\" value=\""</span>).append(testConnectionOnCheckout).append(<span class="string">"\"/&gt;"</span>);</span><br><span class="line">        xmlBuf.append(<span class="string">"&lt;property name=\"testConnectionOnCheckin\" value=\""</span>).append(testConnectionOnCheckin).append(<span class="string">"\"/&gt;"</span>);</span><br><span class="line">        xmlBuf.append(<span class="string">"&lt;/bean&gt;"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*xmlBuf.append("&lt;bean id=\""+beanName+"\" class=\"com.mchange.v2.c3p0.ComboPooledDataSource\" destroy-method=\"close\"")  </span></span><br><span class="line"><span class="comment">            .append(" p:driverClassName=\""+driverClassName+"\" ")  </span></span><br><span class="line"><span class="comment">            .append(" p:url=\""+url+"\"")</span></span><br><span class="line"><span class="comment">            .append(" p:username=\""+username+"\"")  </span></span><br><span class="line"><span class="comment">            .append(" p:password=\""+password+"\"/&gt;");*/</span>  </span><br><span class="line">        <span class="keyword">return</span> xmlBuf.toString();  </span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDriverClassName</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> driverClassName;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDriverClassName</span><span class="params">(String driverClassName)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.driverClassName = driverClassName;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> url;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.url = url;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> username;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.username = username;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> password;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.password = password;  </span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPreferredTestQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> preferredTestQuery;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPreferredTestQuery</span><span class="params">(String preferredTestQuery)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.preferredTestQuery = preferredTestQuery;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getIdleConnectionTestPeriod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> idleConnectionTestPeriod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdleConnectionTestPeriod</span><span class="params">(String idleConnectionTestPeriod)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.idleConnectionTestPeriod = idleConnectionTestPeriod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTestConnectionOnCheckout</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> testConnectionOnCheckout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTestConnectionOnCheckout</span><span class="params">(String testConnectionOnCheckout)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.testConnectionOnCheckout = testConnectionOnCheckout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTestConnectionOnCheckin</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> testConnectionOnCheckin;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTestConnectionOnCheckin</span><span class="params">(String testConnectionOnCheckin)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.testConnectionOnCheckin = testConnectionOnCheckin;</span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个数据源默认使用的是c3p0，你可以根据自己的喜好修改。<br>OK，这个故事从这里就到头了。</p><p>回到故事的开始，谁来使用这个dynamicBeanReader呢？答案是最开始看到的DynamicDataSource，思路是，我需要用这个reader动态修改这个faceDatasources中的datasource Map，这个Map刚开始可能是空的：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"cn.chinacti.crm.dynamicdatasource.DynamicDataSource"</span> <span class="attr">id</span>=<span class="string">"faceDataSource"</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"targetDataSources"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">map</span> <span class="attr">key-type</span>=<span class="string">"java.lang.String"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;entry value-ref="defaultLocalhost" key="crmDataSource"&gt;&lt;/entry&gt;   --&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dynamicBeanReader"</span> <span class="attr">ref</span>=<span class="string">"dynamicBeanReader"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultTargetDataSource"</span> <span class="attr">ref</span>=<span class="string">"crmDataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dbName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.common.dbName&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"port"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.common.port&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pwd"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.common.pwd&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"userName"</span> <span class="attr">value</span>=<span class="string">"$&#123;jdbc.common.user&#125;"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"preferredTestQuery"</span> <span class="attr">value</span>=<span class="string">"$&#123;preferredTestQuery&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span> <span class="attr">value</span>=<span class="string">"$&#123;idleConnectionTestPeriod&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testConnectionOnCheckout"</span> <span class="attr">value</span>=<span class="string">"$&#123;testConnectionOnCheckout&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testConnectionOnCheckin"</span> <span class="attr">value</span>=<span class="string">"$&#123;testConnectionOnCheckin&#125;"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>问题是AbstractRoutingDataSource貌似没有提供直接访问内置datasource map的功能，那么只能通过反射来搞了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicDataSource</span> <span class="keyword">extends</span> <span class="title">AbstractRoutingDataSource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Logger logger = Logger.getAnonymousLogger();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> DynamicBeanReader dynamicBeanReader;</span><br><span class="line"><span class="keyword">private</span> String dbName;</span><br><span class="line"><span class="keyword">private</span> String port;</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> String pwd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String preferredTestQuery;</span><br><span class="line">    <span class="keyword">private</span> String idleConnectionTestPeriod;</span><br><span class="line">    <span class="keyword">private</span> String testConnectionOnCheckout;</span><br><span class="line">    <span class="keyword">private</span> String testConnectionOnCheckin;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">determineCurrentLookupKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">String ip = <span class="keyword">null</span>;</span><br><span class="line">String dsName = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();</span><br><span class="line">ip = (String)request.getSession().getAttribute(<span class="string">"ip"</span>);</span><br><span class="line"><span class="keyword">if</span>(ip==<span class="keyword">null</span> )&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">dsName = createDSNameByIp(ip);</span><br><span class="line">ServletContext sc = request.getSession().getServletContext();</span><br><span class="line">DataSource ds = getByDSName(dsName,sc);</span><br><span class="line">logger.info(<span class="string">"get datasource by name :"</span>+ds);</span><br><span class="line">logger.info(<span class="string">"ip:"</span>+ip);</span><br><span class="line"><span class="keyword">if</span>(ds==<span class="keyword">null</span>)&#123;<span class="comment">//还没创建</span></span><br><span class="line">ds = createNewDataSource(ip, dbName, port, userName, pwd,sc);</span><br><span class="line">addToTargetDataSources(ds,dsName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">logger.info(e.getMessage());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dsName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addToTargetDataSources</span><span class="params">(DataSource ds, String dsName)</span> </span>&#123;</span><br><span class="line">Class clazz = AbstractRoutingDataSource.class;</span><br><span class="line">Field targetDataSourcesField;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">targetDataSourcesField = clazz.getDeclaredField(<span class="string">"resolvedDataSources"</span>);</span><br><span class="line">targetDataSourcesField.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Map&lt;Object,Object&gt; targetDataSources = (Map&lt;Object, Object&gt;) targetDataSourcesField.get(<span class="keyword">this</span>);</span><br><span class="line">targetDataSources.put(dsName, ds);</span><br><span class="line">targetDataSourcesField.set(<span class="keyword">this</span>, targetDataSources);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">logger.info(<span class="string">"修改resolvedDataSources时报错了"</span>);</span><br><span class="line">e.printStackTrace();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">logger.info(<span class="string">"add datasource to resolvedDataSources success."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Logger <span class="title">getParentLogger</span><span class="params">()</span> <span class="keyword">throws</span> SQLFeatureNotSupportedException </span>&#123;</span><br><span class="line"><span class="keyword">return</span> logger;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">Connection conn = <span class="keyword">super</span>.getConnection();</span><br><span class="line"><span class="keyword">return</span> conn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> DataSource <span class="title">createNewDataSource</span><span class="params">(String ip,String dbName,String port,String user,String pwd,ServletContext sc)</span></span>&#123;</span><br><span class="line">String beanName = createDSNameByIp(ip);</span><br><span class="line">DataSourceDynamicBean dataSourceDynamicBean = <span class="keyword">new</span> DataSourceDynamicBean(beanName);  </span><br><span class="line">        dataSourceDynamicBean.setDriverClassName(<span class="string">"com.mysql.jdbc.Driver"</span>);  </span><br><span class="line">        dataSourceDynamicBean.setUrl(<span class="string">"jdbc:mysql://"</span>+ip+<span class="string">":"</span>+port+<span class="string">"/"</span>+dbName+<span class="string">"?useUnicode=true&amp;characterEncoding=utf-8"</span>);  </span><br><span class="line">        dataSourceDynamicBean.setUsername(user);</span><br><span class="line">        dataSourceDynamicBean.setPassword(pwd);</span><br><span class="line">        </span><br><span class="line">        dataSourceDynamicBean.setPreferredTestQuery(<span class="keyword">this</span>.preferredTestQuery);</span><br><span class="line">        dataSourceDynamicBean.setIdleConnectionTestPeriod(<span class="keyword">this</span>.idleConnectionTestPeriod);</span><br><span class="line">        dataSourceDynamicBean.setTestConnectionOnCheckin(<span class="keyword">this</span>.testConnectionOnCheckin);</span><br><span class="line">        dataSourceDynamicBean.setTestConnectionOnCheckout(<span class="keyword">this</span>.testConnectionOnCheckout);</span><br><span class="line">        </span><br><span class="line">        dynamicBeanReader.loadBean(dataSourceDynamicBean);<span class="comment">//动态记载dataSource</span></span><br><span class="line">        logger.info(<span class="string">"create datasource:beanName="</span>+beanName+<span class="string">"ip="</span>+ip+<span class="string">""</span>);</span><br><span class="line">        <span class="keyword">return</span> (DataSource) getApplicationContext(sc).getBean(beanName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> String <span class="title">createDSNameByIp</span><span class="params">(String ip)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"ds"</span>+ip.replaceAll(<span class="string">"\\."</span>, <span class="string">""</span>) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> DataSource <span class="title">getByDSName</span><span class="params">(String dsName,ServletContext sc)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"><span class="keyword">return</span> (DataSource) getApplicationContext(sc).getBean(dsName);</span><br><span class="line">&#125;<span class="keyword">catch</span>(NoSuchBeanDefinitionException e)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> ApplicationContext <span class="title">getApplicationContext</span><span class="params">(ServletContext sc)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> WebApplicationContextUtils.getWebApplicationContext(sc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> DynamicBeanReader <span class="title">getDynamicBeanReader</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dynamicBeanReader;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDynamicBeanReader</span><span class="params">(DynamicBeanReader dynamicBeanReader)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dynamicBeanReader = dynamicBeanReader;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getDbName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> dbName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDbName</span><span class="params">(String dbName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.dbName = dbName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPort</span><span class="params">(String port)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.port = port;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userName = userName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPwd</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPwd</span><span class="params">(String pwd)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.pwd = pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPreferredTestQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> preferredTestQuery;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPreferredTestQuery</span><span class="params">(String preferredTestQuery)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.preferredTestQuery = preferredTestQuery;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getIdleConnectionTestPeriod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> idleConnectionTestPeriod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setIdleConnectionTestPeriod</span><span class="params">(String idleConnectionTestPeriod)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.idleConnectionTestPeriod = idleConnectionTestPeriod;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTestConnectionOnCheckout</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> testConnectionOnCheckout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTestConnectionOnCheckout</span><span class="params">(String testConnectionOnCheckout)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.testConnectionOnCheckout = testConnectionOnCheckout;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTestConnectionOnCheckin</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> testConnectionOnCheckin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTestConnectionOnCheckin</span><span class="params">(String testConnectionOnCheckin)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.testConnectionOnCheckin = testConnectionOnCheckin;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>原理很简单，AbstractRoutingDataSource本来只是提供了一个口子，说你来决定到底用哪个Key去查找我的Map中的数据源。结果呢，我在查找这个Key的途中，借机使用dynamicBeanReader新建了一个dataSource并成功放到了AbstractRoutingDataSource的datasouce map中（当然，先查查有没有，有就不用创建了）。之后，在返回给AbstractRoutingDataSource一个Key的同时，我确定一定能拿到我想要的dataSource了。 </strong></p><p><strong>遗留问题：</strong></p><p>在系统启动的时候，根本没有web环境，所以根据前台参数来决定用哪一个库无从谈起。并且faceDataSource必须有一个默认数据源，也就是在系统启动的时候，系统要求一定能从faceDataSource中拿到一个确切的数据源。否则就会抛出异常，这和本身的业务逻辑是相违背的。</p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-适配器(Adaper)模式</title>
      <link href="/2014/07/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8(Adaper)%E6%A8%A1%E5%BC%8F/"/>
      <url>/2014/07/28/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E9%80%82%E9%85%8D%E5%99%A8(Adaper)%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>适配器模式中分为类适配器和对象适配器。<br>类适配器<br>继承手头现在有的类，通过调用父类（现有类）的方法来实现客户端需要的接口。<br>客户端想要的接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oozinoz.simulation;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 火箭模拟</span></span><br><span class="line"><span class="comment"> * 这是一个客户端已经使用的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">RocketSim</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getMass</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getThrust</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setSimTime</span><span class="params">(<span class="keyword">double</span> t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>手头现有的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oozinoz.physical;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手头上已经有的火箭实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhysicalRocket</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> burnArea;</span><br><span class="line"><span class="keyword">double</span> burnRate;</span><br><span class="line"><span class="keyword">double</span> fuelMass;</span><br><span class="line"><span class="keyword">double</span> totalMass;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PhysicalRocket</span><span class="params">(<span class="keyword">double</span> burnArea, <span class="keyword">double</span> burnRate, <span class="keyword">double</span> fuelMass,<span class="keyword">double</span> totalMass)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.burnArea = burnArea;</span><br><span class="line"><span class="keyword">this</span>.burnRate = burnRate;</span><br><span class="line"><span class="keyword">this</span>.fuelMass = fuelMass;</span><br><span class="line"><span class="keyword">this</span>.totalMass = totalMass;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getBurnTime</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//一些具体实现...</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMass</span><span class="params">(<span class="keyword">double</span> t)</span></span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getThrust</span><span class="params">(<span class="keyword">double</span> t)</span></span>&#123;</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>d;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过继承的方式来适配：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oozinoz.firework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.oozinoz.physical.PhysicalRocket;</span><br><span class="line"><span class="keyword">import</span> com.oozinoz.simulation.RocketSim;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 适配器</span></span><br><span class="line"><span class="comment"> * 继承现有类，实现客户端接口，将现有实现包装（适配）成客户端想要调用的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OozinozRocket</span> <span class="keyword">extends</span> <span class="title">PhysicalRocket</span> <span class="keyword">implements</span> <span class="title">RocketSim</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> time;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OozinozRocket</span><span class="params">(<span class="keyword">double</span> burnArea, <span class="keyword">double</span> burnRate, <span class="keyword">double</span> fuelMass,<span class="keyword">double</span> totalMass)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(burnArea,burnRate,fuelMass,totalMass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMass</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getMass(time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getThrust</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> getThrust(time);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSimTime</span><span class="params">(<span class="keyword">double</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.time = t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对象适配器<br>对象适配器和类适配器不同的是，不通过继承的方式来调用现有的实现，而是通过包装一个现有类对象，调用这个对象的方法来使用现有的实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.oozinoz.simulation;</span><br><span class="line"><span class="keyword">import</span> com.oozinoz.physical.PhysicalRocket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OozinozRocket</span> <span class="keyword">implements</span> <span class="title">RocketSim</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> time;</span><br><span class="line"><span class="keyword">private</span> PhysicalRocket rocket;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OozinozRocket</span><span class="params">(<span class="keyword">double</span> burnArea, <span class="keyword">double</span> burnRate, <span class="keyword">double</span> fuelMass,<span class="keyword">double</span> totalMass)</span> </span>&#123;</span><br><span class="line">rocket = <span class="keyword">new</span> PhysicalRocket(burnArea, burnRate, fuelMass, totalMass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getMass</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rocket.getMass(time);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getThrust</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> rocket.getThrust(time);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSimTime</span><span class="params">(<span class="keyword">double</span> t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.time = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Java的IO流API是最好的适配器实现，适配器模式和装饰模式比较相似。适配器模式侧重于适配新的接口，而装饰模式则侧重于对已有对象的扩展。</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 适配器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate One to One</title>
      <link href="/2014/07/18/Hibernate-One-to-One/"/>
      <url>/2014/07/18/Hibernate-One-to-One/</url>
      
        <content type="html"><![CDATA[<p>之前一直用多对一，即使是一对一也转换成多对一方式解决。今天逃不了要用一对一还是费了点功夫才搞定。<br>多对一关联关系的配置上，在两边分配配置多对一和一对多就行了。但是一对一的时候，两边都是@OneToOne，那么这个外键究竟会放到哪个表里面呢？当然，在实际意义来说，放在哪个表里面都合理。但是在Hibernate的配置上就应该是确定在某一张表的。在JPA的官方文档中有这样的说明：</p><blockquote><p>mappedBy<br>public abstract java.lang.String mappedBy<br>(Optional) The field that owns the relationship. This element is only specified &gt;on the inverse (non-owning) side of the association.</p></blockquote><p>意思是说，哪一方是inverse就配置mappedBy就行了，这样，外键就产生在了非inverse一方对应的表里了。<br>以员工（Employee）和薪酬信息（SalaryInfo）为例说明，这里希望外键产生在薪酬信息表里面：<br>员工：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"core_employee"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> SalaryInfo salaryInfo;</span><br><span class="line"><span class="meta">@OneToOne</span>(mappedBy=<span class="string">"empNo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> SalaryInfo <span class="title">getSalaryInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> salaryInfo;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>薪酬信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table</span>(name = <span class="string">"sal_salary_info"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SalaryInfo</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Employee emp;</span><br><span class="line"><span class="meta">@OneToOne</span>(cascade=CascadeType.ALL,targetEntity=Employee.class)</span><br><span class="line"><span class="meta">@JoinColumn</span>(name = <span class="string">"emp_no"</span>, nullable = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">getEmp</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.emp;</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>另外，在Hibernate的Criteria的查询中，不支持复杂对象的比较，比如下面的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Criteria criteria = getSession().createCriteria(Employee.class);</span><br><span class="line">criteria.add(Restrictions.isNull(<span class="string">"salaryInfo"</span>));</span><br></pre></td></tr></table></figure></p><p>意图查询没有薪酬信息的员工，结果在执行查询的时候，将产生下面的语句：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> employee emp</span><br><span class="line"><span class="keyword">inner</span> <span class="keyword">join</span> salaryinfo s <span class="keyword">on</span> s.emp_no=emp.emp_no</span><br><span class="line"><span class="keyword">where</span> emp.emp_no <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure></p><p>很是奇怪为啥条件是emp.emp_no is null。应该写成下面的形式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Criteria criteria = getSession().createCriteria(Employee.class);</span><br><span class="line">criteria.add(Restrictions.isNotNull(<span class="string">"salaryInfo.id"</span>));</span><br></pre></td></tr></table></figure></p><p>除了isNotNull，其他的所有方法都是同样的道理，在进行复杂类型属性比较的时候需要点到里面的属性才会触发生成正确的sql查询条件。</p><p>上面的代码到现在这个时候还无法正确查询到结果。因为Criteria的默认表连接方式为inner join，这样的连接方式导致没有找到薪酬信息的员工记录也无法出现在查询结果中。需要显示声明表连接方式：</p><pre><code class="java">Criteria criteria = getSession().createCriteria(Employee.class);        criteria.add(Restrictions.isNotNull(<span class="string">"salaryInfo.id"</span>,JoinType.LEFT_OUTER_JOIN));</code></pre>]]></content>
      
      
      <categories>
          
          <category> Hibernate </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>队列用例：Josephus问题</title>
      <link href="/2014/05/24/%E9%98%9F%E5%88%97%E7%94%A8%E4%BE%8B-Josephus%E9%97%AE%E9%A2%98/"/>
      <url>/2014/05/24/%E9%98%9F%E5%88%97%E7%94%A8%E4%BE%8B-Josephus%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 据说著名犹太历史学家 Josephus有过以下的故事：</span></span><br><span class="line"><span class="comment"> * 在罗马人占领乔塔帕特後，39 个犹太人与Josephus及他的朋友躲到一个洞中，39个犹太人决定宁愿死也不要被人抓到，</span></span><br><span class="line"><span class="comment"> * 于是决定了一个自杀方式，41个人排成一个圆圈，由第1个人开始报数，每报数到第3人该人就必须自杀，然后再由下一个重新报数，</span></span><br><span class="line"><span class="comment"> * 直到所有人都自杀身亡为止。</span></span><br><span class="line"><span class="comment"> * 然而Josephus 和他的朋友并不想遵从，Josephus要他的朋友先假装遵从，他将朋友与自己安排在第16个与第31个位置，</span></span><br><span class="line"><span class="comment"> * 于是逃过了这场死亡游戏。</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JosephusProblem</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">41</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> M = <span class="number">3</span>;<span class="comment">//数到第N个时自杀</span></span><br><span class="line">Queue&lt;Integer&gt;q1 = <span class="keyword">new</span> LinkQueue&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;N;i++)&#123;</span><br><span class="line">q1.push(i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">kill(q1,M,<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> q 队列</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 数到第N个时自杀</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> i 本论自杀数数完毕之后数到了第几</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> level 第几轮</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">kill</span><span class="params">(Queue&lt;Integer&gt; q,<span class="keyword">int</span> n,<span class="keyword">int</span> i,<span class="keyword">int</span> level)</span></span>&#123;</span><br><span class="line">formatPrintln(q);</span><br><span class="line"><span class="keyword">if</span>(q.isEmpty() || q.size()==<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(q.size()==<span class="number">1</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"survivor:"</span>+q.pop());</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Queue&lt;Integer&gt; survivors = <span class="keyword">new</span> LinkQueue&lt;Integer&gt;();</span><br><span class="line"><span class="keyword">int</span> peopleIndex = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!q.isEmpty())&#123;</span><br><span class="line">peopleIndex = q.pop();</span><br><span class="line">i++;<span class="comment">//报数</span></span><br><span class="line"><span class="keyword">if</span>(i==n)&#123;</span><br><span class="line">formatPrint(<span class="string">"^"</span>);</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">survivors.push(peopleIndex);</span><br><span class="line">formatPrint();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>;x&lt;N;x++)&#123;</span><br><span class="line">System.out.print(<span class="string">"-----"</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">kill(survivors,n,i,++level);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">formatPrintln</span><span class="params">(Queue&lt;Integer&gt; q)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(Integer i : q)&#123;</span><br><span class="line">System.out.print(fullBlank(i+<span class="string">""</span>));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">formatPrint</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line">System.out.print(fullBlank(str));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">formatPrint</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.print(fullBlank(<span class="string">""</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">fullBlank</span><span class="params">(String str)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(str.length()&lt;<span class="number">5</span>)&#123;</span><br><span class="line">str = str+ (<span class="string">"     "</span>.substring(<span class="number">0</span>,<span class="number">5</span>-str.length()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">1    2    3    4    5    6    7    8    9    10   11   12   13   14   15   16   17   18   19   20   21   22   23   24   25   26   27   28   29   30   31   32   33   34   35   36   37   38   39   40   41   </span><br><span class="line">          ^              ^              ^              ^              ^              ^              ^              ^              ^              ^              ^              ^              ^              </span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">1    2    4    5    7    8    10   11   13   14   16   17   19   20   22   23   25   26   28   29   31   32   34   35   37   38   40   41   </span><br><span class="line">^              ^              ^              ^              ^              ^              ^              ^              ^              ^    </span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">2    4    7    8    11   13   16   17   20   22   25   26   29   31   34   35   38   40   </span><br><span class="line">          ^              ^              ^              ^              ^              ^    </span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">2    4    8    11   16   17   22   25   29   31   35   38   </span><br><span class="line">          ^              ^              ^              ^    </span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">2    4    11   16   22   25   31   35   </span><br><span class="line">          ^              ^              </span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">2    4    16   22   31   35   </span><br><span class="line">^              ^              </span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">4    16   31   35   </span><br><span class="line">^              ^    </span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">16   31   </span><br><span class="line">          </span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">16   31   </span><br><span class="line">^         </span><br><span class="line">-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------</span><br><span class="line">31   </span><br><span class="line">survivor:31</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于数组和链表的队列实现</title>
      <link href="/2014/05/18/%E5%9F%BA%E4%BA%8E%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0/"/>
      <url>/2014/05/18/%E5%9F%BA%E4%BA%8E%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>队列接口定义，和栈接口一样：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Queue</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加一个元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> item</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取最后一个添加的元素，并将其从队列中删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断队列是否为空</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取队列当前的元素个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>基于数组的实现，关键是如何resize：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mycode.algorithms.stack.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于数组的队列实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> imhuqiao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">Item</span>&gt;,<span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Item[] data = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> tail = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> head = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> initLength)</span></span>&#123;</span><br><span class="line">data = (Item[]) <span class="keyword">new</span> Object[initLength];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(size()==data.length)&#123;</span><br><span class="line">resize(data.length*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">data[++tail] = item;</span><br><span class="line"><span class="keyword">if</span>(head==-<span class="number">1</span>)&#123;</span><br><span class="line">head = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Item item = data[head];</span><br><span class="line">data[head] = <span class="keyword">null</span>;</span><br><span class="line">head++;</span><br><span class="line"><span class="keyword">if</span>(size() &gt; <span class="number">0</span> &amp;&amp; size() == data.length/<span class="number">4</span>) resize(data.length/<span class="number">2</span>);</span><br><span class="line">print();</span><br><span class="line">count--;</span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.print(<span class="string">"["</span>);</span><br><span class="line"><span class="keyword">for</span>(Item d : data)&#123;</span><br><span class="line">System.out.print(d+<span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"],tial="</span>+tail+<span class="string">",head="</span>+head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> size()==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ArrayStackIterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">Item[] newdata = (Item[]) <span class="keyword">new</span> Object[length];</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//System.out.println("resize from "+ size()+" to "+length);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head;i&lt;=tail;i++)&#123;</span><br><span class="line">newdata[x++] = data[i];</span><br><span class="line">data[i] = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">data = newdata;</span><br><span class="line">head = <span class="number">0</span>;</span><br><span class="line">tail = x==<span class="number">0</span> ? x : x-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayStackIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i = tail;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> j = head;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> i&gt;=j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Item result = data[j++];</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>基于链表的实现，原理和栈一致，只是多了一个记录尾部的变量，push的时候不是替换头而是接在尾巴上：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mycode.algorithms.stack.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于数组的队列实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> imhuqiao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">Item</span>&gt;,<span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Item[] data = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> tail = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> head = -<span class="number">1</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> initLength)</span></span>&#123;</span><br><span class="line">data = (Item[]) <span class="keyword">new</span> Object[initLength];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(size()==data.length)&#123;</span><br><span class="line">resize(data.length*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">data[++tail] = item;</span><br><span class="line"><span class="keyword">if</span>(head==-<span class="number">1</span>)&#123;</span><br><span class="line">head = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">count++;</span><br><span class="line">print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Item item = data[head];</span><br><span class="line">data[head] = <span class="keyword">null</span>;</span><br><span class="line">head++;</span><br><span class="line"><span class="keyword">if</span>(size() &gt; <span class="number">0</span> &amp;&amp; size() == data.length/<span class="number">4</span>) resize(data.length/<span class="number">2</span>);</span><br><span class="line">print();</span><br><span class="line">count--;</span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.print(<span class="string">"["</span>);</span><br><span class="line"><span class="keyword">for</span>(Item d : data)&#123;</span><br><span class="line">System.out.print(d+<span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"],tial="</span>+tail+<span class="string">",head="</span>+head);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> size()==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ArrayStackIterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">Item[] newdata = (Item[]) <span class="keyword">new</span> Object[length];</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//System.out.println("resize from "+ size()+" to "+length);</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = head;i&lt;=tail;i++)&#123;</span><br><span class="line">newdata[x++] = data[i];</span><br><span class="line">data[i] = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">data = newdata;</span><br><span class="line">head = <span class="number">0</span>;</span><br><span class="line">tail = x==<span class="number">0</span> ? x : x-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayStackIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i = tail;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> j = head;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> i&gt;=j;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Item result = data[j++];</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testArrayQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">Queue&lt;String&gt; as = <span class="keyword">new</span> ArrayQueue&lt;String&gt;(<span class="number">1</span>);</span><br><span class="line">as.push(<span class="string">"a"</span>);</span><br><span class="line">as.push(<span class="string">"b"</span>);</span><br><span class="line">as.push(<span class="string">"c"</span>);</span><br><span class="line">as.push(<span class="string">"d"</span>);</span><br><span class="line">    as.push(<span class="string">"e"</span>);</span><br><span class="line">Assert.assertEquals(<span class="string">"a"</span>,as.pop());</span><br><span class="line">Assert.assertEquals(<span class="string">"b"</span>,as.pop());</span><br><span class="line">String res = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(String str : as)&#123;</span><br><span class="line">res += str;</span><br><span class="line">&#125;</span><br><span class="line">Assert.assertEquals(<span class="string">"cde"</span>,res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLinkQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line">Queue&lt;String&gt; as = <span class="keyword">new</span> LinkQueue&lt;String&gt;();</span><br><span class="line">as.push(<span class="string">"a"</span>);</span><br><span class="line">as.push(<span class="string">"b"</span>);</span><br><span class="line">as.push(<span class="string">"c"</span>);</span><br><span class="line">as.push(<span class="string">"d"</span>);</span><br><span class="line">    as.push(<span class="string">"e"</span>);</span><br><span class="line">Assert.assertEquals(<span class="string">"a"</span>,as.pop());</span><br><span class="line">Assert.assertEquals(<span class="string">"b"</span>,as.pop());</span><br><span class="line">String res = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(String str : as)&#123;</span><br><span class="line">res += str;</span><br><span class="line">&#125;</span><br><span class="line">Assert.assertEquals(<span class="string">"cde"</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于数组和链表的栈实现</title>
      <link href="/2014/05/18/%E5%9F%BA%E4%BA%8E%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%A0%88%E5%AE%9E%E7%8E%B0/"/>
      <url>/2014/05/18/%E5%9F%BA%E4%BA%8E%E6%95%B0%E7%BB%84%E5%92%8C%E9%93%BE%E8%A1%A8%E7%9A%84%E6%A0%88%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>title: 基于数组和链表的栈实现 date: 2014-05-18 18:01 categories: 算法<br>tags: 栈<br>栈接口定义：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Stack</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 添加一个元素</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> item</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取最后一个添加的元素，并将其从栈中删除</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断栈是否为空</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取栈当前的元素个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>基于数组的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mycode.algorithms.stack.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于数组的栈实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> imhuqiao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayStack</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Stack</span>&lt;<span class="title">Item</span>&gt;,<span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Item[] data = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> pos = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayStack</span><span class="params">(<span class="keyword">int</span> initLength)</span></span>&#123;</span><br><span class="line">data = (Item[]) <span class="keyword">new</span> Object[initLength];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">pos++;</span><br><span class="line"><span class="keyword">if</span>(pos==data.length)&#123;</span><br><span class="line">resize(data.length*<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line">data[pos] = item;</span><br><span class="line"><span class="comment">//print();</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">System.out.print(<span class="string">"["</span>);</span><br><span class="line"><span class="keyword">for</span>(Item d : data)&#123;</span><br><span class="line">System.out.print(d+<span class="string">","</span>);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"],pos="</span>+pos);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(isEmpty())&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">Item item = data[pos];</span><br><span class="line">data[pos] = <span class="keyword">null</span>;</span><br><span class="line">pos--;</span><br><span class="line"><span class="keyword">if</span>(pos &gt; <span class="number">0</span> &amp;&amp; pos == data.length/<span class="number">4</span>) resize(data.length/<span class="number">2</span>);</span><br><span class="line"><span class="comment">//print();</span></span><br><span class="line"><span class="keyword">return</span> item;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> pos==-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> pos+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> ArrayStackIterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> length)</span></span>&#123;</span><br><span class="line">Item[] newdata = (Item[]) <span class="keyword">new</span> Object[length];</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(Item item : data)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&lt;length)&#123;</span><br><span class="line">newdata[i] = data[i];</span><br><span class="line">data[i] = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">data = newdata;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ArrayStackIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> i = pos;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> i&gt;-<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Item result = data[i--];</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>基于链表的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mycode.algorithms.stack.Stack;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于链表的栈实现</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;Item&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkStack</span>&lt;<span class="title">Item</span>&gt; <span class="keyword">implements</span> <span class="title">Stack</span>&lt;<span class="title">Item</span>&gt;, <span class="title">Iterable</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node&lt;Item&gt; head;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">head = <span class="keyword">new</span> Node&lt;Item&gt;();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;Item&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> LinkStackIterator();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">Node&lt;Item&gt; newNode = <span class="keyword">new</span> Node&lt;Item&gt;();</span><br><span class="line">newNode.data = item;</span><br><span class="line">newNode.next = head;</span><br><span class="line">head = newNode;</span><br><span class="line">count++;</span><br><span class="line">print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Item data = head.data;</span><br><span class="line">head = head.next;</span><br><span class="line">count--;</span><br><span class="line">print();</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">Node&lt;Item&gt; node = head;</span><br><span class="line">System.out.print(<span class="string">"["</span>);</span><br><span class="line"><span class="keyword">while</span>(node.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">System.out.print(node.data+<span class="string">","</span>);</span><br><span class="line">node = node.next;</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"]"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"><span class="keyword">public</span> T data;</span><br><span class="line"><span class="keyword">public</span> Node&lt;T&gt; next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkStackIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">Item</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Node&lt;Item&gt; theHead;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> theCount;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">LinkStackIterator</span><span class="params">()</span></span>&#123;</span><br><span class="line">theHead =  <span class="keyword">new</span> Node&lt;Item&gt;();</span><br><span class="line">theHead = head;</span><br><span class="line">theHead.next = head.next;</span><br><span class="line"><span class="keyword">this</span>.theCount = count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> theCount&gt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Item <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Item data = theHead.data;</span><br><span class="line">theHead = theHead.next;</span><br><span class="line">theCount--;</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testArrayStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">Stack&lt;String&gt; as = <span class="keyword">new</span> ArrayStack&lt;String&gt;(<span class="number">1</span>);</span><br><span class="line">as.push(<span class="string">"a"</span>);</span><br><span class="line">as.push(<span class="string">"b"</span>);</span><br><span class="line">as.push(<span class="string">"c"</span>);</span><br><span class="line">Assert.assertEquals(<span class="string">"c"</span>,as.pop());</span><br><span class="line">String res = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(String str : as)&#123;</span><br><span class="line">res += str;</span><br><span class="line">&#125;</span><br><span class="line">Assert.assertEquals(<span class="string">"ba"</span>,res);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testLinkStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">Stack&lt;String&gt; ls = <span class="keyword">new</span> LinkStack&lt;String&gt;();</span><br><span class="line">ls.push(<span class="string">"a"</span>);</span><br><span class="line">ls.push(<span class="string">"b"</span>);</span><br><span class="line">ls.push(<span class="string">"c"</span>);</span><br><span class="line">Assert.assertEquals(<span class="string">"c"</span>,ls.pop());</span><br><span class="line">String res = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span>(String str : ls)&#123;</span><br><span class="line">res += str;</span><br><span class="line">&#125;</span><br><span class="line">Assert.assertEquals(<span class="string">"ba"</span>,res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>利用栈实现简单算术表达式求值</title>
      <link href="/2014/05/18/%E5%88%A9%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%AE%97%E6%9C%AF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
      <url>/2014/05/18/%E5%88%A9%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%AE%97%E6%9C%AF%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<p>代码利用栈来实现算术表达式的求值功能，仅用于举例说明栈的用例，没有考虑运算符的优先级，并且要求表达式的各个部分必须用空格分隔：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mycode.algorithms.stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Evaluate</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> Stack&lt;String&gt; ops = <span class="keyword">new</span> Stack&lt;String&gt;();</span><br><span class="line"><span class="keyword">static</span> Stack&lt;Double&gt; params = <span class="keyword">new</span> Stack&lt;Double&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> Map&lt;String,String&gt; VALIDATE_OPS = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">VALIDATE_OPS.put(<span class="string">"+"</span>, <span class="string">"+"</span>);</span><br><span class="line">VALIDATE_OPS.put(<span class="string">"-"</span>, <span class="string">"-"</span>);</span><br><span class="line">VALIDATE_OPS.put(<span class="string">"*"</span>, <span class="string">"*"</span>);</span><br><span class="line">VALIDATE_OPS.put(<span class="string">"/"</span>, <span class="string">"/"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">System.out.println(calcute(<span class="string">"( 5 + ( 3 * ( 4 + 5 ) ) + 100 )"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">ops.clear();</span><br><span class="line">params.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isOps</span><span class="params">(String symbol)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> VALIDATE_OPS.get(symbol)!=<span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">calcuteValue</span><span class="params">(String symbol,Double v1,Double v2)</span></span>&#123;</span><br><span class="line">String op = VALIDATE_OPS.get(symbol);</span><br><span class="line"><span class="keyword">if</span>(op.equals(<span class="string">"+"</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> v1 + v2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op.equals(<span class="string">"-"</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> v1 -v2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op.equals(<span class="string">"*"</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> v1 * v2;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(op.equals(<span class="string">"/"</span>))&#123;</span><br><span class="line"><span class="keyword">return</span> v1 / v2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"not supported operation:"</span>+op);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Double <span class="title">calcute</span><span class="params">(String expression)</span></span>&#123;</span><br><span class="line">clear();</span><br><span class="line"><span class="keyword">for</span>(String symbol : expression.split(<span class="string">" "</span>))&#123;</span><br><span class="line"><span class="keyword">if</span>(symbol.trim().equals(<span class="string">""</span>) || symbol.equals(<span class="string">"("</span>)) <span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(isOps(symbol))&#123;</span><br><span class="line">ops.add(symbol);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(symbol.equals(<span class="string">")"</span>))&#123;</span><br><span class="line">params.add(calcuteValue(ops.pop(), params.pop(), params.pop()));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">params.add(Double.valueOf(symbol));</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(params);</span><br><span class="line">System.out.println(ops);</span><br><span class="line">System.out.println(<span class="string">"===================="</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(!ops.isEmpty())&#123;</span><br><span class="line">params.add(calcuteValue(ops.pop(), params.pop(), params.pop()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> params.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[5.0]</span><br><span class="line">[]</span><br><span class="line">====================</span><br><span class="line">[5.0]</span><br><span class="line">[+]</span><br><span class="line">====================</span><br><span class="line">[5.0, 3.0]</span><br><span class="line">[+]</span><br><span class="line">====================</span><br><span class="line">[5.0, 3.0]</span><br><span class="line">[+, *]</span><br><span class="line">====================</span><br><span class="line">[5.0, 3.0, 4.0]</span><br><span class="line">[+, *]</span><br><span class="line">====================</span><br><span class="line">[5.0, 3.0, 4.0]</span><br><span class="line">[+, *, +]</span><br><span class="line">====================</span><br><span class="line">[5.0, 3.0, 4.0, 5.0]</span><br><span class="line">[+, *, +]</span><br><span class="line">====================</span><br><span class="line">[5.0, 3.0, 9.0]</span><br><span class="line">[+, *]</span><br><span class="line">====================</span><br><span class="line">[5.0, 27.0]</span><br><span class="line">[+]</span><br><span class="line">====================</span><br><span class="line">[5.0, 27.0]</span><br><span class="line">[+, +]</span><br><span class="line">====================</span><br><span class="line">[5.0, 27.0, 100.0]</span><br><span class="line">[+, +]</span><br><span class="line">====================</span><br><span class="line">[5.0, 127.0]</span><br><span class="line">[+]</span><br><span class="line">====================</span><br><span class="line">132.0</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Activiti工作流实践</title>
      <link href="/2014/04/24/Activiti%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AE%9E%E8%B7%B5/"/>
      <url>/2014/04/24/Activiti%E5%B7%A5%E4%BD%9C%E6%B5%81%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>首先，配置processEngineConfiguration：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.SpringProcessEngineConfiguration"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"transactionManager"</span> <span class="attr">ref</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"databaseSchemaUpdate"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jobExecutorActivate"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;property name="history" value="full"/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processDefinitionCacheLimit"</span> <span class="attr">value</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- UUID作为主键生成策略</span></span><br><span class="line"><span class="comment">    &lt;property name="idGenerator" ref="uuidGenerator" /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 生成流程图的字体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"activityFontName"</span> <span class="attr">value</span>=<span class="string">"$&#123;diagram.activityFontName&#125;"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"labelFontName"</span> <span class="attr">value</span>=<span class="string">"$&#123;diagram.labelFontName&#125;"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 缓存支持</span></span><br><span class="line"><span class="comment">    &lt;property name="processDefinitionCache"&gt;</span></span><br><span class="line"><span class="comment">        &lt;bean class="me.kafeitu.demo.activiti.util.cache.DistributedCache" /&gt;</span></span><br><span class="line"><span class="comment">    &lt;/property&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动部署 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"deploymentResources"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath*:/deployments/*<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自定义表单字段类型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"customFormTypes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"me.kafeitu.demo.activiti.activiti.form.UsersFormType"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- JPA --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaEntityManagerFactory"</span> <span class="attr">ref</span>=<span class="string">"entityManagerFactory"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaHandleTransaction"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"jpaCloseEntityManager"</span> <span class="attr">value</span>=<span class="string">"false"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 全局事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"typedEventListeners"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">"VARIABLE_CREATED"</span> &gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"variableCreateListener"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后，根据这个配置来生成流程引擎：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"processEngine"</span> <span class="attr">class</span>=<span class="string">"org.activiti.spring.ProcessEngineFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"processEngineConfiguration"</span> <span class="attr">ref</span>=<span class="string">"processEngineConfiguration"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后，通过流程引擎获取关于仓库、运行、表单、身份认证、任务、历史等相关操作服务：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"repositoryService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getRepositoryService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"runtimeService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getRuntimeService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"formService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getFormService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"identityService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getIdentityService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"taskService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getTaskService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"historyService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getHistoryService"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"managementService"</span> <span class="attr">factory-bean</span>=<span class="string">"processEngine"</span> <span class="attr">factory-method</span>=<span class="string">"getManagementService"</span>/&gt;</span></span><br></pre></td></tr></table></figure><h1 id="流程定义"><a href="#流程定义" class="headerlink" title="流程定义"></a>流程定义</h1><h2 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h2><p>最多的部署方式为上传流程定义文件来部署，RepositoryService中提供了多种部署方式，其中包括从输入流、classpath资源文件等方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> String fileName = file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    InputStream fileInputStream = file.getInputStream();</span><br><span class="line">    Deployment deployment = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    String extension = FilenameUtils.getExtension(fileName);</span><br><span class="line">    <span class="keyword">if</span> (extension.equals(<span class="string">"zip"</span>) || extension.equals(<span class="string">"bar"</span>)) &#123;</span><br><span class="line">        ZipInputStream zip = <span class="keyword">new</span> ZipInputStream(fileInputStream);</span><br><span class="line">        deployment = repositoryService.createDeployment().addZipInputStream(zip).deploy();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        deployment = repositoryService.createDeployment().addInputStream(fileName, fileInputStream).deploy();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><p>Activityti提供链式api来进行查询操作，支持分页查询。一个对一个流程定义部署多次，会产生一个流程定义的多个版本而不是多个流程定义。可以看成流程定义和部署之间存在一对多的关联关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Object[]&gt; objects = <span class="keyword">new</span> ArrayList&lt;Object[]&gt;();</span><br><span class="line">Page&lt;Object[]&gt; page = <span class="keyword">new</span> Page&lt;Object[]&gt;(PageUtil.PAGE_SIZE);</span><br><span class="line"><span class="keyword">int</span>[] pageParams = PageUtil.init(page, request);</span><br><span class="line">ProcessDefinitionQuery processDefinitionQuery = repositoryService.createProcessDefinitionQuery().orderByDeploymentId().desc();</span><br><span class="line">List&lt;ProcessDefinition&gt; processDefinitionList = processDefinitionQuery.listPage(pageParams[<span class="number">0</span>], pageParams[<span class="number">1</span>]);</span><br><span class="line"><span class="keyword">for</span> (ProcessDefinition processDefinition : processDefinitionList) &#123;</span><br><span class="line">    String deploymentId = processDefinition.getDeploymentId();</span><br><span class="line">    <span class="comment">//Deployment deployment = repositoryService.createDeploymentQuery().deploymentId(deploymentId).singleResult();</span></span><br><span class="line">    <span class="comment">//objects.add(new Object[]&#123;processDefinition, deployment&#125;);</span></span><br><span class="line">    <span class="keyword">for</span>(Deployment dep : repositoryService.createDeploymentQuery().deploymentId(deploymentId).list())&#123;</span><br><span class="line">    objects.add(<span class="keyword">new</span> Object[]&#123;processDefinition, dep&#125;);</span><br><span class="line">    System.out.println(deploymentId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">repositoryService.deleteDeployment(deploymentId, <span class="keyword">true</span>);</span><br></pre></td></tr></table></figure><p>第二个参数为true时表示级联删除流程实例、历史记录和任务。也可以通过deleteDeploymentCascade（deploymentId）来级联删除。</p><h2 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h2><p>可以使用RuntimeService来启动一个流程实例，启动流程实例的方式有很多种，主要涉及到</p><p>processDefinitionId：流行定义id</p><p>processDefinitionKey：流程定义关键字</p><p>businessKey：业务关键字</p><p>variables(Map)：流程变量</p><p>tenantId：</p><p>message：</p><p>你可以根据不同的情况尝试组合使用上面的信息来启动一个流程实例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 启动流程</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> entity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> ProcessInstance <span class="title">startWorkflow</span><span class="params">(Leave entity, Map&lt;String, Object&gt; variables)</span> </span>&#123;</span><br><span class="line">    leaveManager.saveLeave(entity);</span><br><span class="line">    String businessKey = entity.getId().toString();</span><br><span class="line">    ProcessInstance processInstance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        identityService.setAuthenticatedUserId(entity.getUserId());</span><br><span class="line">        processInstance = runtimeService.startProcessInstanceByKey(<span class="string">"leave"</span>, businessKey, variables);</span><br><span class="line">        String processInstanceId = processInstance.getId();</span><br><span class="line">        entity.setProcessInstanceId(processInstanceId);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        identityService.setAuthenticatedUserId(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> processInstance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>事实上，一个流程启动之后，流程当中并不关心实际的业务内容，而是人为地将这些业务变量放到了流程实例的”存储空间“当中，比如这里的businessKey和variables。真正当流程实例跑起来的时候，它也不关心具体的业务内容，这种关心被挪到了流程定义当中，而流程定义是用户来做的，从而将流程的运行和具体业务解耦出来。</p><h2 id="待我处理"><a href="#待我处理" class="headerlink" title="待我处理"></a>待我处理</h2><p>TaskService提供了这样的查询API来查询与我相关的任务。TaskQuery中有多种方式来确定任务的所有者：</p><p>和其他丰富的限制条件，这些任务查询出来之后，还需要与具体的业务对象关联，这样，在更上一层的处理上面对的只是业务对象，而不是工作流中的Task。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Leave&gt; <span class="title">findTodoTasks</span><span class="params">(String userId, Page&lt;Leave&gt; page, <span class="keyword">int</span>[] pageParams)</span> </span>&#123;</span><br><span class="line">    List&lt;Leave&gt; results = <span class="keyword">new</span> ArrayList&lt;Leave&gt;();</span><br><span class="line">    List&lt;Task&gt; tasks = <span class="keyword">new</span> ArrayList&lt;Task&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据当前人的ID查询</span></span><br><span class="line">    TaskQuery todoQuery = taskService.createTaskQuery().processDefinitionKey(<span class="string">"leave"</span>).taskAssignee(userId).active().orderByTaskId().desc()</span><br><span class="line">            .orderByTaskCreateTime().desc();</span><br><span class="line">    List&lt;Task&gt; todoList = todoQuery.listPage(pageParams[<span class="number">0</span>], pageParams[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据当前人未签收的任务</span></span><br><span class="line">    TaskQuery claimQuery = taskService.createTaskQuery().processDefinitionKey(<span class="string">"leave"</span>).taskCandidateUser(userId).active().orderByTaskId().desc()</span><br><span class="line">            .orderByTaskCreateTime().desc();</span><br><span class="line">    List&lt;Task&gt; unsignedTasks = claimQuery.listPage(pageParams[<span class="number">0</span>], pageParams[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 合并</span></span><br><span class="line">    tasks.addAll(todoList);</span><br><span class="line">    tasks.addAll(unsignedTasks);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据流程的业务ID查询实体并关联</span></span><br><span class="line">    <span class="keyword">for</span> (Task task : tasks) &#123;</span><br><span class="line">        String processInstanceId = task.getProcessInstanceId();</span><br><span class="line">        ProcessInstance processInstance = runtimeService.createProcessInstanceQuery().processInstanceId(processInstanceId).active().singleResult();</span><br><span class="line">        String businessKey = processInstance.getBusinessKey();</span><br><span class="line">        <span class="keyword">if</span> (businessKey == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Leave leave = leaveManager.getLeave(<span class="keyword">new</span> Long(businessKey));</span><br><span class="line">        leave.setTask(task);</span><br><span class="line">        leave.setProcessInstance(processInstance);</span><br><span class="line">        leave.setProcessDefinition(getProcessDefinition(processInstance.getProcessDefinitionId()));</span><br><span class="line">        results.add(leave);</span><br><span class="line">    &#125;</span><br><span class="line">    page.setTotalCount(todoQuery.count() + claimQuery.count());</span><br><span class="line">    page.setResult(results);</span><br><span class="line">    <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="任务签收"><a href="#任务签收" class="headerlink" title="任务签收"></a>任务签收</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">claim</span><span class="params">(String taskId, String userId)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="任务处理"><a href="#任务处理" class="headerlink" title="任务处理"></a>任务处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">taskService.complete(taskId, variables);</span><br></pre></td></tr></table></figure><p>##　动态表单</p><p>在之前的请假流程当中，可能因为我们对请假有比较特殊的，所以请假的核心对象Leave是由我们自己管理的，我们自己搞了个库来存放请假过程中的相关表单数据。但是更为通用和灵活的工作流，表单的内容应该是动态定义出来的，而不是事先由程序写好的。只有这样才能体现工作流引擎的最终目的。有了动态表单，每个节点上，有哪些字段、字段类型是什么、默认值、是否可见、是否可修改、是否必填等信息就可以动态定义了。</p><h2 id="流程定义XML："><a href="#流程定义XML：" class="headerlink" title="流程定义XML："></a>流程定义XML：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">process</span> <span class="attr">id</span>=<span class="string">"leave-dynamic-from"</span> <span class="attr">name</span>=<span class="string">"请假流程-动态表单"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">documentation</span>&gt;</span>请假流程演示-动态表单<span class="tag">&lt;/<span class="name">documentation</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">startEvent</span> <span class="attr">id</span>=<span class="string">"startevent1"</span> <span class="attr">name</span>=<span class="string">"Start"</span> <span class="attr">activiti:initiator</span>=<span class="string">"applyUserId"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"startDate"</span> <span class="attr">name</span>=<span class="string">"请假开始日期"</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">datePattern</span>=<span class="string">"yyyy-MM-dd"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">readable</span>=<span class="string">"true"</span> <span class="attr">writable</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"endDate"</span> <span class="attr">name</span>=<span class="string">"请假结束日期"</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">datePattern</span>=<span class="string">"yyyy-MM-dd"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">readable</span>=<span class="string">"true"</span> <span class="attr">writable</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"reason"</span> <span class="attr">name</span>=<span class="string">"请假原因"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">readable</span>=<span class="string">"true"</span> <span class="attr">writable</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">startEvent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">userTask</span> <span class="attr">id</span>=<span class="string">"deptLeaderAudit"</span> <span class="attr">name</span>=<span class="string">"部门领导审批"</span> <span class="attr">activiti:candidateGroups</span>=<span class="string">"deptLeader"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">extensionElements</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"startDate"</span> <span class="attr">name</span>=<span class="string">"请假开始日期"</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">value</span>=<span class="string">"$&#123;startDate&#125;"</span> <span class="attr">datePattern</span>=<span class="string">"yyyy-MM-dd"</span> <span class="attr">readable</span>=<span class="string">"true"</span> <span class="attr">writable</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"endDate"</span> <span class="attr">name</span>=<span class="string">"请假结束日期"</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">value</span>=<span class="string">"$&#123;endDAte&#125;"</span> <span class="attr">datePattern</span>=<span class="string">"yyyy-MM-dd"</span> <span class="attr">readable</span>=<span class="string">"true"</span> <span class="attr">writable</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"reason"</span> <span class="attr">name</span>=<span class="string">"请假原因"</span> <span class="attr">type</span>=<span class="string">"string"</span> <span class="attr">value</span>=<span class="string">"$&#123;reason&#125;"</span> <span class="attr">readable</span>=<span class="string">"true"</span> <span class="attr">writable</span>=<span class="string">"false"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activiti:formProperty</span> <span class="attr">id</span>=<span class="string">"deptLeaderPass"</span> <span class="attr">name</span>=<span class="string">"审批意见"</span> <span class="attr">type</span>=<span class="string">"enum"</span> <span class="attr">required</span>=<span class="string">"true"</span> <span class="attr">writable</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activiti:value</span> <span class="attr">id</span>=<span class="string">"true"</span> <span class="attr">name</span>=<span class="string">"同意"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activiti:value</span> <span class="attr">id</span>=<span class="string">"false"</span> <span class="attr">name</span>=<span class="string">"不同意"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activiti:formProperty</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">extensionElements</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">userTask</span>&gt;</span></span><br><span class="line">[......]</span><br></pre></td></tr></table></figure><blockquote><p><strong>疑问</strong>：这些动态表单字段的定义信息保存在哪儿的？</p></blockquote><h2 id="表单渲染"><a href="#表单渲染" class="headerlink" title="表单渲染"></a>表单渲染</h2><p>FormService中提供了按照processDefinitionId或者taskId来获取对应表单数据的方法：</p><p>获取到表单数据之后，还能对其中每一项，根据其不同的数据类型进行处理，比如下面的代码中，对枚举类型的数据进行了整理，统一存放到了一个Map中，以供页面使用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; result = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">StartFormDataImpl startFormData = (StartFormDataImpl) formService.getStartFormData(processDefinitionId);</span><br><span class="line">startFormData.setProcessDefinition(<span class="keyword">null</span>);</span><br><span class="line">List&lt;FormProperty&gt; formProperties = startFormData.getFormProperties();</span><br><span class="line"><span class="keyword">for</span> (FormProperty formProperty : formProperties) &#123;</span><br><span class="line">    Map&lt;String, String&gt; values = (Map&lt;String, String&gt;) formProperty.getType().getInformation(<span class="string">"values"</span>);</span><br><span class="line">    <span class="keyword">if</span> (values != <span class="keyword">null</span>) &#123;</span><br><span class="line">        result.put(<span class="string">"enum_"</span> + formProperty.getId(), values);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">result.put(<span class="string">"form"</span>, startFormData);</span><br></pre></td></tr></table></figure><p>前台页面对于这样的数据及其类型（单行文本、多行文本域、下拉选择、日期、数字等等）动态生成一个表单。</p><h2 id="表单数据搜集与存储"><a href="#表单数据搜集与存储" class="headerlink" title="表单数据搜集与存储"></a>表单数据搜集与存储</h2><p>这个也没没有社么特别的了，根据上一节中渲染出来的表单，填写数据，然后提交数据到后台即可了。关键是表单数据如何与流程引擎关联起来？很简单，因为我们之间渲染动态表单的时候其中所有字段的name都是按照表单定义来的，所以只要通过request.getParameterMap()，将这个参数键值对送给FormService就可以了，根本不用做其他多余的处理，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String&gt; formProperties = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">Set&lt;Entry&lt;String, String[]&gt;&gt; entrySet = parameterMap.entrySet();</span><br><span class="line"><span class="keyword">for</span> (Entry&lt;String, String[]&gt; entry : entrySet) &#123;</span><br><span class="line">    String key = entry.getKey();</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.defaultString(key).startsWith(<span class="string">"fp_"</span>)) &#123;</span><br><span class="line">        formProperties.put(key.split(<span class="string">"_"</span>)[<span class="number">1</span>], entry.getValue()[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">User user = UserUtil.getUserFromSession(request.getSession());</span><br><span class="line">ProcessInstance processInstance = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    identityService.setAuthenticatedUserId(user.getId());</span><br><span class="line">    processInstance = formService.submitStartFormData(processDefinitionId, formProperties);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    identityService.setAuthenticatedUserId(<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面的代码对于parameterMap还是稍微做了一点处理，这是因为前台页面中对于动态表单字段的的name都统一增加了fp_，这里要过滤只带有fp_的name值。从而起到一个过滤杂质，避免将其他没用的数据传递给FormService。</p><p>这些数据最终被存放到哪里了呢？答案是数据库表ACT_RU_VARIABLE，没错，就是流程标量表中，和相对于动态表单的静态表单而言，动态表单唯一不同的是，动态表单把业务相关的数据也当成流程变量存放起来了，而静态表单是使用自己的表来存放业务数据。</p>]]></content>
      
      
      <categories>
          
          <category> 工作流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Activiti </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JSTL</title>
      <link href="/2014/04/24/JSTL/"/>
      <url>/2014/04/24/JSTL/</url>
      
        <content type="html"><![CDATA[<p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; font-size: 14px; vertical-align: baseline; clear: both; font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; line-height: 17.804800033569336px;"> JSTL(JSP标准标签库) 是一套基于JSP的标准标签库，可以用它来控制JSP页面中的流程、<a target="_blank" href="http://docs.oracle.com/javaee/5/jstl/1.1/docs/tlddocs/fmt/tld-summary.html">格式化数字和日期和国际化</a>，另外还有一些实用的EL函数。.</p><br><p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; font-size: 14px; vertical-align: baseline; clear: both; font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; line-height: 17.804800033569336px;"> JSTL还提供了SQL和XML标签，来在JSP中执行SQL和解析XML，但在实际使用当中不建议在JSP中使用这些功能，这些功能一般应该在一个真正的Java类和Servlet中来做。</p><br><p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; font-size: 14px; vertical-align: baseline; clear: both; font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; line-height: 17.804800033569336px;"> JSTL是Java EE的一部分，并已经包含在了大多数 (但不是所有) servlet容器中。通过<code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: pre-wrap;"><a href="http://java.sun.som/jsp/jstl/" target="_blank" rel="noopener">http://java.sun.som/jsp/jstl/</a>*</code>可以引入JSTL标签. 请不要将JSTL标签和自定义JSP标签(你自己在<code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: pre-wrap;">.tld</code>文件中定义的)搞混了. JSTL 和其他第三方标签也不一样，例如 JSF、 Spring MVC、 Struts、 Displaytag、 etcetera、 JSTL.。更别和<a target="_blank" style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent; color: rgb(74,107,130); text-decoration: none;" href="http://stackoverflow.com/tags/el/info">EL</a>表达式混淆。</p><br><h3 style="margin: 0px 0px 1em; padding: 0px; border: 0px; font-size: 15px; vertical-align: baseline; font-family: 'Trebuchet MS','Liberation Sans','DejaVu Sans',sans-serif; line-height: 1.3;"> JSTL版本</h3><br><p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; font-size: 14px; vertical-align: baseline; clear: both; font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; line-height: 17.804800033569336px;"> JSTL 有以下几种不同的版本：</p><br><ul style="margin: 0px 0px 1em 30px; padding: 0px; border: 0px; font-size: 14px; vertical-align: baseline; line-height: 17.804800033569336px;"><br> <li style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;"> <p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; vertical-align: baseline; clear: both;"> <span style="font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;">1.0</span><span style="font-family: Arial,Liberation Sans,DejaVu Sans,sans-serif;">: 由</span><code style="font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; background-color: rgb(238,238,238); margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; white-space: pre-wrap;">jstl.jar</code><span style="font-family: Arial,Liberation Sans,DejaVu Sans,sans-serif;">(API接口)和</span><code style="font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; background-color: rgb(238,238,238); margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; white-space: pre-wrap;">standard.jar</code><span style="font-family: Arial,Liberation Sans,DejaVu Sans,sans-serif;">(实现)两个文件组成. 标签引入的URI中不包含</span><code style="font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; background-color: rgb(238,238,238); margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; white-space: pre-wrap;">/jsp</code><span style="font-family: Arial,Liberation Sans,DejaVu Sans,sans-serif;">，例如</span><code style="font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; background-color: rgb(238,238,238); margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; white-space: pre-wrap;"><a href="http://java.sun.com/jstl/core" target="_blank" rel="noopener">http://java.sun.com/jstl/core</a></code><span style="font-family: Arial,Liberation Sans,DejaVu Sans,sans-serif;">，原型版本中还带有名称后缀</span><code style="font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; background-color: rgb(238,238,238); margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; white-space: pre-wrap;">_rt</code><code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(255,255,255);"><span style="font-family: Arial,Liberation Sans,DejaVu Sans,sans-serif;">，例如</span></code><code style="font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; background-color: rgb(238,238,238); margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; white-space: pre-wrap;"><a href="http://java.sun.com/jstl/core_rt。" target="_blank" rel="noopener">http://java.sun.com/jstl/core_rt。</a></code><span style="font-family: Arial,Liberation Sans,DejaVu Sans,sans-serif;">必须运行在 Servlet 2.3 / JSP 1.2上。这个版本已经快要终结，不推荐继续使用了。</span></p> </li><br> <li style="font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent;"> <p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; vertical-align: baseline; background-color: transparent; clear: both;"> <span style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent;">1.1</span>: 和1.0的文件组成是一样的. 但是标签引入的URL包含了<code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: pre-wrap;">/jsp</code><span style="background-color: transparent;">，例如</span><code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: pre-wrap;"><a href="http://java.sun.com/jsp/jstl/core" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core</a></code><span style="background-color: transparent;">. 运行在 Servlet 2.4 / JSP 2.0规范上。</span></p> </li><br> <li style="font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent;"> <p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; vertical-align: baseline; background-color: transparent; clear: both;"> <span style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline;">1.2</span>: 只有<code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: pre-wrap;">jstl-1.2.jar</code>(API接口+实现)一个jar文件。<span style="font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; font-size: 14px; line-height: 17.804800033569336px;">引入标签URL和1.1相同</span>。运行在Servlet 2.5 / JSP 2.1规范上，但是也兼容Servlet 2.4 / JSP 2.0 规范。</p> </li><br> <li style="font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent;"> <p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; vertical-align: baseline; background-color: transparent; clear: both;"> <span style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent;">1.2.1</span>: 由<code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: pre-wrap;">javax.servlet.jsp.jstl-api-1.2.1</code>(API接口) and<code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: pre-wrap;">javax.servlet.jsp.jstl-1.2.1.jar</code>(实现) 两个jar文件组成，引入标签URL和1.1相同。运行在Servlet 3.0 / JSP 2.2 规范上，同时兼容Servlet 2.5 / JSP 2.1 和 Servlet 2.4 / JSP 2.0。</p> </li><br> <li style="font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent;"> <p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; vertical-align: baseline; background-color: transparent; clear: both;"> <span style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent;">Facelets</span>: 它是JSP接班人, 包含部分JSTL 1.2 核心标签和全部的JSTL 1.2 函数。需要JSTL 1.2. For Facelets 1.x the XML namespace URI is<code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: pre-wrap;"><a href="http://java.sun.com/jstl/core" target="_blank" rel="noopener">http://java.sun.com/jstl/core</a></code>and for Facelets 2.x the XML namespace URI is<code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: pre-wrap;"><a href="http://java.sun.com/jsp/jstl/core" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core</a></code>with (confusingly!) the<code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: pre-wrap;">/jsp</code>part and from Facelets 2.2 onwards the namespace URI is<code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: pre-wrap;"><a href="http://xmlns.jcp.org/jsp/jstl/core" target="_blank" rel="noopener">http://xmlns.jcp.org/jsp/jstl/core</a></code>.</p> </li><br></ul><br><p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; font-size: 14px; vertical-align: baseline; clear: both; font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; line-height: 17.804800033569336px;"> 大多数但不是全部的servlet容器内置了JSTL， 例如Apache Tomcat 就不包含JSTL， 但Oracle的Glassfish就包含了。 你可以通过查看jar文件中的<code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: pre-wrap;">MANIFEST.MF</code>文件来确定其准确版本。</p><br><h3 style="margin: 0px 0px 1em; padding: 0px; border: 0px; font-size: 15px; vertical-align: baseline; font-family: 'Trebuchet MS','Liberation Sans','DejaVu Sans',sans-serif; line-height: 1.3;"> 安装JSTL</h3><br><p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; font-size: 14px; vertical-align: baseline; clear: both; font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; line-height: 17.804800033569336px;"> 非常简单：</p><br><ol style="margin: 0px 0px 1em 30px; padding: 0px; border: 0px; font-size: 14px; vertical-align: baseline; font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; line-height: 17.804800033569336px;"><br> <li style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent;"> <p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; vertical-align: baseline; background-color: transparent; clear: both;"> 仅仅当你的servlet容器不包含JSTL的时候（例如Tomcat）才需要安装，直接将jar文件放到<code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: pre-wrap;">Webapp/WEB-INF/lib</code>中即可。</p> </li><br> <li style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent;"> <p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; vertical-align: baseline; background-color: transparent; clear: both;"> 使用正确的TLD URI定义标签。 例如：</p> <pre class="lang-html prettyprint prettyprinted" style="margin-top: 0px; margin-bottom: 10px; padding: 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; overflow: auto; width: auto;"><code style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: inherit;"><span class="pun" style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent;">&lt;%@</span><span class="pln" style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent;"> taglib prefix</span><span class="pun" style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent;">=</span><span class="str" style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent; color: rgb(128,0,0);">“c”</span><span class="pln" style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent;"> uri</span><span class="pun" style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent;">=</span><span class="str" style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent; color: rgb(128,0,0);">“<a href="http://java.sun.com/jsp/jstl/core&quot;" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core&quot;</a></span><span class="pln" style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent;"> %&gt;</span></code></pre> <p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; vertical-align: baseline; background-color: transparent; clear: both;"> 如果你使用的是Facelets或者JSPX，应该使用XML命名空间的方式来声明：</p> <pre class="lang-html prettyprint prettyprinted" style="margin-top: 0px; margin-bottom: 10px; padding: 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; overflow: auto; width: auto;"><code style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: inherit;"><span class="tag" style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent; color: rgb(128,0,0);">&lt;anyxmlelement</span><span class="pln" style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent;"> </span><span class="atn" style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent; color: rgb(255,0,0);">xmlns:c</span><span class="pun" style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent;">=</span><span class="atv" style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent; color: rgb(0,0,255);">“<a href="http://java.sun.com/jsp/jstl/core&quot;" target="_blank" rel="noopener">http://java.sun.com/jsp/jstl/core&quot;</a></span><span class="tag" style="margin: 0px; padding: 0px; border: 0px; vertical-align: baseline; background-color: transparent; color: rgb(128,0,0);">&gt;</span></code></pre> </li><br></ol><br><p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; font-size: 14px; vertical-align: baseline; clear: both; font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; line-height: 17.804800033569336px;"> 为了避免冲突，你需要确保在classpath中美有重复的旧的JSTL版本(包括<code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: pre-wrap;">JRE/lib</code>和<code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: pre-wrap;">Appserver/lib</code>)。如果你对服务器拥有管理员级别权限， 那么你应该讲jar文件放到<code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: pre-wrap;">Appserver/lib</code>中，而不是<code style="margin: 0px; padding: 1px 5px; border: 0px; vertical-align: baseline; background-color: rgb(238,238,238); font-family: Consolas,Menlo,Monaco,'Lucida Console','Liberation Mono','DejaVu Sans Mono','Bitstream Vera Sans Mono','Courier New',monospace,serif; white-space: pre-wrap;">Webapp/WEB-INF/lib</code>下面，因为这样其他部署在webapps中的应用就都能使用它了。</p><br><p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; font-size: 14px; vertical-align: baseline; clear: both; font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; line-height: 17.804800033569336px;"> 摘选自<a target="_blank" href="http://stackoverflow.com/tags/jstl/info">http://stackoverflow.com/tags/jstl/info</a></p><br><p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; font-size: 14px; vertical-align: baseline; clear: both; font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; line-height: 17.804800033569336px;"> 总结：</p><br><p style="margin-top: 0px; margin-bottom: 1em; padding-top: 0px; padding-bottom: 0px; border: 0px; font-size: 14px; vertical-align: baseline; clear: both; font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; line-height: 17.804800033569336px;"> <span style="font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; font-size: 14px; line-height: 17.804800033569336px;">当碰到类似找不到</span><span style="font-family: Arial,'Liberation Sans','DejaVu Sans',sans-serif; font-size: 14px; line-height: 17.804800033569336px;">javax.servlet.jsp.jstl.core.LoopTag类定义的问题时，说明你的运行的tomcat下没有包含jstl api了。根据不同的版本的jstl，应该将对应的文件放到tomcat_home/lib下。要想正常使用jstl，光有api还不行，还得有对应的实现，而有时这两个文件都在一起，比如jstl 1.2。</span><br></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jstl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OSWorkflow+MySQL工作流示例</title>
      <link href="/2014/04/18/OSWorkflow+MySQL%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A4%BA%E4%BE%8B/"/>
      <url>/2014/04/18/OSWorkflow+MySQL%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<p>OSWorkflow是一个比较老的工作流框架，官方早就已经停止了对它的支持。但是用来学习工作流的基本思想，用于简单的工作流业务还是可以的。官方文档中部署示例是针对tomcat4来说明的，在这里进行了调整，使其能够跑在tomcat7和MySQL数据库上。</p><br><p>下载地址：<a href="https://java.net/downloads/osworkflow/" target="_blank">https://java.net/downloads/osworkflow/</a></p><br><p>解压下载的压缩包，其中的osworkflow-2.8.0-example.war是可以直接跑在任何servlet服务器中的。但是默认情况下，这个示例程序是使用的xml作为来做存储的。现在需要将其调整到数据库中。</p><br><p>示例程序中有几个比较重要的配置文件：</p><br><p><strong>osworkflow.xml</strong>：主要配置文件，系统主要通过该文件配置数据库或者流程定义文件。</p><br><p></p><br><pre name="code" class="html">&lt;osworkflow&gt;<br>    &lt;!– xml的存储方式<br>    &lt;persistence class=”com.opensymphony.workflow.spi.memory.MemoryWorkflowStore”/&gt;<br>    &lt;factory class=”com.opensymphony.workflow.loader.XMLWorkflowFactory”&gt;<br>        &lt;property key=”resource” value=”workflows.xml” /&gt;  只对XMLWorkflowFactory<br>    &lt;/factory&gt;<br>     –&gt;<br>    &lt;!– 数据库的存储方式 –&gt;<br>    &lt;persistence class=”com.opensymphony.workflow.spi.jdbc.JDBCWorkflowStore”&gt;<br>             &lt;property key=”datasource” value=”java:comp/env/jdbc/osworkflow”/&gt;<br>             &lt;property key=”entry.sequence” value=”select case when a.rowcount=0 then 0 else a.maxId+1 end from (select count(<em>) as rowcount,max(id) as maxId from os_wfentry)as a”/&gt;<br>             &lt;property key=”entry.table” value=”OS_WFENTRY”/&gt;<br>             &lt;property key=”entry.id” value=”ID”/&gt;<br>             &lt;property key=”entry.name” value=”NAME”/&gt;<br>             &lt;property key=”entry.state” value=”STATE”/&gt;<br>             &lt;property key=”step.sequence” value=”select sum(c1) from (select 1 tb, count(</em>) c1 from os_currentstep union select 2 tb, count(*) c1 from os_historystep) as a”/&gt;<br>             &lt;property key=”history.table” value=”OS_HISTORYSTEP”/&gt;<br>             &lt;property key=”current.table” value=”OS_CURRENTSTEP”/&gt;<br>             &lt;property key=”historyPrev.table” value=”OS_HISTORYSTEP_PREV”/&gt;<br>             &lt;property key=”currentPrev.table” value=”OS_CURRENTSTEP_PREV”/&gt;<br>             &lt;property key=”step.id” value=”ID”/&gt;<br>             &lt;property key=”step.entryId” value=”ENTRY_ID”/&gt;<br>             &lt;property key=”step.stepId” value=”STEP_ID”/&gt;<br>             &lt;property key=”step.actionId” value=”ACTION_ID”/&gt;<br>             &lt;property key=”step.owner” value=”OWNER”/&gt;<br>             &lt;property key=”step.caller” value=”CALLER”/&gt;<br>             &lt;property key=”step.startDate” value=”START_DATE”/&gt;<br>             &lt;property key=”step.finishDate” value=”FINISH_DATE”/&gt;<br>             &lt;property key=”step.dueDate” value=”DUE_DATE”/&gt;<br>             &lt;property key=”step.status” value=”STATUS”/&gt;<br>             &lt;property key=”step.previousId” value=”PREVIOUS_ID”/&gt;<br>    &lt;/persistence&gt;<br>     &lt;factory class=”com.opensymphony.workflow.loader.JDBCWorkflowFactory”&gt;<br>             &lt;property key=”datasource” value=”java:comp/env/jdbc/osworkflow”/&gt;<br>     &lt;/factory&gt;<br>&lt;/osworkflow&gt;</pre>其中主要需要注意的地方是<br><p></p><br><p>datasource： 这里配置了jndi数据源，名称是jdbc/osworkflow，你需要在tomcat的context.xml中进行相应的配置。数据库文件可以在下载包的src\etc\deployment\jdbc中找到。官方原配置中没有”java:comp/env/“，导致在tomcat中始终报“找不到数据源”的错误。</p><br><p>entry.sequence和step.sequence：这两个是用来配置os_wfentry（流程实例）表和os_currentstep(当前步骤或节点)表的主键生成策略的。官方原配置中没有考虑MySQL，而是使用Oracle的nextVal数据库函数，要在MySQL上使用，我把改成了上述配置。</p><br><p>persistence：配置存储方式，WorkflowStore有很多种，默认配置的是MemoryWorkflowStore，这里改成了JDBCWorkflowStore。</p><br><p>factory：也是配置存储方式，两个基本差不多，但是factory中不需要配置项persistent中那么多的property，只需要配置一个datasource就可以了。至于为什么非得配置两个就不得而知了，也许作者是准备将流程定义和流程执行的数据放在不同的数据库中，甚至用不同的存储方式来存储。因为从源码中可以看出，factory负责的是流行定义方面的信息处理，额persistent则主要负责管理流程的执行过程。</p><br><p><br></p><br><p><strong>propertyset.xml</strong>：如果你选择了JDBCWorkflowStore，那么还需要配置这个文件：</p><br><p></p><br><pre name="code" class="html">&lt;propertysets&gt;<br>    &lt;propertyset name=”jdbc” class=”com.opensymphony.module.propertyset.database.JDBCPropertySet”&gt;<br>        &lt;arg name=”datasource” value=”jdbc/osworkflow”/&gt;<br>        &lt;arg name=”table.name” value=”OS_PROPERTYENTRY”/&gt;<br>        &lt;arg name=”col.globalKey” value=”GLOBAL_KEY”/&gt;<br>        &lt;arg name=”col.itemKey” value=”ITEM_KEY”/&gt;<br>        &lt;arg name=”col.itemType” value=”ITEM_TYPE”/&gt;<br>        &lt;arg name=”col.string” value=”STRING_VALUE”/&gt;<br>        &lt;arg name=”col.date” value=”DATE_VALUE”/&gt;<br>        &lt;arg name=”col.data” value=”DATA_VALUE”/&gt;<br>        &lt;arg name=”col.float” value=”FLOAT_VALUE”/&gt;<br>        &lt;arg name=”col.number” value=”NUMBER_VALUE”/&gt;<br>    &lt;/propertyset&gt;<br>&lt;/propertysets&gt;</pre>这里又配置了一遍数据源。<br><p></p><br><p><br></p><br><p><strong>workflows.xml</strong>：看名称就知道，它是用来配置流行定义文件的。如果你在osworkflow.xml中配置XMLWorkflowFactory，那么你还需要为这个factory配置一个resouce来引用下面的配置：</p><br><p></p><br><pre name="code" class="html">&lt;workflows&gt;<br>    &lt;workflow name=”example” type=”resource” location=”example.xml”/&gt;<br>&lt;/workflows&gt;</pre><br><br> 这个文件中可以定义多个流行定义，每个流行定义对应一个文件。如上所示定义了一个example流行，对应的文件是example.xml。<br><p><br></p>]]></content>
      
      
      <categories>
          
          <category> 工作流 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> osworkflow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>由request.getSession()想到的函数参数设计原则</title>
      <link href="/2014/04/16/%E7%94%B1request.getSession()%E6%83%B3%E5%88%B0%E7%9A%84%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
      <url>/2014/04/16/%E7%94%B1request.getSession()%E6%83%B3%E5%88%B0%E7%9A%84%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<p>我们经常这么干，通过request.getSession()获取到session，然后查询其中的变量来判断当前用户是否登录。一天遇到有人问，能不能通过request.getSession()==null来判断用户没有登录呢？立马想到，什么时候会返回空呢？浏览器每次访问到服务器时，服务器会自动给创建一个session啊。那不能为空啊?但是超时或者通过手动的invalidate()之后session确实会失效，失效了返回就应该是空啊?</p><p>查看API才知道getSession()还有另外一个可以传递boolean类型参数的版本，传递true表示没有获取到session时自动创建一个，传递false则不创建。疑问解开了，还是自己太二了，不了解人家的API。但是后来发现，网上其他很多人都遇到了这个相同的疑问，开始反思这API设计的是否有问题。之所以出现这样的疑问，是因为大家很容易将这个函数的boolean参数给遗忘掉，以至于到最后大家都每天熟练的使用request.getSession()，只知道他能获取到session。这是函数设计上的一个忌讳，《Clear Code》中说<strong>标识参数（布尔参数）的存在意味着你在公然宣布，这个函数做了不止一件事</strong>，即便是HttpServletRequest中的getSession做了重载，但是它起到的效果是一样的（对外界来说是一个函数做了两件事情）。</p><p>另外，getSession()函数的名称和其实际的操作内容也有出入，《Clear Code》中说<strong>函数实际的操作要与名称相符，不能背后还有其他副作用（这也是“只做一件事”的原则）</strong>，而getSession()却不仅仅只是“get“，还带有了”create“的含义。</p><p>当然了，也许设计者考虑的是，getSession(true)比getSession(false)更为常用，并且创建一个session也无关紧要，也不影响谁，所以有意将getSession(flase)给弱化了。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>汇编语言基础之寄存器</title>
      <link href="/2014/04/12/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AF%84%E5%AD%98%E5%99%A8/"/>
      <url>/2014/04/12/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E4%B9%8B%E5%AF%84%E5%AD%98%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p><strong>内存单元</strong></p><br><p>无论计算机CPU的位数怎么变，从x86到现在的酷睿，CPU内部数据总线位宽在变大、寄存器的数量在增大、寄存器位数也在变大。但是对于内存的管理始终没有变化。计算机中用于存储的最小部件是一个二进制位（bit），一个bit能够存放两个数据，要么0要么1。在管理计算机存储空间的时候，将8个bit位分为一组，这就是计算机中的最小存储单元。称之1个字节（byte），一个字节的存储容量是2^8-1=255。1024（即2^10）个字节称之为1KB，接下来的M、G、T单位也就同理了。</p><br><p>8086CPU的寄存器都是16位的，后来的32位和64位CPU寄存器的位数与之前的CPU位数不一样，但是，就像8086CPU与上一代CPU寄存器兼容一样，32位和64位计算机的CPU为了向前兼容，按理来说，其内部一个32位的寄存器和64位寄存器应该可以分开当成2个16位的寄存器和4个16位的寄存器来使用。<br></p><br><p>不同的CPU，寄存器的个数、结构是不相同的，8086CPU中有14个寄存器。这14个寄存器的用途不尽相同，但是结构都一致：</p><br><p><img height="100" width="600" alt src="http://img.blog.csdn.net/20140412094328625?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><br></p><br><p>这16位的二进制数据用相等的16进制来显示就成了四位数据了，所以，在查看计算机寄存器的时候，可以看到所有的寄存器值都是4位的：</p><br><p><img alt src="http://img.blog.csdn.net/20140412221946953?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><br></p><br><p>其中AX、BX、CX、DX用于存放一般性数据，叫做通用寄存器。</p><br><p><strong><br></strong></p><br><p><strong>物理地址的计算</strong></p><br><p>cpu需要从内存中读取数据，就需要知道在内存中的实际物理地址。而8086cpu的地址总线有20条，而内部的寄存器只有16位，怎么用16位的寄存器来达到20条地址总线的寻址能力呢（20条数据总线的寻址能力是2^20=1M，但是16位寄存器实际能够表达的数据仅有2^16）？。8086cpu设计了两个寄存器来计算物理地址，即段寄存器和偏移地址寄存器（两种寄存器都分别有多个，如CS代码段和DS数据段），具体的计算方法是</p><br><p style="text-align: center;"><strong><span style="font-size: 18px;">物理地址=段地址X16+偏移地址</span></strong></p><br><p>为什么要乘以16呢？乘以16何以能解决达到20位寻址能力的要求？解释是，往16位的段地址上乘以16，实际意义是往段地址后面增加了一个0，然后让IP加到低位。这里增加了一个0表示多了一位，多一位的16进制数据，即多了4位二进制位，从而达到了从16位表示能力增加到20位表示能力的目的。</p><br><p><strong><br></strong></p><br><p><strong>代码段和代码段寄存器(CS)</strong></p><br><p>其实在计算机中存放的都是二进制数据而已，这些数据的实际意义是根据实际情况附加上去的，你认为它是代码那他就是代码，你认为它是数据那它就是数据，代码和数据的本质是相同的。代码段寄存器（CS）中存放的地址说明，从这个地址开始（x16加上偏移地址后）的内容都是cpu将要执行的指令。</p><br><p></p><br><p>汇编语言中修改CS和IP的方法：jmp 段地址:偏移地址</p><br><p>从debug中可以通过-r CS和-r IP 来修改CS和IP</p><br><p><strong><br></strong></p><br><p><strong>数据段和数据段寄存器（DS）</strong></p><br><p>数据段的作用就不用多说了，但是DS的用法却需要注意一下，在读取数据段的内容的时候，需要先将DS的值设置好，然后通过如下的方式来访问数据段的内容：</p><br><p>mov ax,[0]</p><br><p>[…]表示一个内存单元，其中的0表示内存单元的偏移地址。这个偏移地址是在DS的基础上而言的。值得注意的是，这个地方往ax中传递的值是一个字类型（2字节，16位数据）而不是字节类型（8位数据）。</p><br><p><strong><br></strong></p><br><p><strong>mov指令规则</strong></p><br><p>内存单元、通用寄存器和段寄存器之间可以相互赋值，而数据只允许直接存放到通用寄存器中。</p><br><p><img alt src="http://img.blog.csdn.net/20140412112847296?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><br></p><br><p><strong>栈</strong></p><br><p>cpu提供了栈的机制共我们使用，栈顶的位置由SS:SP确定，8086cpu不保证栈地址越界，所以我们自己要时刻注意越界的问题。栈的使用时，可以将栈想象成一口井，井口的地址小，井底地地址大。在往井里倒水（入栈）的时候，井水水面上升（栈顶地址变小SP-=2）；在从井里打水（出栈）时，井水水面下降（栈顶地址变大SP-=2）。其实，对于栈，cpu真的没有多实现什么，就像CS：IP一样，cpu可以根据这个地址来读取操作指令，cpu无非是在这个基础上增加了对SP的自动移动而已，理解了这个移动，就理解了栈的本质。</p><br><p><img alt src="http://img.blog.csdn.net/20140412221629531?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast"><br></p><br><p><br></p><br><p><strong>debug工具的使用</strong></p><br><p>在32位机器上可以直接在命令行输入debug来启动debug工具，64位机器需要额外安装工具才能模拟debug工具。</p><br><p>-r查看和修改寄存器内容</p><br><p>直接输入一个-r可以查看寄存器情况，也可以输入-r 寄存器名称例如-r ax 来修改寄存器的值</p><br><p>-d 查看内存内容</p><br><p>该命令后面可以跟两个参数，一个参数是起始地址，该参数有两部分组成，用冒号分隔，例如1000:0；第二参数可以限定显示内存的单位数量，例如-d 1000:0 f，表示显示一行内存情况。</p><br><p>-u 查看内存数据对应的指令</p><br><p>-a 录入汇编指令到内存，这些内存可以通过-u命令查看</p><br><p>-e 直接修改内存内容</p><br><p>输入-e 和起始地址，输入要修改的值，按空格键跳到下一个内存单元，回车表示输入完毕</p><br><br><br><p><br></p>]]></content>
      
      
      <categories>
          
          <category> 汇编 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 寄存器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录《编程珠玑》中通过位开关来实现排序的方法</title>
      <link href="/2014/03/18/%E8%AE%B0%E5%BD%95%E3%80%8A%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91%E3%80%8B%E4%B8%AD%E9%80%9A%E8%BF%87%E4%BD%8D%E5%BC%80%E5%85%B3%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%BA%8F%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2014/03/18/%E8%AE%B0%E5%BD%95%E3%80%8A%E7%BC%96%E7%A8%8B%E7%8F%A0%E7%8E%91%E3%80%8B%E4%B8%AD%E9%80%9A%E8%BF%87%E4%BD%8D%E5%BC%80%E5%85%B3%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%BA%8F%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>程序实现自动生成1000万个从1000万到1亿之间的随机数写入到文件中，然后对这些数进行从小到大排序写入到新的文件中。<br>核心思想：用一个很大的数组来记录随机数出现的次数，然后直接输出这个基数器的序号即为排序结果。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIZE = <span class="number">10000000</span>;<span class="comment">//随机数数量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> START = <span class="number">10000000</span>;<span class="comment">//随机数开始值</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> END = <span class="number">89999999</span>;<span class="comment">//随机数增量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DIR = <span class="string">"e:/test/"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="keyword">long</span> time  = System.currentTimeMillis();</span><br><span class="line">createTestData();</span><br><span class="line">System.out.println(<span class="string">"耗时:"</span>+(System.currentTimeMillis() - time));</span><br><span class="line">time  = System.currentTimeMillis();</span><br><span class="line">sort();</span><br><span class="line">System.out.println(<span class="string">"耗时:"</span>+(System.currentTimeMillis() - time));</span><br><span class="line">System.out.println(<span class="string">"完成!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">System.out.println(<span class="string">"初始化排序数组..."</span>);</span><br><span class="line"><span class="keyword">int</span>[] record = <span class="keyword">new</span> <span class="keyword">int</span>[END+<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;record.length;i++)&#123;</span><br><span class="line">record[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">File file = <span class="keyword">new</span> File(DIR+<span class="string">"test.txt"</span>);</span><br><span class="line">BufferedReader br = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(file));</span><br><span class="line">String line;</span><br><span class="line"><span class="keyword">while</span>((line = br.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">record[Integer.parseInt(line) - START] += <span class="number">1</span>; </span><br><span class="line">&#125;</span><br><span class="line">br.close();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"正在排序..."</span>);</span><br><span class="line">File file2 = <span class="keyword">new</span> File(DIR+<span class="string">"test-result.txt"</span>);</span><br><span class="line"><span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">file.createNewFile();</span><br><span class="line">&#125;</span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(file2,<span class="keyword">true</span>));</span><br><span class="line"><span class="keyword">int</span> i = START;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> r : record)&#123;</span><br><span class="line"><span class="keyword">if</span>(r&gt;=<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = r;j&gt;<span class="number">0</span>;j--)&#123;</span><br><span class="line">bw.write(i+(r&gt;<span class="number">1</span>?<span class="string">" &lt;---"</span>:<span class="string">""</span>));</span><br><span class="line">bw.newLine();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line"><span class="comment">//System.out.println("i="+i);</span></span><br><span class="line">&#125;</span><br><span class="line">bw.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">createTestData</span><span class="params">()</span><span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line">File file = <span class="keyword">new</span> File(DIR+<span class="string">"test.txt"</span>);</span><br><span class="line"><span class="keyword">if</span>(!file.exists())&#123;</span><br><span class="line">file.createNewFile();</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"正在生成随机数..."</span>);</span><br><span class="line">BufferedWriter bw = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> FileWriter(file,<span class="keyword">true</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;SIZE;i++)&#123;</span><br><span class="line">bw.write(START+r.nextInt(END)+<span class="string">""</span>);</span><br><span class="line">bw.newLine();</span><br><span class="line"><span class="comment">//System.out.println("i="+i);</span></span><br><span class="line">&#125;</span><br><span class="line">bw.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LDAP账号同步和Windows域集成验证</title>
      <link href="/2014/03/13/LDAP%E8%B4%A6%E5%8F%B7%E5%90%8C%E6%AD%A5%E5%92%8CWindows%E5%9F%9F%E9%9B%86%E6%88%90%E9%AA%8C%E8%AF%81/"/>
      <url>/2014/03/13/LDAP%E8%B4%A6%E5%8F%B7%E5%90%8C%E6%AD%A5%E5%92%8CWindows%E5%9F%9F%E9%9B%86%E6%88%90%E9%AA%8C%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p></p><h2><span style="font-family: 微软雅黑;"><strong><span style="font-size: 18px;">应用场景</span></strong></span></h2> <p></p><p><span style="font-family: 微软雅黑; font-size: 14px;"></span></p><br><div style="font-family: 微软雅黑; font-size: 14px;"><br> <ul><br>  <li><span style>应用系统中的账号信息除了本地创建的之外，还要有LDAP中的，并且随时与LDAP中的最新数据一致；</span></li><br>  <li><span style>公司所有人的电脑都在一个域中管理，员工通过域账号和密码登录他的计算机之后，在登录应用系统之后不再需要输入密码，直接进入系统；</span></li><br>  <li><span style>如果员工拥有多个不同的域账号和密码，那么他也可以在选择任意一个域账号来登录应用系统（而不仅仅是登录计算机那个域账号和密码）；</span></li><br> </ul><br></div><br><span style="font-family: 微软雅黑;"><strong><span style="font-size: 18px;">目标功能</span></strong></span><br><br><br><p></p><br><p><span style="font-family: 微软雅黑;"><span style="font-family: 微软雅黑;"></span></span></p><br><div style="font-family: 微软雅黑;"><br> <ul style="font-size: 14px;"><br>  <li> <span style>1，LDAP账号同步<br></span><span style>把LDAP中的用户数据同步到本地数据中</span> </li><br>  <li> <span style>2，LDAP用户登录验证<br></span><span style>根据用户提供的用户名和密码验证用户是否为合法的域用户</span> </li><br>  <li> <span style>3，Windows域集成验证<br></span><span style>比如一个信息管理系统，当用户使用域中（域控，ActiveDirectory）的计算机登录信息管理系统的时候，由于该用户在登录计算机的时候已经通过了身份验证，所以不需要再次输入用户名和密码而直接进入信息管理系统。<br></span> </li><br> </ul><br> <div style="font-size: 14px;"><br>  测试环境准备<br> </div><br> <div style="font-size: 14px;"><br>  服务器IP:<br>  <span style="font-family: 微软雅黑; font-size: 14px;">192.168.116.128</span><br> </div><br> <div style="font-size: 14px;"><br>  服务器域信息：<br> </div><br> <div style="font-size: 14px;"><br>  <img alt style="display: inline-block; font-family: 微软雅黑; font-size: 14px;"><br>  <br><br> </div><br> <div style="font-size: 14px;"><br>  <img src="http://img.blog.csdn.net/20140313171933421?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt><br>  <br><br> </div><br> <div style="font-size: 14px;"><br>  <br><br> </div><br> <div style="font-size: 14px;"><br>  <span style="font-family: 微软雅黑; font-size: 14px;">Active Directory 状态：</span><br>  <br><br> </div><br> <div style="font-size: 14px;"><br>  <span style="font-family: 微软雅黑; font-size: 14px;"><img src="http://img.blog.csdn.net/20140313172140765?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvaW1odXFpYW8=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt><br></span><br> </div><br> <div style="font-size: 14px;"><br>  <span style="font-family: 微软雅黑; font-size: 14px;"><br></span><br> </div><br> <div><br>  <span style="font-family: 微软雅黑;"><strong><span style="font-size: 18px;"><span style="font-family: 微软雅黑;">功能：</span><span style="font-family: 微软雅黑;">LDAP账号同步</span></span></strong><br></span><br> </div><br> <div style="font-size: 14px;"><br>  <span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><br></span></span><br> </div><br> <div style="font-size: 14px;"><br>  <span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;">首先，需要获取到LdapContext：</span><br></span></span><br> </div><br> <div style="font-size: 14px;"><br>  <pre name="code" class="java">    private LdapContext getLdapContext()throws NamingException{<br>        Hashtable&lt;String,String&gt; hashtable = new Hashtable&lt;String,String&gt;();<br>        hashtable.put(Context.INITIAL_CONTEXT_FACTORY, “com.sun.jndi.ldap.LdapCtxFactory”);<br>        hashtable.put(Context.PROVIDER_URL, “ldap://192.168.116.128:389”);//服务器地址<br>        hashtable.put(Context.SECURITY_AUTHENTICATION, “simple”);<br>        hashtable.put(Context.SECURITY_PRINCIPAL, “<a href="mailto:Administrator@abc.com" target="_blank" rel="noopener">Administrator@abc.com</a>“);//用户名<br>        hashtable.put(Context.SECURITY_CREDENTIALS, “321%cba”);//密码<br>        return new InitialLdapContext(hashtable,null);<br>    }</pre><br>  <br><br>  <span style="font-family: 微软雅黑; font-size: 14px;">然后进行相关的搜索设置：</span><br> </div><br> <div style="font-size: 14px;"><br>  <span style="font-family: 微软雅黑; font-size: 14px;"></span><br>  <pre name="code" class="java">        LdapContext  ctx = getLdapContext();<br>                //设置分页大小<br>        ctx.setRequestControls(new Control[] { new PagedResultsControl(15, Control.NONCRITICAL) });<br><br>        SearchControls control = new SearchControls();<br><br>        //搜索方式<br>        control.setSearchScope(SearchControls.SUBTREE_SCOPE);//Search the entire subtree rooted at the named object.<br>        //control.setSearchScope(SearchControls.ONELEVEL_SCOPE);//Search one level of the named context<br>        //control.setSearchScope(SearchControls.OBJECT_SCOPE);//Search the named object<br><br>        //搜索字段<br>        String returnedAtts[] = { “displayName”, “mail”, “telephoneNumber”,”thumbnailPhoto” };//姓名，邮箱，电话，头像<br>        control.setReturningAttributes(returnedAtts);<br><br>        //设置ou和filter<br>        String ou = “ou=users,ou=beijing,dc=abc,dc=com”;<br>        String filter = “(&amp;(objectClass=user)(objectCategory=person)(!(userAccountControl:1.2.840.113556.1.4.803:=2)))”;</pre><br> </div><br> <div style="font-size: 14px;"><br>  <span style="font-family: 微软雅黑; font-size: 14px;">最后，发起搜索请求，解析搜索结果：</span><br> </div><br> <div style="font-size: 14px;"><br>  <span style="font-family: 微软雅黑; font-size: 14px;"></span><br>  <pre name="code" class="java">NamingEnumeration&lt;SearchResult&gt; results = ctx.search(ou, filter, control);<br>        while (results != null &amp;&amp; results.hasMoreElements()) {<br>            SearchResult entry = (SearchResult) results.next();<br>            String empName = getValueFromAttribute(entry.getAttributes().get(returnedAtts[0]));<br>            String mail = getValueFromAttribute(entry.getAttributes().get(returnedAtts[1]));<br>            String telephone = getValueFromAttribute(entry.getAttributes().get(returnedAtts[2]));<br>            byte[] photoBytes = null;<br>            Attribute att = (Attribute) entry.getAttributes().get(“thumbnailPhoto”);<br>            if(att!=null){<br>                photoBytes = (byte[])(att.get(0));<br>            }<br>            System.out.println(empName+”|”+mail+”|”+telephone+”|”+(photoBytes==null ? 0 : photoBytes.length));<br>        }</pre><br> </div><br> <div><br>  <span style="font-family: 微软雅黑;"><strong><span style="font-size: 18px;">功能：LDAP用户登录验证</span></strong></span><br>  <br><br> </div><br> <div style="font-size: 14px;"><br>  <span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><br></span></span></span></span><br> </div><br> <div style="font-size: 14px;"><br>  <span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;">我的实现方式如下，有更好方法的朋友还请指教：</span><br></span></span></span><br> </div><br> <div><br>  <span style="font-size: 14px; font-family: 微软雅黑;"><span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"></span></span></span></span><br>  <pre name="code" class="java" style="font-size: 14px;">private boolean validate(String username,String pwd)throws NamingException{<br>        Hashtable&lt;String,String&gt; hashtable = new Hashtable&lt;String,String&gt;();<br>        hashtable.put(Context.INITIAL_CONTEXT_FACTORY, “com.sun.jndi.ldap.LdapCtxFactory”);<br>        hashtable.put(Context.PROVIDER_URL, “ldap://192.168.116.128:389”);//服务器地址<br>        hashtable.put(Context.SECURITY_AUTHENTICATION, “simple”);<br>        hashtable.put(Context.SECURITY_PRINCIPAL, username);//用户名<br>        hashtable.put(Context.SECURITY_CREDENTIALS, pwd);//密码<br>        return new InitialLdapContext(hashtable,null)!=null;<br>    }</pre><br>  <br><br>  <span style="font-family: 微软雅黑;"><strong><span style="font-size: 18px;"><br></span></strong></span><br> </div><br> <div><br>  <span style="font-family: 微软雅黑;"><strong><span style="font-size: 18px;">功能：Windows集成验证登录</span></strong></span><br>  <br><br> </div><br> <div style="font-size: 14px;"><br>  <span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"></span></span></span></span></span><br>  <div style="font-family: 微软雅黑; font-size: 14px;"><br>   <br><br>  </div><br>  <div style="font-family: 微软雅黑; font-size: 14px;"><br>   这个功能，使用到了工具<br>   <a href="http://tomcatspnego.codeplex.com/" target="_blank" style>http://tomcatspnego.codeplex.com/</a><br>  </div><br>  <div style="font-family: 微软雅黑; font-size: 14px;"><br>   下载工具后解压，然后：<br>  </div><br>  <div style="font-family: 微软雅黑; font-size: 14px;"><br>   <div><br>    复制jar包frdoumesspitc7.jar到tomcat的/lib目录下<br>   </div><br>   <div><br>    复制SSPAuthentification.dll和SSPAuthentificationx64.dll到tomcat的/bin目录下<br>   </div><br>  </div><br>  <div style="font-family: 微软雅黑; font-size: 14px;"><br>   在应用的web.xml中增加如下配置：<br>  </div><br>  <pre name="code" class="html">&lt;security-constraint&gt;<br>      &lt;display-name&gt;Example Security Constraint&lt;/display-name&gt;<br>      &lt;web-resource-collection&gt;<br>         &lt;web-resource-name&gt;Protected Area&lt;/web-resource-name&gt;<br>          &lt;!– Define the context-relative URL(s) to be protected –&gt;<br>         &lt;url-pattern&gt;/auth.do&lt;/url-pattern&gt;<br>          &lt;!– If you list http methods, only those methods are protected –&gt;<br>          &lt;http-method&gt;DELETE&lt;/http-method&gt;<br>         &lt;http-method&gt;GET&lt;/http-method&gt;<br>         &lt;http-method&gt;POST&lt;/http-method&gt;<br>          &lt;http-method&gt;PUT&lt;/http-method&gt;<br>      &lt;/web-resource-collection&gt;<br>      &lt;auth-constraint&gt;<br>         &lt;!– Anyone with one of the listed roles may access this area<br>          &lt;role-name&gt;utilisateurs&lt;/role-name&gt;<br>          &lt;role-name&gt;users&lt;/role-name&gt;<br>          &lt;role-name&gt;everyone&lt;/role-name&gt;–&gt;<br>          &lt;role-name&gt;everyone&lt;/role-name&gt;<br>      &lt;/auth-constraint&gt;<br>    &lt;/security-constraint&gt;<br><br>    &lt;!– Default login configuration –&gt;<br>    &lt;login-config&gt;<br>      &lt;auth-method&gt;BASIC&lt;/auth-method&gt;<br>      &lt;realm-name&gt;Example Spnego&lt;/realm-name&gt;<br>    &lt;/login-config&gt;</pre><br>  <br><br>  <div style="font-family: 微软雅黑; font-size: 14px;"><br>   就这样，tomcatspnego就能使用了。这里使用到了Tomcat的目录保护功能，而tomcatspnego应该是对tomcat的验证功能做了修改，增加了域信息的检查。这里连没有配置域服务器ip地址都没有配置，tomcatspnego具体如何实现域信息监测就不太清楚了。<br>  </div><br>  <div style="font-family: 微软雅黑; font-size: 14px;"><br>   <br><br>  </div><br>  <div style="font-family: 微软雅黑; font-size: 14px;"><br>   接下来，在我们自己的应用身份验证中需要用到tomcatspnego留给我们的标记：<br>  </div><br>  <pre name="code" class="java">    @RequestMapping(value = “/auth”)<br>    public String ntlmAuth(HttpServletRequest request,HttpServletResponse response,HttpSession session){<br>        Principal princ = request.getUserPrincipal();<br>        if (isLogined()) {<br>                return “redirect:index.do”;<br>        }<br>        if(princ!=null){<br>            session.setAttribute(“princpalNameInSession”, princ.getName());<br>        }<br>        return “redirect:index.do”;<br>    }<br><br>    @RequestMapping(“/login”)<br>    public ModelAndView login(String loginName,String password,HttpServletResponse response,HttpSession session,HttpServletRequest request) {<br>        if(!response.isCommitted()){<br>            ModelAndView mav = new ModelAndView();<br>            mav.setViewName(“login”);<br>            User user = null;<br>            Config config = Config.getInstance(true);<br>            if(notEmpty(loginName) &amp;&amp; notEmpty(password)){//如果用户名和密码都存在,普通登录，或域账号登录<br>                user = userService.getEntityByProperty(User.class, “userName”, loginName);<br>                if(user==null || user.getStatus()!=UserStatus.Active ){<br>                    mav.addObject(“noUserError”, “用户名不存在!”);<br>                }else{<br>                    if(user.getType()==UserType.Domain &amp;&amp; config.isUseLdapValidate()){//域用户<br>                        if(domainLoginValidate(loginName,password,request,config)){<br>                            mav.setViewName(“redirect:index.do”);//域登录成功<br>                        }<br>                    }else{<br>                        if(localLoginValidate(user,password)){<br>                            mav.setViewName(“redirect:index.do”);//本地登录成功<br>                        }else{<br>                            mav.addObject(“passwordError”, “密码输入错误!”);<br>                        }<br>                    }<br>                }<br>            }else if(domainLoginValidateByNtlm(request)){//存在域Ntlm变量，尝试域登录<br>                //则根据域变量获取到用户名<br>                String princpalName = getPrincpalUserName(request);<br>                user = userService.getEntityByProperty(User.class, “userName”, princpalName);<br><br>                if(user!=null){<br>                    log.info(“用户:”+loginName+”，通过获取到本机域信息直接登录成功!”);<br>                }else{<br>                    mav.addObject(“error”,”已经检测到您为域用户，但是在系统中没有查询到您的用户信息”);<br>                }<br>            }else{<br>                //用户名和密码以及域变量都不存在，重定向到登录页面<br>                mav.setViewName(“redirect:loginUI.do”);<br>            }<br>            //然后获取到user信息，并加载权限信息，设置“已登录”标志<br>            if(user!=null){<br>                prepareFunctionPoint(session,user);<br>            }<br>            return mav;<br>        }<br>        return null;<br>    }<br><br>    @RequestMapping(“/index”)<br>    public String index(HttpServletRequest request,HttpServletResponse response,HttpSession session){<br>        if(!response.isCommitted()){<br>            if (isLogined()) {<br>                return “main”;<br>            }<br>            Config config = Config.getInstance(true);<br>            if(!config.isUseLdapValidate()){<br>                return “redirect:loginUI.do”;<br>            }<br>            // 则尝试根据域变量获取到用户信息;<br>            User user = getUserFromDbByDomainUserName(request);<br>            if (user != null) {<br>                prepareFunctionPoint(session, user);<br>                return “main”;<br>            }<br>            return “redirect:loginUI.do”;<br>        }<br>        return null;<br>    }</pre><br>  <br><br>  <div style="font-family: 微软雅黑; font-size: 14px;"><br>   说明：<br>  </div><br>  <div style="font-family: 微软雅黑; font-size: 14px;"><br>   这里把应用的首页设置为/auth.do，以便于当用户直接访问/的时候直接跳转到/auth.do；<br>  </div><br>  <div style="font-family: 微软雅黑; font-size: 14px;"><br>   在进入ntlmAuth方法之前，系统已经利用tomcatspnego来尝试域验证；<br>  </div><br>  <div style="font-family: 微软雅黑; font-size: 14px;"><br>   在auth方法中尝试获取tomcatspnego给我们留下来的变量，并保存起来；<br>  </div><br>  <div style="font-family: 微软雅黑; font-size: 14px;"><br>   从定向到index.do，index中尝试通过域变量来获取用户信息（获取成功表示域登陆成功）；<br>  </div><br>  <div style="font-family: 微软雅黑; font-size: 14px;"><br>   login方法正常接收用户名和密码，可以进行本地账号验证和域账号验证。<br>  </div><br>  <br><br> </div><br> <div style="font-size: 14px;"><br>  <span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><br></span></span></span></span></span><br> </div><br> <div style="font-size: 14px;"><br>  <span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><br></span></span></span></span></span><br> </div><br> <div style="font-size: 14px;"><br>  <span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><br></span></span></span><br> </div><br> <div style="font-size: 14px;"><br>  <span style="font-family: 微软雅黑; font-size: 14px;"><span style="font-family: 微软雅黑; font-size: 14px;"><br></span></span><br> </div><br> <div style="font-size: 14px;"><br>  <span style="font-family: 微软雅黑; font-size: 14px;"><br></span><br> </div><br></div><br><p></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JQuery插件开发相关</title>
      <link href="/2014/03/10/JQuery%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/"/>
      <url>/2014/03/10/JQuery%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>翻看大多数js工具源码时经常遇到这样的代码：<br>代码1:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">（<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// some code here...</span></span><br><span class="line">&#125;）(JQuery);</span><br></pre></td></tr></table></figure></p><p>今天仔细琢磨了一下，这个代码实际的功能就是 定义了一个匿名函数，然后在页面load完毕之后执行了这个函数。它的简化版是：<br>代码2：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//some code here...</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></p><p>这说明代码1中其实是将JQuery这个对象作为参数传递给了匿名函数，而匿名函数中给参数（形参）起了个另外的名字$。</p><p>记录一下今天在实现一个 将“您有新消息”内容在页面中闪烁功能的过程：<br>这个功能如果简单实现起来，只需要像下面这样就可以了：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      $(<span class="string">"#targetId"</span>).toggle();</span><br><span class="line">&#125;,<span class="number">500</span>);</span><br></pre></td></tr></table></figure></p><p>只需要这样，这个id为targetId的元素就开始在页面中闪烁了。但是，我希望我能很方便的让其他页面元素也能很轻松的实现这样的功能，并且我还能随时控制说让它不要再闪烁了。我需要实现一个像jqueryUI中$(“#modal-dialog”). dialog();这样的工具。<br>这需要扩展jquery的函数了，借助上面的原理，有了下面的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">$.fn.extend(&#123;</span><br><span class="line">flash:<span class="function"><span class="keyword">function</span>(<span class="params">opt</span>)</span>&#123;</span><br><span class="line">$(<span class="keyword">this</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> tmp = $(<span class="keyword">this</span>);</span><br><span class="line"><span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(tmp).toggle();</span><br><span class="line">&#125;,<span class="number">500</span>);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)(Jquery);</span><br></pre></td></tr></table></figure></p><p>这里，我用flash来作为这个闪烁功能的函数名，opt是传递的参数。但是，这个样子，这个方法只能调用一次，再多调用的话，元素的闪烁会加快甚至失控，因为每次都直接toggle了。所以我需要有一个数组来记录这些元素的interval对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> (<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line">&lt;span style=<span class="string">"white-space:pre"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><span class="keyword">var</span> _intervalArray = [];</span><br><span class="line">$.fn.extend(&#123;</span><br><span class="line">flash:<span class="function"><span class="keyword">function</span>(<span class="params">opt</span>)</span>&#123;</span><br><span class="line">$(<span class="keyword">this</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> tmp = $(<span class="keyword">this</span>);</span><br><span class="line"> <span class="keyword">var</span> targetId = tmp .attr(<span class="string">"id"</span>);</span><br><span class="line"> <span class="keyword">var</span> interval = _intervalArray[targetId];</span><br><span class="line"><span class="keyword">if</span>(!interval)&#123;</span><br><span class="line">interval = <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(tmp).toggle();</span><br><span class="line">&#125;,<span class="number">500</span>);</span><br><span class="line">_intervalArray[targetId] = interval;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)(Jquery);</span><br></pre></td></tr></table></figure></p><p>js是一个很奇怪的语言，字符串也能作为数组数组访问index。这里我通过一个数组来记录它，在下一次再调用的时候，如果发现已经在闪烁了就不要再interval了。<br>我希望通过$(“SELECTOR-CODE”).flash();来启动闪烁，通过$(“SELECTOR-CODE”).flash(“stop”);来停止闪烁，具体如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> _intervalArray = [];</span><br><span class="line"> $.flashOnTarget = <span class="function"><span class="keyword">function</span> <span class="title">flashOnTarget</span>(<span class="params">targetId</span>)</span>&#123;</span><br><span class="line"> $(<span class="string">"#"</span>+targetId).toggle();</span><br><span class="line"> &#125;;</span><br><span class="line"> $.fn.extend(&#123;</span><br><span class="line"> flash:<span class="function"><span class="keyword">function</span>(<span class="params">opt</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> target = $(<span class="keyword">this</span>);</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;target.length; i++ )&#123;</span><br><span class="line"> <span class="keyword">var</span> targetId = $(target[i]).attr(<span class="string">"id"</span>);</span><br><span class="line"> <span class="keyword">var</span> interval = _intervalArray[targetId];</span><br><span class="line"> <span class="keyword">if</span>(opt==<span class="string">'stop'</span> &amp;&amp; interval)&#123;</span><br><span class="line"> <span class="built_in">window</span>.clearInterval(interval);</span><br><span class="line"> $(target[i]).show();</span><br><span class="line"> &#125;<span class="keyword">else</span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(!interval)&#123;</span><br><span class="line"> interval = <span class="built_in">window</span>.setInterval(<span class="string">"$.flashOnTarget('"</span>+targetId+<span class="string">"')"</span>,<span class="number">300</span>);</span><br><span class="line"> _intervalArray[targetId] = interval;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> target;</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;)(jQuery);</span><br></pre></td></tr></table></figure></p><p>最后这个代码中，我把setInterval中的匿名函数单独独立出来了，为了能够把代码都统一放置在<br>(function($){</p><p>})();<br>中，我把这个函数定义成了一个jquery的一个扩展函数。这里还有一个有趣并值得注意的地方，window的setInterval和setTimeout两个函数是 没办法传递参数的，为了变相的传递参数，只能把它写成一个字符串了。<br>下面是完整代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;<span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line">&lt;script src=<span class="string">"http://code.jquery.com/jquery-1.11.0.min.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"span"</span>).flash(&#123;<span class="attr">cycle</span>:<span class="number">100</span>&#125;);</span><br><span class="line"><span class="built_in">window</span>.setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">$(<span class="string">"#sp1,#sp2"</span>).flash(<span class="string">"stop"</span>);</span><br><span class="line">&#125;,<span class="number">5000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> _intervalArray = [];</span><br><span class="line">$.flashOnTarget = <span class="function"><span class="keyword">function</span> <span class="title">flashOnTarget</span>(<span class="params">targetId</span>)</span>&#123;</span><br><span class="line">$(<span class="string">"#"</span>+targetId).toggle();</span><br><span class="line">&#125;;</span><br><span class="line">$.fn.extend(&#123;</span><br><span class="line">flash:<span class="function"><span class="keyword">function</span>(<span class="params">opt</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> target = $(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;target.length; i++ )&#123;</span><br><span class="line"><span class="keyword">var</span> targetId = $(target[i]).attr(<span class="string">"id"</span>);</span><br><span class="line"><span class="keyword">var</span> interval = _intervalArray[targetId];</span><br><span class="line"><span class="keyword">if</span>(opt==<span class="string">'stop'</span> &amp;&amp; interval)&#123;</span><br><span class="line"><span class="built_in">window</span>.clearInterval(interval);</span><br><span class="line">$(target[i]).show();</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!interval)&#123;</span><br><span class="line">interval = <span class="built_in">window</span>.setInterval(<span class="string">"$.flashOnTarget('"</span>+targetId+<span class="string">"')"</span>,opt? (opt.cycle ? opt.cycle:<span class="number">400</span>) : <span class="number">400</span>);</span><br><span class="line">_intervalArray[targetId] = interval;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)(jQuery);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">span&#123;</span></span><br><span class="line"><span class="regexp"> border:1px solid red;</span></span><br><span class="line"><span class="regexp"> color:red;</span></span><br><span class="line"><span class="regexp"> padding:5px;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;span id="sp1"&gt;您有新消息1&lt;/</span>span&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;span id="sp2"&gt;您有新消息2&lt;/span&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;span id="sp3"&gt;您有新消息3&lt;/span&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;span id="sp4"&gt;您有新消息4&lt;/span&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>JBPM4与Spring整合</title>
      <link href="/2011/11/06/JBPM4%E4%B8%8ESpring%E6%95%B4%E5%90%88/"/>
      <url>/2011/11/06/JBPM4%E4%B8%8ESpring%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p>title: JBPM4与Spring整合 date: 2011-11-06 14:14 categories: - JBPM - Spring tags:</p><ul><li>JBPM<br>之前一直报错,郁闷了很久： <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[...] </span><br><span class="line">nested exception is org.hibernate.MappingException: Unknown entity: org.jbpm.pvm.internal.id.PropertyImpl </span><br><span class="line">at </span><br><span class="line">[...]</span><br></pre></td></tr></table></figure></li></ul><p>但是，该类的hibernate映射文件是写在jar包里面的。Hibernate为何没有解析到这个配置文件，不得而知。查看jbpm.hibernate.cfg.xml文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"jbpm.repository.hbm.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"jbpm.execution.hbm.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"jbpm.history.hbm.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"jbpm.task.hbm.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapping</span> <span class="attr">resource</span>=<span class="string">"jbpm.identity.hbm.xml"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>PropertyImpl的映射就在第一个被引入进来的文件当中，可以猜想到，其实整个的jbpm.hibernate.cfg.xml文件都没有Hibernate找到。<br>查看两种事务控制方式对应的配置文件jbpm.tx.spring.cfg.xml和jbpm.tx.hibernate.cfg.xml，发现后者会默认地去读classpath中的jbpm.hibernate.cfg.xml文件，而使用spring的时候却没有这样的操作(在applicationContext.xml文件中配置嘛)。<br>另外，在查看源码的时候，到处可见的是默认配置”jbpm.cfg.xml”：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Joram Barrez</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringHelper</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">protected</span> ApplicationContext applicationContext;</span><br><span class="line">  <span class="keyword">protected</span> String jbpmCfg = <span class="string">"jbpm.cfg.xml"</span>;</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>却看不到jbpm.hibernate.cfg.xml的默认值。jbpm的配置文件设计思想逐渐明晰：<br>总的配置从jbpm.cfg.xml开始，你可以更改这个文件以便使用自己的事务控制方式。<br>如果使用的是hibernate的事务控制，那么你就得提供好jbpm.tx.hibernate.cfg.xml文件，并做好配置。如果使用的是spring的事务控制，只需要在jbpm.cfg.xml文件中切换到spring中即可，其他的关于数据库连接信息，sessionFactory等等由你自己到applicationContext文件中配置即可。<br>以下是在applicationContxt.xml文件中配置的关于jbpm信息：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 业务系统 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"crmSessionFactory"</span></span></span><br><span class="line"><span class="tag"><span class="attr">class</span>=<span class="string">"org.springframework.orm.hibernate3.LocalSessionFactoryBean"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"crmDataSource"</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入外部配置文件，将jbpm和CRM的配置信息放到一起 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"configLocation"</span> <span class="attr">value</span>=<span class="string">"classpath:jbpm.hibernate.cfg.xml"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 扫描指定目录下的所有实体属性映射配置文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"mappingDirectoryLocations"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:/cn/chinacti/crm/entity<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>如此，我的问题得以解决。<br>道理很简单，以后记得，与Spring 集成，那么所有的数据库信息都应该从applicationContext.xml配置出发，而不应让集成进来的组件自己去找自己的配置文件。</p>]]></content>
      
      
      <categories>
          
          <category> JBPM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JBPM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat6 内存配置</title>
      <link href="/2011/10/18/Tomcat6-%E5%86%85%E5%AD%98%E9%85%8D%E7%BD%AE/"/>
      <url>/2011/10/18/Tomcat6-%E5%86%85%E5%AD%98%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>title: Tomcat6 内存配置 date: 2011-10-18 16:53 categories:<br>tags:</p><p>Tomcat启动内存设置 </p><p>其初始空间(即-Xms)是物理内存的1/64，最大空间(-Xmx)是物理内存的1/4。可以利用JVM提供的-Xmn -Xms -Xmx等选项可<br>进行设置<br>实例，以下给出1G内存环境下java jvm 的参数设置参考：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=<span class="string">"-server -Xms800m -Xmx800m -XX:PermSize=64M -XX:MaxNewSize=256m -XX:MaxPermSize=128m -Djava.awt.headless=true "</span></span><br><span class="line">JAVA_OPTS=<span class="string">"-server -Xms768m -Xmx768m -XX:PermSize=128m -XX:MaxPermSize=256m -XX:</span></span><br><span class="line"><span class="string">NewSize=192m -XX:MaxNewSize=384m"</span></span><br><span class="line">CATALINA_OPTS=<span class="string">"-server -Xms768m -Xmx768m -XX:PermSize=128m -XX:MaxPermSize=256m</span></span><br><span class="line"><span class="string">-XX:NewSize=192m -XX:MaxNewSize=384m"</span></span><br></pre></td></tr></table></figure></p><p>Linux：<br>在/usr/local/apache-tomcat-5.5.23/bin目录下的catalina.sh<br>添加： </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JAVA_OPTS=<span class="string">'-Xms512m -Xmx1024m'</span></span><br></pre></td></tr></table></figure><p>要加“m”说明是MB，否则就是KB了，在启动tomcat时会报内存不足。<br>-Xms：初始值<br>-Xmx：最大值<br>-Xmn：最小值 </p><p>Windows<br>在catalina.bat最前面加入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> JAVA_OPTS=-Xms128m -Xmx350m</span><br></pre></td></tr></table></figure></p><p>如果用startup.bat启动tomcat,OK设置生效.够成功的分配200M内存.<br>但是如果不是执行startup.bat启动tomcat而是利用windows的系统服务启动tomcat服务,上面的设置就不生效了,<br>就是说set JAVAOPTS=-Xms128m -Xmx350m 没起作用.上面分配200M内存就OOM了.. </p><p>windows服务 执行的是bin\tomcat.exe.他读取注册表中的值,而不是catalina.bat的设置.<br>解决办法:<br>修改注册表HKEYLOCAL_MACHINE\SOFTWARE\Apache Software<br>Foundation\Procrun 2.0\Tomcat6\Parameters\JavaOptions</p><p>原值为<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-Dcatalina.home=E:\Tomcat 6.0</span><br><span class="line">-Dcatalina.base=E:\Tomcat 6.0</span><br><span class="line">-Djava.endorsed.dirs=E:\Tomcat 6.0\common\endorsed</span><br><span class="line">-Djava.io.tmpdir=E:\Tomcat 6.0\temp</span><br><span class="line">-Djava.util.logging.manager=org.apache.juli.ClassLoaderLogManager</span><br><span class="line">-Djava.util.logging.config.file=E:\Tomcat 6.0\conf\logging.properties</span><br></pre></td></tr></table></figure></p><p>加入 -Xms300m -Xmx350m </p><p>重起tomcat服务,设置生效 </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate级联关系的说明和优化</title>
      <link href="/2011/10/15/Hibernate%E7%BA%A7%E8%81%94%E5%85%B3%E7%B3%BB%E7%9A%84%E8%AF%B4%E6%98%8E%E5%92%8C%E4%BC%98%E5%8C%96/"/>
      <url>/2011/10/15/Hibernate%E7%BA%A7%E8%81%94%E5%85%B3%E7%B3%BB%E7%9A%84%E8%AF%B4%E6%98%8E%E5%92%8C%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>今天接到一个公司的电话面试，里面问道Hibernate的级联，很失败，竟然回答的吞吞吐吐的，失败。前几天刚刚做了，看开做东西要仔仔细细，马虎问题大。 </p><p>说说级联吧： </p><p>========================INVERSE=============================== </p><p>Hibernate里面的inverse 有两个值 true ,false  ; </p><p>inverse的意思是翻转，这里面理解为对对应表的的维护 <a href="http://space.itpub.net/22259926/viewspace-631423" target="_blank" rel="noopener">http://space.itpub.net/22259926/viewspace-631423</a></p><p>里面说的，如果inverse为false的化，delete不会修改order表单，即对应关系没有维护。但是新增的时候，会增加order表单， </p><p>下面是转载的， </p><p>========================CASCADE=========================== </p><p>cascade 有五个选项 分别是: all ,delete ,none,save-update,delete-orphan ;<br>all : 所有情况下均进行关联操作。<br>none：所有情况下均不进行关联操作。这是默认值。<br>save-update:在执行save/update/saveOrUpdate时进行关联操作。<br>delete：在执行delete时进行关联操作。<br>delete-orphan: 当save/update/saveOrUpdate时，相当于save-update ；当删除操作时，相当于delete ； </p><p>all的意思是save-update + delete<br>all-delete-orphan 的意思是当对象图中产生孤儿节点时,在数据库中删除该节点<br>all比较好理解,举个例子说一下all-delete-orphan:<br>Category与Item是一对多的关系,也就是说Category类中有个Set类型的变量items.<br>举个例子,现items中存两个Item, item1,item2,如果定义关系为all-delete-orphan<br>当items中删除掉一个item(比如用remove()方法删除item1),那么被删除的Item类实例<br>将变成孤儿节点,当执行category.update(),或session.flush()时<br>hibernate同步缓存和数据库,会把数据库中item1对应的记录删掉 </p><p>========================LAZY=========================== </p><p>结论1： HQL代码 &gt; fetch（配置） &gt; lazy （配置）<br>结论2： 默认 lazy=”true”<br>结论3： fetch 和 lazy 主要是用来级联查询的，  </p><p>fetch参数指定了关联对象抓取的方式是select查询还是join查询，select方式时先查询返回要查询的主体对象（列表），再根据关联外键id，每一个对象发一个select查询，获取关联的对象，形成n+1次查 询； 而join方式，主体对象和关联对象用一句外键关联的sql同时查询出来，不会形成多次查询。<br>如果你的关联对象是延迟加载的，它当然不会去查询关联对象。 另外，在hql查询中配置文件中设置的join方式是不起作用的（而在所有其他查询方式如get、criteria或再关联获取等等都是有效的），会使用select方式，除非你在hql中指定join fetch某个关联对象。fetch策略用于定义 get/load一个对象时，如何获取非lazy的对象/集合。 这些参数在Query中无效。 </p><p>========================batch-size============================== </p><p>今天有个问题，就是一对多查询时候，比如Customer里面包含了太多Order表单怎么优化？当时懵了 </p><p>其实可以使用Hibernate的延迟加载功能，即时Lazy=true，只有在真正需要的时候，才去从数据库加载“本体”，Customer的某个Order，只用当该Order真正需要时候的，采取从数据库加载 </p>]]></content>
      
      
      <categories>
          
          <category> Hibernate </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>相对布局 遮罩 iframe取部分内容</title>
      <link href="/2011/07/05/%E7%9B%B8%E5%AF%B9%E5%B8%83%E5%B1%80-%E9%81%AE%E7%BD%A9-iframe%E5%8F%96%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9/"/>
      <url>/2011/07/05/%E7%9B%B8%E5%AF%B9%E5%B8%83%E5%B1%80-%E9%81%AE%E7%BD%A9-iframe%E5%8F%96%E9%83%A8%E5%88%86%E5%86%85%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">title: 相对布局 遮罩 iframe取部分内容 date: 2011-07-05 22:02 categories: tags:</span><br><span class="line">- HTML</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border:1px solid #0000ff;position:relative"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"border:0px solid red;display:inline;width:220px"</span> &gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">"http://www.jiankangzhuli.com/blog/"</span> <span class="attr">id</span>=<span class="string">"aa"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span> <span class="attr">marginheight</span>=<span class="string">"200"</span> <span class="attr">frameborder</span>=<span class="string">"1"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"1"</span> <span class="attr">style</span>=<span class="string">"width:680px; height:650px; margin:-365px 0  0 -300px;border:0px solid #ff00ff"</span> <span class="attr">scrolling</span>=<span class="string">"no"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.jiankangzhuli.com/blog/"</span> <span class="attr">style</span>=<span class="string">"font-size:12px"</span>&gt;</span>进入微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:380px;height:285px;display:inline;float:both;position:absolute;top:0px;left:0px;border:1px solid red; </span></span></span><br><span class="line"><span class="tag"><span class="string">text-align:center; </span></span></span><br><span class="line"><span class="tag"><span class="string">background-color:#DBDBDB; </span></span></span><br><span class="line"><span class="tag"><span class="string">filter:Alpha(opacity=0); </span></span></span><br><span class="line"><span class="tag"><span class="string">opacity:0.0;</span></span></span><br><span class="line"><span class="tag"><span class="string">z-index:100000;</span></span></span><br><span class="line"><span class="tag"><span class="string">cursor:pointer"</span></span></span><br><span class="line"><span class="tag"><span class="attr">onclick</span>=<span class="string">"window.location='http://www.jiankangzhuli.com/blog/';"</span></span></span><br><span class="line"><span class="tag"><span class="attr">title</span>=<span class="string">"点击进入微博"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  &amp;nbsp;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">其他内容<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Web前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux常用命令</title>
      <link href="/2011/04/30/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2011/04/30/Linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<p>解压zip文件:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@zdfl webapps]<span class="comment"># unzip crm.zip</span></span><br><span class="line">[root@zdfl webapps]<span class="comment"># unzip -d crm crm.zip</span></span><br></pre></td></tr></table></figure></p><p>删除文件或目录:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@zdfl webapps]<span class="comment"># rm -rf chart</span></span><br><span class="line">[root@zdfl webapps]<span class="comment"># rm -rf css</span></span><br><span class="line">[root@zdfl webapps]<span class="comment"># rm -rf fileUpload</span></span><br><span class="line">[root@zdfl webapps]<span class="comment"># rm -rf images</span></span><br><span class="line">[root@zdfl webapps]<span class="comment"># rm -rf install</span></span><br></pre></td></tr></table></figure></p><p>创建目录:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@zdfl webapps]<span class="comment"># mkdir crm</span></span><br></pre></td></tr></table></figure></p><p>vi编辑器：<br>进入编辑状态<br>vi 文件名<br>进入字符插入状态：<br>i<br>Esc,:进入命令输入模式<br>wq保存并推出<br>q!退出不保存</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Linux </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ognl.OgnlException target is null for setProperty(null, &quot;description&quot;, [Ljava.l</title>
      <link href="/2011/04/16/ognl.OgnlException--target-is-null-for-setProperty(null---description---%5BLjava.l/"/>
      <url>/2011/04/16/ognl.OgnlException--target-is-null-for-setProperty(null---description---%5BLjava.l/</url>
      
        <content type="html"><![CDATA[<p>以前也遇到过这样的错误，没有怎么注意。今天又遇到了。总结一下。<br>Struts页面参数传递错误原因有四种可能性。 </p><p>一、数据类型不匹配：<br>    如Action中为Integer类型，而传递过来的是String类型，此种原因多半因为写Struts标签或EL表达式时写错了。 </p><p>二、也可以称作数据类型不匹配：<br>    如Action中的属性为Integer id;   但是页面上传递参数时同时传递了多个name为id<br>的参数，如此以来即因为不能将整型数组转换成整型而出错。 </p><p>三、无法访问属性出错<br>   如Action中有一个Student的属性stu,Student有age的属性，但是Student却没有无参数的构造方法，或者age这个属性没有getter或setter方法，就或出错，这是网上的说法。 </p><p>四、Spring管理下的Action出错：<br>   这是今天我遇到的错误，也是最隐蔽的错误。<br>   情况如下：<br>    我使用注解的方式，将Action纳入Spring管理：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"*_*"</span> <span class="attr">class</span>=<span class="string">"&#123;1&#125;"</span> <span class="attr">method</span>=<span class="string">"&#123;2&#125;"</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 增加或修改的输入页面 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"input"</span>&gt;</span>/WEB-INF/pages/&#123;1&#125;/&#123;2&#125;UI.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!-- 直接访问与action中方法名称对应的页面 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"success"</span>&gt;</span>/WEB-INF/pages/&#123;1&#125;/&#123;2&#125;.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--重定向到list页面 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"reload"</span> <span class="attr">type</span>=<span class="string">"redirectAction"</span>&gt;</span>&#123;1&#125;_list.action?pageNum=$&#123;pageNum&#125;<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>BussinessAction(业务),里面用到了javaBean：AcceptType(受理类型):<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huqiao 2011-04-11</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">"bussiness"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(value=<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BussinessAction</span> <span class="keyword">extends</span> <span class="title">BaseAction</span>&lt;<span class="title">Bussiness</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AcceptType acceptType;</span><br><span class="line"></span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而另外一个Action:AcceptTypeAction: </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huqiao 2011-04-11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span>(<span class="string">"acceptType"</span>)</span><br><span class="line"><span class="meta">@Scope</span>(value=<span class="string">"prototype"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AcceptTypeAction</span> <span class="keyword">extends</span> <span class="title">BaseAction</span>&lt;<span class="title">AcceptType</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AcceptType acceptType;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即：AcceptTypeAction纳入Spring管理的名字与BussinessAction中的AcceptType属性名称重复了，在Bussiness添加页面提交时报类型转换异常：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cannot convert value of <span class="built_in">type</span> [cn.chinacti.crm.action.AcceptAction] to required <span class="built_in">type</span> [cn.chinacti.crm.entity.AcceptType] <span class="keyword">for</span> property <span class="string">'acceptType'</span>: no matching editors or conversion strategy found</span><br></pre></td></tr></table></figure></p><p>解决办法：<br>   修改Action的名称</p>]]></content>
      
      
      <categories>
          
          <category> Struts </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Struts </tag>
            
            <tag> prototype </tag>
            
            <tag> JSP </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate异常日志Batch update ...</title>
      <link href="/2011/04/01/Hibernate%E5%BC%82%E5%B8%B8%E6%97%A5%E5%BF%97Batch-update-.../"/>
      <url>/2011/04/01/Hibernate%E5%BC%82%E5%B8%B8%E6%97%A5%E5%BF%97Batch-update-.../</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Batch update returned unexpected row count from update [0]; actual row count: 0; expected: 1</span><br></pre></td></tr></table></figure><p>错误原因：<br>    实体主键设置了自增长方式，但是在保存的时候却为它设置了ID主键。 </p>]]></content>
      
      
      <categories>
          
          <category> Hibernate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring邮件收发</title>
      <link href="/2011/03/30/Spring%E9%82%AE%E4%BB%B6%E6%94%B6%E5%8F%91/"/>
      <url>/2011/03/30/Spring%E9%82%AE%E4%BB%B6%E6%94%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chinacti.crm.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.JavaMailSenderImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.mail.javamail.MimeMessageHelper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.chinacti.crm.entity.Mail;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 邮件收发引擎</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huqiao</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailEngine</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">MailEngine</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取邮件收发引擎实例</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MailEngine <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MailEngine();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送邮件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hostAddress  smtp.163.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> userName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> from</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> to</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> subject</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> body</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> MessagingException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">(Mail mail)</span> <span class="keyword">throws</span> MessagingException </span>&#123;   </span><br><span class="line">        JavaMailSenderImpl javaMail = <span class="keyword">new</span> JavaMailSenderImpl();</span><br><span class="line">        <span class="comment">//服务器地址</span></span><br><span class="line">        javaMail.setHost(<span class="string">"smtp.gmail.com"</span>);   </span><br><span class="line">        <span class="comment">//登录密码</span></span><br><span class="line">        javaMail.setPassword(<span class="string">"*********"</span>);   </span><br><span class="line">        <span class="comment">//登录用户名</span></span><br><span class="line">        javaMail.setUsername(<span class="string">"*********"</span>);</span><br><span class="line">        <span class="comment">//设置验证</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();   </span><br><span class="line">        prop.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);  </span><br><span class="line">        prop.setProperty(<span class="string">"mail.debug"</span>, <span class="string">"true"</span>);</span><br><span class="line">        prop.setProperty(<span class="string">"mail.smtp.socketFactory.port"</span>, <span class="string">"465"</span>);</span><br><span class="line">        prop.setProperty(<span class="string">"mail.smtp.socketFactory.class"</span>, <span class="string">"javax.net.ssl.SSLSocketFactory"</span>); </span><br><span class="line">            prop.setProperty(<span class="string">"mail.smtp.socketFactory.fallback"</span>, <span class="string">"false"</span>); </span><br><span class="line">            prop.setProperty(<span class="string">"mail.smtp.port"</span>, <span class="string">"465"</span>);</span><br><span class="line">            prop.setProperty(<span class="string">"mail.smtp.socketFactory.port"</span>, <span class="string">"465"</span>); </span><br><span class="line"></span><br><span class="line">              </span><br><span class="line">        javaMail.setJavaMailProperties(prop);</span><br><span class="line">        javaMail.setProtocol(<span class="string">"smtp"</span>);</span><br><span class="line">        <span class="comment">//生成邮件体</span></span><br><span class="line">        String receivers=mail.getTo();</span><br><span class="line">        String[] tos=receivers.split(<span class="string">";"</span>);</span><br><span class="line">        List&amp;lt;MimeMessage&amp;gt; messageList=<span class="keyword">new</span> ArrayList&amp;lt;MimeMessage&amp;gt;();</span><br><span class="line">        <span class="keyword">for</span>(String to:tos)&#123;</span><br><span class="line">            MimeMessage message = javaMail.createMimeMessage();   </span><br><span class="line">            MimeMessageHelper messageHelp = <span class="keyword">new</span> MimeMessageHelper(message,<span class="keyword">true</span>,<span class="string">"UTF-8"</span>);</span><br><span class="line">            <span class="comment">//邮件来源</span></span><br><span class="line">        messageHelp.setFrom(mail.getFrom());   </span><br><span class="line">        <span class="comment">//邮件主题</span></span><br><span class="line">        messageHelp.setSubject(mail.getSubject());   </span><br><span class="line">        <span class="comment">//邮件内容          </span></span><br><span class="line">        messageHelp.setText(mail.getBody(), <span class="keyword">true</span>);</span><br><span class="line">    messageHelp.setTo(to); </span><br><span class="line">    messageList.add(message);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">      </span><br><span class="line">              <span class="comment">//邮件发送地址</span></span><br><span class="line">                MimeMessage[] msgs=<span class="keyword">new</span> MimeMessage[messageList.size()];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&amp;lt;msgs.length;i++)&#123;</span><br><span class="line">        msgs[i]=messageList.get(i);</span><br><span class="line">        &#125;</span><br><span class="line">        javaMail.send(msgs);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.chinacti.crm.entity;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 邮件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> huqiao 2011-03-30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mail</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String hostAddress;<span class="comment">//邮件服务器地址</span></span><br><span class="line"><span class="keyword">private</span> String userName;<span class="comment">//登录用户名</span></span><br><span class="line"><span class="keyword">private</span> String password;<span class="comment">//登录密码</span></span><br><span class="line"><span class="keyword">private</span> String from;<span class="comment">//发件人</span></span><br><span class="line"><span class="keyword">private</span> String to;<span class="comment">//收件人</span></span><br><span class="line"><span class="keyword">private</span> String subject;<span class="comment">//主题</span></span><br><span class="line"><span class="keyword">private</span> String body;<span class="comment">//内容</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHostAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> hostAddress;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHostAddress</span><span class="params">(String hostAddress)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.hostAddress = hostAddress;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userName = userName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getFrom</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> from;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFrom</span><span class="params">(String from)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.from = from;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getTo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTo</span><span class="params">(String to)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.to = to;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getSubject</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> subject;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSubject</span><span class="params">(String subject)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.subject = subject;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> body;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBody</span><span class="params">(String body)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.body = body;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：我原先使用163的时，发送单个邮件还要靠运气。群发的完全成功率更是0%。有时候能发，说明不是我配置的问题，我认为还是163的问题，我这个账号功能有限制。试着注册了一个gmail的账号，群发单发都能100%成功。 爽！</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring中的read-only</title>
      <link href="/2011/03/25/Spring%E4%B8%AD%E7%9A%84read-only/"/>
      <url>/2011/03/25/Spring%E4%B8%AD%E7%9A%84read-only/</url>
      
        <content type="html"><![CDATA[<p>今天遇到一个奇怪的问题，使用Hibernate执行查询语句的时候，数据中的数据无缘地被改变了。首先想到的是把持久态的对象在Action中改变了属性值，但是没发现有这样的操作。百思不得其解。使用Debug模式跟踪了一下，发现确实是在list方法执行时出现对数据的莫名更改，而我用JUnit进行单元测试时，却没有这样的情况。 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">findByHql</span><span class="params">(String hql, <span class="keyword">int</span> startPos, <span class="keyword">int</span> length,Object[] paramValues)</span> </span>&#123;</span><br><span class="line">session = getCurrentSession();</span><br><span class="line">Query query = session.createQuery(hql);</span><br><span class="line"><span class="keyword">if</span> (paramValues!=<span class="keyword">null</span>&amp;&amp;paramValues.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; paramValues.length; i++) &#123;</span><br><span class="line">query.setParameter(i, paramValues[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">query.setFirstResult(startPos);</span><br><span class="line">query.setMaxResults(length);</span><br><span class="line">List&lt;T&gt; list = query.list();</span><br><span class="line"><span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决办法，在Spring中的事务控制部分将该方法配置成只读方式： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"add*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRES_NEW"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRES_NEW"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRES_NEW"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
            <tag> Spring </tag>
            
            <tag> junit </tag>
            
            <tag> 单元测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hibernate中的LEFT JOIN</title>
      <link href="/2011/03/21/Hibernate%E4%B8%AD%E7%9A%84LEFT-JOIN/"/>
      <url>/2011/03/21/Hibernate%E4%B8%AD%E7%9A%84LEFT-JOIN/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Order</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Set&lt;OrderProduct&gt; orderProducts=<span class="keyword">new</span> HashSet&lt;OrderProduct&gt;();     </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderProduct</span> </span>&#123;</span><br><span class="line">   <span class="keyword">private</span> Order order;<span class="comment">// 订单</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Query query1=session.createQuery("<span class="keyword">SELECT</span> <span class="keyword">count</span>(*),<span class="keyword">SUM</span>(o.sum),op.product <span class="keyword">FROM</span> <span class="keyword">Order</span> o <span class="keyword">LEFT</span> <span class="keyword">JOIN</span> o.orderProducts op  <span class="keyword">WHERE</span> op.product.id=<span class="number">18</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> op.product<span class="string">");</span></span><br></pre></td></tr></table></figure><p>如上，首先，订单与订单产品之间是一对多关联关系，orderProduct是Order的一个属性，这样，表外连接时，就不再使用ON子句了。 </p><p>而采用以下查询语句：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Query query1=session.createQuery("FROM Order o LEFT JOIN o.orderProducts op WHERE o.isReturn = 0 and o.isdel = 0 </span><br><span class="line">");</span><br></pre></td></tr></table></figure></p><p>查询的结果将为一个类型为数组的List，其中，第一个元素类型为Order，第二个元素为OrderProduct</p>]]></content>
      
      
      <categories>
          
          <category> Hibernate </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hibernate </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改Tomcat的编码方式</title>
      <link href="/2011/03/20/%E4%BF%AE%E6%94%B9Tomcat%E7%9A%84%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/"/>
      <url>/2011/03/20/%E4%BF%AE%E6%94%B9Tomcat%E7%9A%84%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>今天做一个简单的在线音乐播放器，使用的是<embed>标签，但是出现一个问题，即中文音乐文件无法访问。<br>开始以为是embed标签的问题。但是以前写过一个静态页面就是使用了中文名称。另外还有一个现象是，<br>即使将音乐文件直接放在tomcat的WebRoot目录下，通过浏览器都无法访问，使用迅雷也无法下载。所以就想到了是Tomcat的问题了。 </p><p>默认情况下，tomcat使用的是iso8859-1的编码编码方式，浏览器的embed标签中src指向的地址要通过tomcat去解析。如果包含中文，采用这种编码方式就会出现乱码问题，而在这种情况下，乱码问题就表现出无法访问该音频文件了。 </p><p>解决方法很简单：<br>修改tomcat下的conf/server.xml文件，找到如下代码：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> </span></span><br><span class="line"><span class="tag">            <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p><p>这段代码规定了Tomcat监听HTTP请求的端口号等信息。可以在这里添加一个属性：URIEncoding，将该属性值设置为UTF-8，即可让Tomcat（默认ISO-8859-1编码）以UTF-8的编码处理get请求。更改后的代码如下所示： </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">URIEncoding</span>=<span class="string">"UTF-8"</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span> </span></span><br><span class="line"><span class="tag">             <span class="attr">redirectPort</span>=<span class="string">"8443"</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVASCRIPT中keycode总结</title>
      <link href="/2011/02/05/JAVASCRIPT%E4%B8%ADkeycode%E6%80%BB%E7%BB%93/"/>
      <url>/2011/02/05/JAVASCRIPT%E4%B8%ADkeycode%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>Keypress 的KeyCode: </p><table class="bbcode"><br> <tbody><br>  <tr><br>   <td>-</td><br>   <td>小键盘</td><br>   <td>大键盘</td><br>  </tr><br>  <tr><br>   <td>“-”</td><br>   <td>45</td><br>   <td>45</td><br>  </tr><br>  <tr><br>   <td>“.”</td><br>   <td> 46</td><br>   <td>46</td><br>  </tr><br>  <tr><br>   <td>0~9</td><br>   <td>48~57</td><br>   <td>48~57</td><br>  </tr>&nbsp;<br>  <tr><br>   <td>a~z</td><br>   <td>-</td><br>   <td> 97~122</td><br>  </tr><br>  <tr><br>   <td>“`”</td><br>   <td>-</td><br>   <td>96</td><br>  </tr><br> </tbody><br></table> <p>Keydown 的keycode: </p><p><table class="bbcode"><br> <tbody><br>  <tr><br>   <td>-</td><br>   <td>小键盘</td><br>   <td>大键盘</td><br>  </tr>&nbsp;<br>  <tr><br>   <td>“-”</td><br>   <td>109</td><br>   <td> 189</td><br>  </tr><br>  <tr><br>   <td>“.”</td><br>   <td>110</td><br>   <td>190</td><br>  </tr><br>  <tr><br>   <td>0~9</td><br>   <td>96~105</td><br>   <td>48~57</td><br>  </tr><br>  <tr><br>   <td>左,上,右,下</td><br>   <td>-</td><br>   <td>37~40</td><br>  </tr><br> </tbody><br></table><br>Keyup的keycode同keydown相同,注意keydown总是在keypress之前触发,用keyup可以获得用户按键后输入。 </p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>农户，进城务工人员，北漂，程序员。</p><p>平时行事低调不爱吵吵，找个地方记点儿东西，没有别的目的。都是些想到哪儿说到哪儿的支言片语，不一定完整，也就当一个记事本，以备以后反思和总结。希望能多一些具体的人和事，少一些怨天尤人的心情，因为生活是真实的，心情是一时的，不管什么细枝末节的生活，留到未来某个时刻来回味，肯定又是另外一番感受。</p><p>有幸相遇，与君共勉 ：</p><p>1.多读书，多思考，才会进步！</p><p>2.懂得知足和感恩，懂得体会生活的乐趣，一切才会有意义。</p><p>3.紧跟时代潮流，更新自己的思想和工具集。技术学习，不进则退。</p><p>4.生命不在于一时的璀璨，而在于长久的积累，所谓欲速则不达，今天的质量决定未来结果，一点一滴都影响深远。</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
